syntax = "proto3";
package v1;
option go_package = "github.com/cossim/coss-server/service/user/api/v1";

message UserLoginRequest {
  // @inject_tag: json:"email"
  string Email=1;
  // @inject_tag: json:"password"
  string Password=2;
}

message UserLoginResponse {
  // @inject_tag: json:"user_id"
  string UserId=1;
  // @inject_tag: json:"nick_name"
  string NickName=2;
  // @inject_tag: json:"email"
  string Email=3;
  // @inject_tag: json:"tel"
  string Tel=4;
  // @inject_tag: json:"avatar"
  string Avatar=5;
  // @inject_tag: json:"signature"
  string Signature=6;
}

message UserRegisterRequest {
  // @inject_tag: json:"email"
  string Email=1;
  // @inject_tag: json:"nick_name"
  string NickName=2;
  // @inject_tag: json:"password"
  string Password=3;
  // @inject_tag: json:"confirm_password"
  string ConfirmPassword=4;
  // @inject_tag: json:"avatar"
  string Avatar=5;
  // @inject_tag: json:"public_key"
  string PublicKey = 6;
}

message UserRegisterResponse {
  // @inject_tag: json:"user_id"
  string UserId=1;
}
message UserInfoRequest {
  // @inject_tag: json:"user_id"
  string UserId=1;
}

// 定义用户状态枚举类型
enum UserStatus {
  USER_STATUS_UNKNOWN = 0;
  USER_STATUS_NORMAL = 1;
  USER_STATUS_DISABLE = 2;
  USER_STATUS_DELETED = 3;
  USER_STATUS_LOCK = 4;
}


message UserInfoResponse {
  // @inject_tag: json:"user_id"
  string UserId=1;
  // @inject_tag: json:"nick_name"
  string NickName=2;
  // @inject_tag: json:"email"
  string Email=3;
  // @inject_tag: json:"tel"
  string Tel=4;
  // @inject_tag: json:"avatar"
  string Avatar=5;
  // @inject_tag: json:"signature"
  string Signature=6;
  // @inject_tag: json:"status"
  UserStatus Status = 7;
}

message GetBatchUserInfoRequest {
  repeated string UserIds = 1;
}
message GetUserInfoByEmailRequest {
  // @inject_tag: json:"email"
  string Email = 1;
}


message GetBatchUserInfoResponse {
  // @inject_tag: json:"users" form:"users"
  repeated UserInfoResponse Users = 1;
}
message UserRequest {
  // @inject_tag: json:"user_id"
  string UserId = 1;
}

message GetUserPublicKeyResponse {
  // @inject_tag: json:"public_key"
  string PublicKey = 1;
}

message SetPublicKeyRequest {
  // @inject_tag: json:"user_id"
  string UserId = 1;
  // @inject_tag: json:"public_key"
  string PublicKey = 2;
}
message UserResponse {
  // @inject_tag: json:"user_id"
  string UserId = 1;
}
message ModifyUserPasswordRequest {
  // @inject_tag: json:"user_id"
  string UserId = 1;
  // @inject_tag: json:"password"
  string Password = 2;
}
message User {
  // @inject_tag: json:"user_id"
  string UserId=1;
  // @inject_tag: json:"nick_name"
  string NickName=2;
  // @inject_tag: json:"email"
  string Email=3;
  // @inject_tag: json:"tel"
  string Tel=4;
  // @inject_tag: json:"avatar"
  string Avatar=5;
  // @inject_tag: json:"signature"
  string Signature=6;
  // @inject_tag: json:"status"
  UserStatus Status = 7;
}
message GetUserPasswordByUserIdResponse {
  // @inject_tag: json:"user_id"
  string UserId = 1;
  // @inject_tag: json:"password"
  string Password = 2;
}

message SetUserSecretBundleRequest {
  // @inject_tag: json:"user_id"
  string UserId = 1;
  // @inject_tag: json:"secret_bundle"
  string SecretBundle = 2;
}

message SetUserSecretBundleResponse {
  // @inject_tag: json:"user_id"
  string UserId = 1;
}

message GetUserSecretBundleRequest {
  // @inject_tag: json:"user_id"
  string UserId = 1;
}

message GetUserSecretBundleResponse {
  // @inject_tag: json:"user_id"
  string UserId = 1;
  // @inject_tag: json:"secret_bundle"
  string SecretBundle = 2;
}

service UserService {
  //用户登录
  rpc UserLogin(UserLoginRequest) returns(UserLoginResponse);
  //用户注册
  rpc UserRegister(UserRegisterRequest) returns(UserRegisterResponse);
  //获取用户信息
  rpc UserInfo(UserInfoRequest) returns(UserInfoResponse);
  //批量获取用户信息
  rpc GetBatchUserInfo(GetBatchUserInfoRequest) returns (GetBatchUserInfoResponse);
  //根据email获取用户信息
  rpc GetUserInfoByEmail(GetUserInfoByEmailRequest) returns (UserInfoResponse);
  rpc GetUserPublicKey (UserRequest) returns (GetUserPublicKeyResponse);
  rpc SetUserPublicKey (SetPublicKeyRequest) returns (UserResponse);
  rpc ModifyUserInfo(User) returns (UserResponse);
  rpc ModifyUserPassword(ModifyUserPasswordRequest) returns (UserResponse);
  rpc GetUserPasswordByUserId(UserRequest) returns (GetUserPasswordByUserIdResponse);
  //设置用户密钥包
  rpc SetUserSecretBundle (SetUserSecretBundleRequest) returns (SetUserSecretBundleResponse);
  //获取用户密钥包
  rpc GetUserSecretBundle (GetUserSecretBundleRequest) returns (GetUserSecretBundleResponse);
}

