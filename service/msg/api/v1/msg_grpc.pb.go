// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.25.1
// source: api/v1/msg.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	MsgService_SendUserMessage_FullMethodName               = "/v1.MsgService/SendUserMessage"
	MsgService_SendGroupMessage_FullMethodName              = "/v1.MsgService/SendGroupMessage"
	MsgService_GetUserMessageList_FullMethodName            = "/v1.MsgService/GetUserMessageList"
	MsgService_GetLastMsgsForUserWithFriends_FullMethodName = "/v1.MsgService/GetLastMsgsForUserWithFriends"
	MsgService_GetLastMsgsForGroupsWithIDs_FullMethodName   = "/v1.MsgService/GetLastMsgsForGroupsWithIDs"
	MsgService_GetLastMsgsByDialogIds_FullMethodName        = "/v1.MsgService/GetLastMsgsByDialogIds"
	MsgService_EditUserMessage_FullMethodName               = "/v1.MsgService/EditUserMessage"
	MsgService_DeleteUserMessage_FullMethodName             = "/v1.MsgService/DeleteUserMessage"
	MsgService_EditGroupMessage_FullMethodName              = "/v1.MsgService/EditGroupMessage"
	MsgService_DeleteGroupMessage_FullMethodName            = "/v1.MsgService/DeleteGroupMessage"
	MsgService_GetUserMessageById_FullMethodName            = "/v1.MsgService/GetUserMessageById"
	MsgService_GetGroupMessageById_FullMethodName           = "/v1.MsgService/GetGroupMessageById"
	MsgService_SetUserMsgLabel_FullMethodName               = "/v1.MsgService/SetUserMsgLabel"
	MsgService_SetGroupMsgLabel_FullMethodName              = "/v1.MsgService/SetGroupMsgLabel"
)

// MsgServiceClient is the client API for MsgService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MsgServiceClient interface {
	// 发送私聊消息
	SendUserMessage(ctx context.Context, in *SendUserMsgRequest, opts ...grpc.CallOption) (*SendUserMsgResponse, error)
	// 发送群消息
	SendGroupMessage(ctx context.Context, in *SendGroupMsgRequest, opts ...grpc.CallOption) (*SendGroupMsgResponse, error)
	// 获取用户消息列表
	GetUserMessageList(ctx context.Context, in *GetUserMsgListRequest, opts ...grpc.CallOption) (*GetUserMsgListResponse, error)
	// 根据好友id获取最后一条消息
	GetLastMsgsForUserWithFriends(ctx context.Context, in *UserMsgsRequest, opts ...grpc.CallOption) (*UserMessages, error)
	// 根据群组id获取最后一条消息
	GetLastMsgsForGroupsWithIDs(ctx context.Context, in *GroupMsgsRequest, opts ...grpc.CallOption) (*GroupMessages, error)
	// 根据对话id获取最后一条消息
	GetLastMsgsByDialogIds(ctx context.Context, in *GetLastMsgsByDialogIdsRequest, opts ...grpc.CallOption) (*GetLastMsgsResponse, error)
	// 编辑私聊消息
	EditUserMessage(ctx context.Context, in *EditUserMsgRequest, opts ...grpc.CallOption) (*UserMessage, error)
	// 撤回私聊消息
	DeleteUserMessage(ctx context.Context, in *DeleteUserMsgRequest, opts ...grpc.CallOption) (*UserMessage, error)
	// 编辑群消息
	EditGroupMessage(ctx context.Context, in *EditGroupMsgRequest, opts ...grpc.CallOption) (*GroupMessage, error)
	// 撤回群消息
	DeleteGroupMessage(ctx context.Context, in *DeleteGroupMsgRequest, opts ...grpc.CallOption) (*GroupMessage, error)
	// 根据消息id获取私聊消息
	GetUserMessageById(ctx context.Context, in *GetUserMsgByIDRequest, opts ...grpc.CallOption) (*UserMessage, error)
	// 根据消息id获取群消息
	GetGroupMessageById(ctx context.Context, in *GetGroupMsgByIDRequest, opts ...grpc.CallOption) (*GroupMessage, error)
	// 设置私聊消息标注状态
	SetUserMsgLabel(ctx context.Context, in *SetUserMsgLabelRequest, opts ...grpc.CallOption) (*SetUserMsgLabelResponse, error)
	// 设置群消息标注状态
	SetGroupMsgLabel(ctx context.Context, in *SetGroupMsgLabelRequest, opts ...grpc.CallOption) (*SetGroupMsgLabelResponse, error)
}

type msgServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewMsgServiceClient(cc grpc.ClientConnInterface) MsgServiceClient {
	return &msgServiceClient{cc}
}

func (c *msgServiceClient) SendUserMessage(ctx context.Context, in *SendUserMsgRequest, opts ...grpc.CallOption) (*SendUserMsgResponse, error) {
	out := new(SendUserMsgResponse)
	err := c.cc.Invoke(ctx, MsgService_SendUserMessage_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgServiceClient) SendGroupMessage(ctx context.Context, in *SendGroupMsgRequest, opts ...grpc.CallOption) (*SendGroupMsgResponse, error) {
	out := new(SendGroupMsgResponse)
	err := c.cc.Invoke(ctx, MsgService_SendGroupMessage_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgServiceClient) GetUserMessageList(ctx context.Context, in *GetUserMsgListRequest, opts ...grpc.CallOption) (*GetUserMsgListResponse, error) {
	out := new(GetUserMsgListResponse)
	err := c.cc.Invoke(ctx, MsgService_GetUserMessageList_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgServiceClient) GetLastMsgsForUserWithFriends(ctx context.Context, in *UserMsgsRequest, opts ...grpc.CallOption) (*UserMessages, error) {
	out := new(UserMessages)
	err := c.cc.Invoke(ctx, MsgService_GetLastMsgsForUserWithFriends_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgServiceClient) GetLastMsgsForGroupsWithIDs(ctx context.Context, in *GroupMsgsRequest, opts ...grpc.CallOption) (*GroupMessages, error) {
	out := new(GroupMessages)
	err := c.cc.Invoke(ctx, MsgService_GetLastMsgsForGroupsWithIDs_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgServiceClient) GetLastMsgsByDialogIds(ctx context.Context, in *GetLastMsgsByDialogIdsRequest, opts ...grpc.CallOption) (*GetLastMsgsResponse, error) {
	out := new(GetLastMsgsResponse)
	err := c.cc.Invoke(ctx, MsgService_GetLastMsgsByDialogIds_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgServiceClient) EditUserMessage(ctx context.Context, in *EditUserMsgRequest, opts ...grpc.CallOption) (*UserMessage, error) {
	out := new(UserMessage)
	err := c.cc.Invoke(ctx, MsgService_EditUserMessage_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgServiceClient) DeleteUserMessage(ctx context.Context, in *DeleteUserMsgRequest, opts ...grpc.CallOption) (*UserMessage, error) {
	out := new(UserMessage)
	err := c.cc.Invoke(ctx, MsgService_DeleteUserMessage_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgServiceClient) EditGroupMessage(ctx context.Context, in *EditGroupMsgRequest, opts ...grpc.CallOption) (*GroupMessage, error) {
	out := new(GroupMessage)
	err := c.cc.Invoke(ctx, MsgService_EditGroupMessage_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgServiceClient) DeleteGroupMessage(ctx context.Context, in *DeleteGroupMsgRequest, opts ...grpc.CallOption) (*GroupMessage, error) {
	out := new(GroupMessage)
	err := c.cc.Invoke(ctx, MsgService_DeleteGroupMessage_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgServiceClient) GetUserMessageById(ctx context.Context, in *GetUserMsgByIDRequest, opts ...grpc.CallOption) (*UserMessage, error) {
	out := new(UserMessage)
	err := c.cc.Invoke(ctx, MsgService_GetUserMessageById_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgServiceClient) GetGroupMessageById(ctx context.Context, in *GetGroupMsgByIDRequest, opts ...grpc.CallOption) (*GroupMessage, error) {
	out := new(GroupMessage)
	err := c.cc.Invoke(ctx, MsgService_GetGroupMessageById_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgServiceClient) SetUserMsgLabel(ctx context.Context, in *SetUserMsgLabelRequest, opts ...grpc.CallOption) (*SetUserMsgLabelResponse, error) {
	out := new(SetUserMsgLabelResponse)
	err := c.cc.Invoke(ctx, MsgService_SetUserMsgLabel_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgServiceClient) SetGroupMsgLabel(ctx context.Context, in *SetGroupMsgLabelRequest, opts ...grpc.CallOption) (*SetGroupMsgLabelResponse, error) {
	out := new(SetGroupMsgLabelResponse)
	err := c.cc.Invoke(ctx, MsgService_SetGroupMsgLabel_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MsgServiceServer is the server API for MsgService service.
// All implementations must embed UnimplementedMsgServiceServer
// for forward compatibility
type MsgServiceServer interface {
	// 发送私聊消息
	SendUserMessage(context.Context, *SendUserMsgRequest) (*SendUserMsgResponse, error)
	// 发送群消息
	SendGroupMessage(context.Context, *SendGroupMsgRequest) (*SendGroupMsgResponse, error)
	// 获取用户消息列表
	GetUserMessageList(context.Context, *GetUserMsgListRequest) (*GetUserMsgListResponse, error)
	// 根据好友id获取最后一条消息
	GetLastMsgsForUserWithFriends(context.Context, *UserMsgsRequest) (*UserMessages, error)
	// 根据群组id获取最后一条消息
	GetLastMsgsForGroupsWithIDs(context.Context, *GroupMsgsRequest) (*GroupMessages, error)
	// 根据对话id获取最后一条消息
	GetLastMsgsByDialogIds(context.Context, *GetLastMsgsByDialogIdsRequest) (*GetLastMsgsResponse, error)
	// 编辑私聊消息
	EditUserMessage(context.Context, *EditUserMsgRequest) (*UserMessage, error)
	// 撤回私聊消息
	DeleteUserMessage(context.Context, *DeleteUserMsgRequest) (*UserMessage, error)
	// 编辑群消息
	EditGroupMessage(context.Context, *EditGroupMsgRequest) (*GroupMessage, error)
	// 撤回群消息
	DeleteGroupMessage(context.Context, *DeleteGroupMsgRequest) (*GroupMessage, error)
	// 根据消息id获取私聊消息
	GetUserMessageById(context.Context, *GetUserMsgByIDRequest) (*UserMessage, error)
	// 根据消息id获取群消息
	GetGroupMessageById(context.Context, *GetGroupMsgByIDRequest) (*GroupMessage, error)
	// 设置私聊消息标注状态
	SetUserMsgLabel(context.Context, *SetUserMsgLabelRequest) (*SetUserMsgLabelResponse, error)
	// 设置群消息标注状态
	SetGroupMsgLabel(context.Context, *SetGroupMsgLabelRequest) (*SetGroupMsgLabelResponse, error)
	mustEmbedUnimplementedMsgServiceServer()
}

// UnimplementedMsgServiceServer must be embedded to have forward compatible implementations.
type UnimplementedMsgServiceServer struct {
}

func (UnimplementedMsgServiceServer) SendUserMessage(context.Context, *SendUserMsgRequest) (*SendUserMsgResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendUserMessage not implemented")
}
func (UnimplementedMsgServiceServer) SendGroupMessage(context.Context, *SendGroupMsgRequest) (*SendGroupMsgResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendGroupMessage not implemented")
}
func (UnimplementedMsgServiceServer) GetUserMessageList(context.Context, *GetUserMsgListRequest) (*GetUserMsgListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserMessageList not implemented")
}
func (UnimplementedMsgServiceServer) GetLastMsgsForUserWithFriends(context.Context, *UserMsgsRequest) (*UserMessages, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetLastMsgsForUserWithFriends not implemented")
}
func (UnimplementedMsgServiceServer) GetLastMsgsForGroupsWithIDs(context.Context, *GroupMsgsRequest) (*GroupMessages, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetLastMsgsForGroupsWithIDs not implemented")
}
func (UnimplementedMsgServiceServer) GetLastMsgsByDialogIds(context.Context, *GetLastMsgsByDialogIdsRequest) (*GetLastMsgsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetLastMsgsByDialogIds not implemented")
}
func (UnimplementedMsgServiceServer) EditUserMessage(context.Context, *EditUserMsgRequest) (*UserMessage, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EditUserMessage not implemented")
}
func (UnimplementedMsgServiceServer) DeleteUserMessage(context.Context, *DeleteUserMsgRequest) (*UserMessage, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteUserMessage not implemented")
}
func (UnimplementedMsgServiceServer) EditGroupMessage(context.Context, *EditGroupMsgRequest) (*GroupMessage, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EditGroupMessage not implemented")
}
func (UnimplementedMsgServiceServer) DeleteGroupMessage(context.Context, *DeleteGroupMsgRequest) (*GroupMessage, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteGroupMessage not implemented")
}
func (UnimplementedMsgServiceServer) GetUserMessageById(context.Context, *GetUserMsgByIDRequest) (*UserMessage, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserMessageById not implemented")
}
func (UnimplementedMsgServiceServer) GetGroupMessageById(context.Context, *GetGroupMsgByIDRequest) (*GroupMessage, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetGroupMessageById not implemented")
}
func (UnimplementedMsgServiceServer) SetUserMsgLabel(context.Context, *SetUserMsgLabelRequest) (*SetUserMsgLabelResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetUserMsgLabel not implemented")
}
func (UnimplementedMsgServiceServer) SetGroupMsgLabel(context.Context, *SetGroupMsgLabelRequest) (*SetGroupMsgLabelResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetGroupMsgLabel not implemented")
}
func (UnimplementedMsgServiceServer) mustEmbedUnimplementedMsgServiceServer() {}

// UnsafeMsgServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MsgServiceServer will
// result in compilation errors.
type UnsafeMsgServiceServer interface {
	mustEmbedUnimplementedMsgServiceServer()
}

func RegisterMsgServiceServer(s grpc.ServiceRegistrar, srv MsgServiceServer) {
	s.RegisterService(&MsgService_ServiceDesc, srv)
}

func _MsgService_SendUserMessage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SendUserMsgRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServiceServer).SendUserMessage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MsgService_SendUserMessage_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServiceServer).SendUserMessage(ctx, req.(*SendUserMsgRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MsgService_SendGroupMessage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SendGroupMsgRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServiceServer).SendGroupMessage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MsgService_SendGroupMessage_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServiceServer).SendGroupMessage(ctx, req.(*SendGroupMsgRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MsgService_GetUserMessageList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUserMsgListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServiceServer).GetUserMessageList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MsgService_GetUserMessageList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServiceServer).GetUserMessageList(ctx, req.(*GetUserMsgListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MsgService_GetLastMsgsForUserWithFriends_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserMsgsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServiceServer).GetLastMsgsForUserWithFriends(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MsgService_GetLastMsgsForUserWithFriends_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServiceServer).GetLastMsgsForUserWithFriends(ctx, req.(*UserMsgsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MsgService_GetLastMsgsForGroupsWithIDs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GroupMsgsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServiceServer).GetLastMsgsForGroupsWithIDs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MsgService_GetLastMsgsForGroupsWithIDs_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServiceServer).GetLastMsgsForGroupsWithIDs(ctx, req.(*GroupMsgsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MsgService_GetLastMsgsByDialogIds_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetLastMsgsByDialogIdsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServiceServer).GetLastMsgsByDialogIds(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MsgService_GetLastMsgsByDialogIds_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServiceServer).GetLastMsgsByDialogIds(ctx, req.(*GetLastMsgsByDialogIdsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MsgService_EditUserMessage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EditUserMsgRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServiceServer).EditUserMessage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MsgService_EditUserMessage_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServiceServer).EditUserMessage(ctx, req.(*EditUserMsgRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MsgService_DeleteUserMessage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteUserMsgRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServiceServer).DeleteUserMessage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MsgService_DeleteUserMessage_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServiceServer).DeleteUserMessage(ctx, req.(*DeleteUserMsgRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MsgService_EditGroupMessage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EditGroupMsgRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServiceServer).EditGroupMessage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MsgService_EditGroupMessage_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServiceServer).EditGroupMessage(ctx, req.(*EditGroupMsgRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MsgService_DeleteGroupMessage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteGroupMsgRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServiceServer).DeleteGroupMessage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MsgService_DeleteGroupMessage_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServiceServer).DeleteGroupMessage(ctx, req.(*DeleteGroupMsgRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MsgService_GetUserMessageById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUserMsgByIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServiceServer).GetUserMessageById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MsgService_GetUserMessageById_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServiceServer).GetUserMessageById(ctx, req.(*GetUserMsgByIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MsgService_GetGroupMessageById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetGroupMsgByIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServiceServer).GetGroupMessageById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MsgService_GetGroupMessageById_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServiceServer).GetGroupMessageById(ctx, req.(*GetGroupMsgByIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MsgService_SetUserMsgLabel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetUserMsgLabelRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServiceServer).SetUserMsgLabel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MsgService_SetUserMsgLabel_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServiceServer).SetUserMsgLabel(ctx, req.(*SetUserMsgLabelRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MsgService_SetGroupMsgLabel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetGroupMsgLabelRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServiceServer).SetGroupMsgLabel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MsgService_SetGroupMsgLabel_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServiceServer).SetGroupMsgLabel(ctx, req.(*SetGroupMsgLabelRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// MsgService_ServiceDesc is the grpc.ServiceDesc for MsgService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var MsgService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "v1.MsgService",
	HandlerType: (*MsgServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SendUserMessage",
			Handler:    _MsgService_SendUserMessage_Handler,
		},
		{
			MethodName: "SendGroupMessage",
			Handler:    _MsgService_SendGroupMessage_Handler,
		},
		{
			MethodName: "GetUserMessageList",
			Handler:    _MsgService_GetUserMessageList_Handler,
		},
		{
			MethodName: "GetLastMsgsForUserWithFriends",
			Handler:    _MsgService_GetLastMsgsForUserWithFriends_Handler,
		},
		{
			MethodName: "GetLastMsgsForGroupsWithIDs",
			Handler:    _MsgService_GetLastMsgsForGroupsWithIDs_Handler,
		},
		{
			MethodName: "GetLastMsgsByDialogIds",
			Handler:    _MsgService_GetLastMsgsByDialogIds_Handler,
		},
		{
			MethodName: "EditUserMessage",
			Handler:    _MsgService_EditUserMessage_Handler,
		},
		{
			MethodName: "DeleteUserMessage",
			Handler:    _MsgService_DeleteUserMessage_Handler,
		},
		{
			MethodName: "EditGroupMessage",
			Handler:    _MsgService_EditGroupMessage_Handler,
		},
		{
			MethodName: "DeleteGroupMessage",
			Handler:    _MsgService_DeleteGroupMessage_Handler,
		},
		{
			MethodName: "GetUserMessageById",
			Handler:    _MsgService_GetUserMessageById_Handler,
		},
		{
			MethodName: "GetGroupMessageById",
			Handler:    _MsgService_GetGroupMessageById_Handler,
		},
		{
			MethodName: "SetUserMsgLabel",
			Handler:    _MsgService_SetUserMsgLabel_Handler,
		},
		{
			MethodName: "SetGroupMsgLabel",
			Handler:    _MsgService_SetGroupMsgLabel_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/v1/msg.proto",
}
