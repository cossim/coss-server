// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.25.1
// source: api/v1/group_announcement_read.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	GroupAnnouncementReadService_MarkAnnouncementAsRead_FullMethodName      = "/v1.GroupAnnouncementReadService/MarkAnnouncementAsRead"
	GroupAnnouncementReadService_GetReadUsers_FullMethodName                = "/v1.GroupAnnouncementReadService/GetReadUsers"
	GroupAnnouncementReadService_GetAnnouncementReadByUserId_FullMethodName = "/v1.GroupAnnouncementReadService/GetAnnouncementReadByUserId"
)

// GroupAnnouncementReadServiceClient is the client API for GroupAnnouncementReadService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type GroupAnnouncementReadServiceClient interface {
	MarkAnnouncementAsRead(ctx context.Context, in *MarkAnnouncementAsReadRequest, opts ...grpc.CallOption) (*MarkAnnouncementAsReadResponse, error)
	GetReadUsers(ctx context.Context, in *GetReadUsersRequest, opts ...grpc.CallOption) (*GetReadUsersResponse, error)
	GetAnnouncementReadByUserId(ctx context.Context, in *GetAnnouncementReadByUserIdRequest, opts ...grpc.CallOption) (*GetAnnouncementReadByUserIdResponse, error)
}

type groupAnnouncementReadServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewGroupAnnouncementReadServiceClient(cc grpc.ClientConnInterface) GroupAnnouncementReadServiceClient {
	return &groupAnnouncementReadServiceClient{cc}
}

func (c *groupAnnouncementReadServiceClient) MarkAnnouncementAsRead(ctx context.Context, in *MarkAnnouncementAsReadRequest, opts ...grpc.CallOption) (*MarkAnnouncementAsReadResponse, error) {
	out := new(MarkAnnouncementAsReadResponse)
	err := c.cc.Invoke(ctx, GroupAnnouncementReadService_MarkAnnouncementAsRead_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *groupAnnouncementReadServiceClient) GetReadUsers(ctx context.Context, in *GetReadUsersRequest, opts ...grpc.CallOption) (*GetReadUsersResponse, error) {
	out := new(GetReadUsersResponse)
	err := c.cc.Invoke(ctx, GroupAnnouncementReadService_GetReadUsers_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *groupAnnouncementReadServiceClient) GetAnnouncementReadByUserId(ctx context.Context, in *GetAnnouncementReadByUserIdRequest, opts ...grpc.CallOption) (*GetAnnouncementReadByUserIdResponse, error) {
	out := new(GetAnnouncementReadByUserIdResponse)
	err := c.cc.Invoke(ctx, GroupAnnouncementReadService_GetAnnouncementReadByUserId_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// GroupAnnouncementReadServiceServer is the interface API for GroupAnnouncementReadService service.
// All implementations must embed UnimplementedGroupAnnouncementReadServiceServer
// for forward compatibility
type GroupAnnouncementReadServiceServer interface {
	MarkAnnouncementAsRead(context.Context, *MarkAnnouncementAsReadRequest) (*MarkAnnouncementAsReadResponse, error)
	GetReadUsers(context.Context, *GetReadUsersRequest) (*GetReadUsersResponse, error)
	GetAnnouncementReadByUserId(context.Context, *GetAnnouncementReadByUserIdRequest) (*GetAnnouncementReadByUserIdResponse, error)
	mustEmbedUnimplementedGroupAnnouncementReadServiceServer()
}

// UnimplementedGroupAnnouncementReadServiceServer must be embedded to have forward compatible implementations.
type UnimplementedGroupAnnouncementReadServiceServer struct {
}

func (UnimplementedGroupAnnouncementReadServiceServer) MarkAnnouncementAsRead(context.Context, *MarkAnnouncementAsReadRequest) (*MarkAnnouncementAsReadResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MarkAnnouncementAsRead not implemented")
}
func (UnimplementedGroupAnnouncementReadServiceServer) GetReadUsers(context.Context, *GetReadUsersRequest) (*GetReadUsersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetReadUsers not implemented")
}
func (UnimplementedGroupAnnouncementReadServiceServer) GetAnnouncementReadByUserId(context.Context, *GetAnnouncementReadByUserIdRequest) (*GetAnnouncementReadByUserIdResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAnnouncementReadByUserId not implemented")
}
func (UnimplementedGroupAnnouncementReadServiceServer) mustEmbedUnimplementedGroupAnnouncementReadServiceServer() {
}

// UnsafeGroupAnnouncementReadServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to GroupAnnouncementReadServiceServer will
// result in compilation errors.
type UnsafeGroupAnnouncementReadServiceServer interface {
	mustEmbedUnimplementedGroupAnnouncementReadServiceServer()
}

func RegisterGroupAnnouncementReadServiceServer(s grpc.ServiceRegistrar, srv GroupAnnouncementReadServiceServer) {
	s.RegisterService(&GroupAnnouncementReadService_ServiceDesc, srv)
}

func _GroupAnnouncementReadService_MarkAnnouncementAsRead_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MarkAnnouncementAsReadRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GroupAnnouncementReadServiceServer).MarkAnnouncementAsRead(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GroupAnnouncementReadService_MarkAnnouncementAsRead_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GroupAnnouncementReadServiceServer).MarkAnnouncementAsRead(ctx, req.(*MarkAnnouncementAsReadRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GroupAnnouncementReadService_GetReadUsers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetReadUsersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GroupAnnouncementReadServiceServer).GetReadUsers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GroupAnnouncementReadService_GetReadUsers_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GroupAnnouncementReadServiceServer).GetReadUsers(ctx, req.(*GetReadUsersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GroupAnnouncementReadService_GetAnnouncementReadByUserId_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAnnouncementReadByUserIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GroupAnnouncementReadServiceServer).GetAnnouncementReadByUserId(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GroupAnnouncementReadService_GetAnnouncementReadByUserId_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GroupAnnouncementReadServiceServer).GetAnnouncementReadByUserId(ctx, req.(*GetAnnouncementReadByUserIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// GroupAnnouncementReadService_ServiceDesc is the grpc.ServiceDesc for GroupAnnouncementReadService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var GroupAnnouncementReadService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "v1.GroupAnnouncementReadService",
	HandlerType: (*GroupAnnouncementReadServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "MarkAnnouncementAsRead",
			Handler:    _GroupAnnouncementReadService_MarkAnnouncementAsRead_Handler,
		},
		{
			MethodName: "GetReadUsers",
			Handler:    _GroupAnnouncementReadService_GetReadUsers_Handler,
		},
		{
			MethodName: "GetAnnouncementReadByUserId",
			Handler:    _GroupAnnouncementReadService_GetAnnouncementReadByUserId_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/v1/group_announcement_read.proto",
}
