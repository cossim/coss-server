syntax = "proto3";
package v1;
option go_package = "github.com/cossim/coss-server/service/relation/api/v1";

message AddFriendRequest {
  // @inject_tag: json:"user_id"
  string UserId = 1;    // 用户id
  // @inject_tag: json:"friend_id"
  string FriendId = 2;  // 好友id
  // @inject_tag: json:"msg"
  string Msg = 3;       // 验证信息
}

message AddFriendResponse {
  // Add any necessary fields here for the response
}

message ManageFriendRequest {
  // @inject_tag: json:"user_id" form:"user_id"
  string UserId = 1;
  // @inject_tag: json:"friend_id" form:"friend_id"
  string FriendId = 2;
  // @inject_tag: json:"dialog_id" form:"dialog_id"
  uint32 DialogId = 3;
  // @inject_tag: json:"status" form:"status"
  RelationStatus Status = 4;
}

message ManageFriendResponse {
  // Add any necessary fields here for the response
}

message DeleteFriendRequest {
  // @inject_tag: json:"user_id" form:"user_id"
  string UserId = 1;
  // @inject_tag: json:"friend_id" form:"friend_id"
  string FriendId = 2;
}

message DeleteFriendResponse {
  // Add any necessary fields here for the response
}

message AddBlacklistRequest {
  // @inject_tag: json:"user_id" form:"user_id"
  string UserId = 1;
  // @inject_tag: json:"friend_id" form:"friend_id"
  string FriendId = 2;
}

message AddBlacklistResponse {
  // Add any necessary fields here for the response
}

message DeleteBlacklistRequest {
  // @inject_tag: json:"user_id" form:"user_id"
  string UserId = 1;
  // @inject_tag: json:"friend_id" form:"friend_id"
  string FriendId = 2;
}

message DeleteBlacklistResponse {
  // Add any necessary fields here for the response
}

message Friend {
  // @inject_tag: json:"user_id" form:"user_id"
  string UserId = 1;
  // @inject_tag: json:"dialog_id" form:"dialog_id"
  uint32 DialogId = 2;
}

message GetFriendListRequest {
  // @inject_tag: json:"user_id" form:"user_id"
  string UserId = 1;
}

message GetFriendListResponse {
  // @inject_tag: json:"friend_list" form:"friend_list"
  repeated Friend FriendList = 1;
}

message Blacklist {
  // @inject_tag: json:"user_id" form:"user_id"
  string UserId = 1;
}

message GetBlacklistRequest {
  // @inject_tag: json:"user_id" form:"user_id"
  string UserId = 1;
}

message GetBlacklistResponse {
  // @inject_tag: json:"blacklist" form:"blacklist"
  repeated Blacklist Blacklist = 1;
}

message GetUserRelationRequest {
  // @inject_tag: json:"user_id"
  string UserId = 1;
  // @inject_tag: json:"friend_id"
  string FriendId = 2;
}

enum RelationStatus {
  RELATION_STATUS_APPLYING = 0;   // 申请中
  RELATION_STATUS_PENDING = 1;    // 待通过
  RELATION_STATUS_ADDED = 2;      // 已添加
  RELATION_STATUS_REJECTED = 3;   // 已拒绝
  RELATION_STATUS_BLOCKED = 4;    // 已拉黑
  RELATION_STATUS_DELETED = 5;    // 已删除
}

message GetUserRelationResponse {
  // @inject_tag: json:"user_id"
  string UserId = 1;
  // @inject_tag: json:"friend_id"
  string FriendId = 2;
  //  @inject_tag: json:"dialog_id"
  uint32 DialogId = 3;
  // @inject_tag: json:"status"
  RelationStatus Status = 4;
}

message GetFriendRequestListRequest {
  // @inject_tag: json:"user_id"
  string UserId = 1;
}

message GetFriendRequestListResponse {
  // @inject_tag: json:"friend_request_list"
  repeated FriendRequestList FriendRequestList = 1;
}

message FriendRequestList {
  // @inject_tag: json:"user_id"
  string UserId = 1;    // 用户id
  // @inject_tag: json:"nickname"
  string Nickname = 2;  // 用户昵称
  // @inject_tag: json:"avatar"
  string Avatar = 3;    // 用户头像
  // @inject_tag: json:"msg"
  string Msg = 4;       // 申请信息
  // @inject_tag: json:"status"
  RelationStatus Status = 5;
}

message GetUserRelationByUserIdsRequest {
  // @inject_tag: json:"user_id"
  string UserId = 1;    // 用户id
  // @inject_tag: json:"friend_ids"
  repeated string FriendIds = 2; // 好友id列表
}

message GetUserRelationByUserIdsResponse {
  repeated GetUserRelationResponse Users = 1;
}

service UserRelationService {
  rpc AddFriend(AddFriendRequest) returns (AddFriendResponse);
  rpc ManageFriend(ManageFriendRequest) returns (ManageFriendResponse);
  rpc ManageFriendRevert(ManageFriendRequest) returns (ManageFriendResponse);
  rpc DeleteFriend(DeleteFriendRequest) returns (DeleteFriendResponse);
  rpc DeleteFriendRevert(DeleteFriendRequest) returns (DeleteFriendResponse);
  rpc AddBlacklist(AddBlacklistRequest) returns (AddBlacklistResponse);
  rpc DeleteBlacklist(DeleteBlacklistRequest) returns (DeleteBlacklistResponse);
  rpc GetFriendList(GetFriendListRequest) returns (GetFriendListResponse);
  rpc GetBlacklist(GetBlacklistRequest) returns (GetBlacklistResponse);
  rpc GetUserRelation(GetUserRelationRequest) returns (GetUserRelationResponse);
  rpc GetFriendRequestList(GetFriendRequestListRequest) returns (GetFriendRequestListResponse);
  // 批量获取用户关系
  rpc GetUserRelationByUserIds(GetUserRelationByUserIdsRequest) returns (GetUserRelationByUserIdsResponse);
}