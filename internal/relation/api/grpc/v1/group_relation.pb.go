// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.32.0
// 	protoc        v4.25.1
// source: api/grpc/v1/group_relation.proto

package v1

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// 添加 GroupIdentity 枚举定义
type GroupIdentity int32

const (
	GroupIdentity_IDENTITY_USER  GroupIdentity = 0 // 普通用户
	GroupIdentity_IDENTITY_ADMIN GroupIdentity = 1 // 管理员
	GroupIdentity_IDENTITY_OWNER GroupIdentity = 2 // 群主
)

// Enum value maps for GroupIdentity.
var (
	GroupIdentity_name = map[int32]string{
		0: "IDENTITY_USER",
		1: "IDENTITY_ADMIN",
		2: "IDENTITY_OWNER",
	}
	GroupIdentity_value = map[string]int32{
		"IDENTITY_USER":  0,
		"IDENTITY_ADMIN": 1,
		"IDENTITY_OWNER": 2,
	}
)

func (x GroupIdentity) Enum() *GroupIdentity {
	p := new(GroupIdentity)
	*p = x
	return p
}

func (x GroupIdentity) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (GroupIdentity) Descriptor() protoreflect.EnumDescriptor {
	return file_api_grpc_v1_group_relation_proto_enumTypes[0].Descriptor()
}

func (GroupIdentity) Type() protoreflect.EnumType {
	return &file_api_grpc_v1_group_relation_proto_enumTypes[0]
}

func (x GroupIdentity) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use GroupIdentity.Descriptor instead.
func (GroupIdentity) EnumDescriptor() ([]byte, []int) {
	return file_api_grpc_v1_group_relation_proto_rawDescGZIP(), []int{0}
}

type UserGroupRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// @inject_tag: json:"user_id"
	UserId string `protobuf:"bytes,1,opt,name=UserId,proto3" json:"user_id"`
	// @inject_tag: json:"group_id"
	GroupId uint32 `protobuf:"varint,2,opt,name=GroupId,proto3" json:"group_id"`
}

func (x *UserGroupRequest) Reset() {
	*x = UserGroupRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_grpc_v1_group_relation_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserGroupRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserGroupRequest) ProtoMessage() {}

func (x *UserGroupRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_grpc_v1_group_relation_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserGroupRequest.ProtoReflect.Descriptor instead.
func (*UserGroupRequest) Descriptor() ([]byte, []int) {
	return file_api_grpc_v1_group_relation_proto_rawDescGZIP(), []int{0}
}

func (x *UserGroupRequest) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *UserGroupRequest) GetGroupId() uint32 {
	if x != nil {
		return x.GroupId
	}
	return 0
}

type UserGroupResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *UserGroupResponse) Reset() {
	*x = UserGroupResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_grpc_v1_group_relation_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserGroupResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserGroupResponse) ProtoMessage() {}

func (x *UserGroupResponse) ProtoReflect() protoreflect.Message {
	mi := &file_api_grpc_v1_group_relation_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserGroupResponse.ProtoReflect.Descriptor instead.
func (*UserGroupResponse) Descriptor() ([]byte, []int) {
	return file_api_grpc_v1_group_relation_proto_rawDescGZIP(), []int{1}
}

type GroupIDRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// @inject_tag: json:"group_id"
	GroupId uint32 `protobuf:"varint,1,opt,name=GroupId,proto3" json:"group_id"`
}

func (x *GroupIDRequest) Reset() {
	*x = GroupIDRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_grpc_v1_group_relation_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GroupIDRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GroupIDRequest) ProtoMessage() {}

func (x *GroupIDRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_grpc_v1_group_relation_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GroupIDRequest.ProtoReflect.Descriptor instead.
func (*GroupIDRequest) Descriptor() ([]byte, []int) {
	return file_api_grpc_v1_group_relation_proto_rawDescGZIP(), []int{2}
}

func (x *GroupIDRequest) GetGroupId() uint32 {
	if x != nil {
		return x.GroupId
	}
	return 0
}

type UserIdsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// @inject_tag: json:"user_ids"
	UserIds []string `protobuf:"bytes,1,rep,name=UserIds,proto3" json:"user_ids"`
}

func (x *UserIdsResponse) Reset() {
	*x = UserIdsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_grpc_v1_group_relation_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserIdsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserIdsResponse) ProtoMessage() {}

func (x *UserIdsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_api_grpc_v1_group_relation_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserIdsResponse.ProtoReflect.Descriptor instead.
func (*UserIdsResponse) Descriptor() ([]byte, []int) {
	return file_api_grpc_v1_group_relation_proto_rawDescGZIP(), []int{3}
}

func (x *UserIdsResponse) GetUserIds() []string {
	if x != nil {
		return x.UserIds
	}
	return nil
}

type GetGroupRelationRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// @inject_tag: json:"group_id"
	GroupId uint32 `protobuf:"varint,1,opt,name=GroupId,proto3" json:"group_id"` // 群聊id
	// @inject_tag: json:"user_id"
	UserId string `protobuf:"bytes,2,opt,name=UserId,proto3" json:"user_id"` // 用户id
}

func (x *GetGroupRelationRequest) Reset() {
	*x = GetGroupRelationRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_grpc_v1_group_relation_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetGroupRelationRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetGroupRelationRequest) ProtoMessage() {}

func (x *GetGroupRelationRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_grpc_v1_group_relation_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetGroupRelationRequest.ProtoReflect.Descriptor instead.
func (*GetGroupRelationRequest) Descriptor() ([]byte, []int) {
	return file_api_grpc_v1_group_relation_proto_rawDescGZIP(), []int{4}
}

func (x *GetGroupRelationRequest) GetGroupId() uint32 {
	if x != nil {
		return x.GroupId
	}
	return 0
}

func (x *GetGroupRelationRequest) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

type GetGroupRelationResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// @inject_tag: json:"group_id"
	GroupId uint32 `protobuf:"varint,1,opt,name=GroupId,proto3" json:"group_id"` // 群聊ID
	// @inject_tag: json:"user_id"
	UserId string `protobuf:"bytes,2,opt,name=UserId,proto3" json:"user_id"` // 用户ID
	//	// @inject_tag: json:"status"
	//	GroupRelationStatus Status = 3; //状态
	//
	// @inject_tag: json:"identity"
	Identity GroupIdentity `protobuf:"varint,4,opt,name=Identity,proto3,enum=relation_v1.GroupIdentity" json:"identity"` // 群聊身份
	// @inject_tag: json:"join_method"
	JoinMethod uint32 `protobuf:"varint,5,opt,name=JoinMethod,proto3" json:"join_method"` // 加入方式
	// @inject_tag: json:"join_time"
	JoinTime int64 `protobuf:"varint,6,opt,name=JoinTime,proto3" json:"join_time"` //加入时间
	// @inject_tag: json:"mute_end_time"
	MuteEndTime int64 `protobuf:"varint,7,opt,name=MuteEndTime,proto3" json:"mute_end_time"` //禁言结束时间
	// @inject_tag: json:"is_silent"
	IsSilent bool `protobuf:"varint,8,opt,name=IsSilent,proto3" json:"is_silent"` //是否静默通知
	// @inject_tag: json:"inviter"
	Inviter string `protobuf:"bytes,9,opt,name=Inviter,proto3" json:"inviter"` //邀请人
	// @inject_tag: json:"remark"
	Remark string `protobuf:"bytes,11,opt,name=Remark,proto3" json:"remark"` //群聊备注
}

func (x *GetGroupRelationResponse) Reset() {
	*x = GetGroupRelationResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_grpc_v1_group_relation_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetGroupRelationResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetGroupRelationResponse) ProtoMessage() {}

func (x *GetGroupRelationResponse) ProtoReflect() protoreflect.Message {
	mi := &file_api_grpc_v1_group_relation_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetGroupRelationResponse.ProtoReflect.Descriptor instead.
func (*GetGroupRelationResponse) Descriptor() ([]byte, []int) {
	return file_api_grpc_v1_group_relation_proto_rawDescGZIP(), []int{5}
}

func (x *GetGroupRelationResponse) GetGroupId() uint32 {
	if x != nil {
		return x.GroupId
	}
	return 0
}

func (x *GetGroupRelationResponse) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *GetGroupRelationResponse) GetIdentity() GroupIdentity {
	if x != nil {
		return x.Identity
	}
	return GroupIdentity_IDENTITY_USER
}

func (x *GetGroupRelationResponse) GetJoinMethod() uint32 {
	if x != nil {
		return x.JoinMethod
	}
	return 0
}

func (x *GetGroupRelationResponse) GetJoinTime() int64 {
	if x != nil {
		return x.JoinTime
	}
	return 0
}

func (x *GetGroupRelationResponse) GetMuteEndTime() int64 {
	if x != nil {
		return x.MuteEndTime
	}
	return 0
}

func (x *GetGroupRelationResponse) GetIsSilent() bool {
	if x != nil {
		return x.IsSilent
	}
	return false
}

func (x *GetGroupRelationResponse) GetInviter() string {
	if x != nil {
		return x.Inviter
	}
	return ""
}

func (x *GetGroupRelationResponse) GetRemark() string {
	if x != nil {
		return x.Remark
	}
	return ""
}

type GetUserManageGroupIDRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// @inject_tag: json:"user_id"
	UserId string `protobuf:"bytes,1,opt,name=UserId,proto3" json:"user_id"`
}

func (x *GetUserManageGroupIDRequest) Reset() {
	*x = GetUserManageGroupIDRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_grpc_v1_group_relation_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetUserManageGroupIDRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetUserManageGroupIDRequest) ProtoMessage() {}

func (x *GetUserManageGroupIDRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_grpc_v1_group_relation_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetUserManageGroupIDRequest.ProtoReflect.Descriptor instead.
func (*GetUserManageGroupIDRequest) Descriptor() ([]byte, []int) {
	return file_api_grpc_v1_group_relation_proto_rawDescGZIP(), []int{6}
}

func (x *GetUserManageGroupIDRequest) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

type GetUserManageGroupIDResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GroupIDs []*GroupIDRequest `protobuf:"bytes,1,rep,name=GroupIDs,proto3" json:"GroupIDs,omitempty"`
}

func (x *GetUserManageGroupIDResponse) Reset() {
	*x = GetUserManageGroupIDResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_grpc_v1_group_relation_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetUserManageGroupIDResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetUserManageGroupIDResponse) ProtoMessage() {}

func (x *GetUserManageGroupIDResponse) ProtoReflect() protoreflect.Message {
	mi := &file_api_grpc_v1_group_relation_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetUserManageGroupIDResponse.ProtoReflect.Descriptor instead.
func (*GetUserManageGroupIDResponse) Descriptor() ([]byte, []int) {
	return file_api_grpc_v1_group_relation_proto_rawDescGZIP(), []int{7}
}

func (x *GetUserManageGroupIDResponse) GetGroupIDs() []*GroupIDRequest {
	if x != nil {
		return x.GroupIDs
	}
	return nil
}

type UserGroupRequestList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// @inject_tag: json:"group_id"
	GroupId uint32 `protobuf:"varint,1,opt,name=GroupId,proto3" json:"group_id"` // 群聊id
	// @inject_tag: json:"user_id"
	UserId string `protobuf:"bytes,2,opt,name=UserId,proto3" json:"user_id"` // 用户id
	// @inject_tag: json:"msg"
	Msg string `protobuf:"bytes,3,opt,name=Msg,proto3" json:"msg"` // 申请信息
	//	// @inject_tag: json:"status"
	//	GroupRelationStatus Status = 4;
	//
	// @inject_tag: json:"created_at"
	CreatedAt int64 `protobuf:"varint,5,opt,name=CreatedAt,proto3" json:"created_at"`
	// @inject_tag: json:"inviter_id"
	InviterId string `protobuf:"bytes,6,opt,name=InviterId,proto3" json:"inviter_id"` // 邀请人id
}

func (x *UserGroupRequestList) Reset() {
	*x = UserGroupRequestList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_grpc_v1_group_relation_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserGroupRequestList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserGroupRequestList) ProtoMessage() {}

func (x *UserGroupRequestList) ProtoReflect() protoreflect.Message {
	mi := &file_api_grpc_v1_group_relation_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserGroupRequestList.ProtoReflect.Descriptor instead.
func (*UserGroupRequestList) Descriptor() ([]byte, []int) {
	return file_api_grpc_v1_group_relation_proto_rawDescGZIP(), []int{8}
}

func (x *UserGroupRequestList) GetGroupId() uint32 {
	if x != nil {
		return x.GroupId
	}
	return 0
}

func (x *UserGroupRequestList) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *UserGroupRequestList) GetMsg() string {
	if x != nil {
		return x.Msg
	}
	return ""
}

func (x *UserGroupRequestList) GetCreatedAt() int64 {
	if x != nil {
		return x.CreatedAt
	}
	return 0
}

func (x *UserGroupRequestList) GetInviterId() string {
	if x != nil {
		return x.InviterId
	}
	return ""
}

type CreateGroupAndInviteUsersRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// @inject_tag: json:"group_id"
	GroupId uint32 `protobuf:"varint,1,opt,name=GroupId,proto3" json:"group_id"` // 群聊id
	// @inject_tag: json:"user_id"
	UserID string `protobuf:"bytes,2,opt,name=UserID,proto3" json:"user_id"` // 用户ID
	// @inject_tag: json:"member"
	Member []string `protobuf:"bytes,3,rep,name=Member,proto3" json:"member"` // 邀请的好友
}

func (x *CreateGroupAndInviteUsersRequest) Reset() {
	*x = CreateGroupAndInviteUsersRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_grpc_v1_group_relation_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateGroupAndInviteUsersRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateGroupAndInviteUsersRequest) ProtoMessage() {}

func (x *CreateGroupAndInviteUsersRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_grpc_v1_group_relation_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateGroupAndInviteUsersRequest.ProtoReflect.Descriptor instead.
func (*CreateGroupAndInviteUsersRequest) Descriptor() ([]byte, []int) {
	return file_api_grpc_v1_group_relation_proto_rawDescGZIP(), []int{9}
}

func (x *CreateGroupAndInviteUsersRequest) GetGroupId() uint32 {
	if x != nil {
		return x.GroupId
	}
	return 0
}

func (x *CreateGroupAndInviteUsersRequest) GetUserID() string {
	if x != nil {
		return x.UserID
	}
	return ""
}

func (x *CreateGroupAndInviteUsersRequest) GetMember() []string {
	if x != nil {
		return x.Member
	}
	return nil
}

type GetBatchGroupRelationRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// @inject_tag: json:"group_id"
	GroupId uint32 `protobuf:"varint,1,opt,name=GroupId,proto3" json:"group_id"` // 群聊id
	// @inject_tag: json:"user_id"
	UserIds []string `protobuf:"bytes,2,rep,name=UserIds,proto3" json:"user_id"` // 用户id列表
}

func (x *GetBatchGroupRelationRequest) Reset() {
	*x = GetBatchGroupRelationRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_grpc_v1_group_relation_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetBatchGroupRelationRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetBatchGroupRelationRequest) ProtoMessage() {}

func (x *GetBatchGroupRelationRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_grpc_v1_group_relation_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetBatchGroupRelationRequest.ProtoReflect.Descriptor instead.
func (*GetBatchGroupRelationRequest) Descriptor() ([]byte, []int) {
	return file_api_grpc_v1_group_relation_proto_rawDescGZIP(), []int{10}
}

func (x *GetBatchGroupRelationRequest) GetGroupId() uint32 {
	if x != nil {
		return x.GroupId
	}
	return 0
}

func (x *GetBatchGroupRelationRequest) GetUserIds() []string {
	if x != nil {
		return x.UserIds
	}
	return nil
}

type GetBatchGroupRelationResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GroupRelationResponses []*GetGroupRelationResponse `protobuf:"bytes,1,rep,name=GroupRelationResponses,proto3" json:"GroupRelationResponses,omitempty"`
}

func (x *GetBatchGroupRelationResponse) Reset() {
	*x = GetBatchGroupRelationResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_grpc_v1_group_relation_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetBatchGroupRelationResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetBatchGroupRelationResponse) ProtoMessage() {}

func (x *GetBatchGroupRelationResponse) ProtoReflect() protoreflect.Message {
	mi := &file_api_grpc_v1_group_relation_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetBatchGroupRelationResponse.ProtoReflect.Descriptor instead.
func (*GetBatchGroupRelationResponse) Descriptor() ([]byte, []int) {
	return file_api_grpc_v1_group_relation_proto_rawDescGZIP(), []int{11}
}

func (x *GetBatchGroupRelationResponse) GetGroupRelationResponses() []*GetGroupRelationResponse {
	if x != nil {
		return x.GroupRelationResponses
	}
	return nil
}

type DeleteGroupRelationByGroupIdAndUserIDResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *DeleteGroupRelationByGroupIdAndUserIDResponse) Reset() {
	*x = DeleteGroupRelationByGroupIdAndUserIDResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_grpc_v1_group_relation_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteGroupRelationByGroupIdAndUserIDResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteGroupRelationByGroupIdAndUserIDResponse) ProtoMessage() {}

func (x *DeleteGroupRelationByGroupIdAndUserIDResponse) ProtoReflect() protoreflect.Message {
	mi := &file_api_grpc_v1_group_relation_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteGroupRelationByGroupIdAndUserIDResponse.ProtoReflect.Descriptor instead.
func (*DeleteGroupRelationByGroupIdAndUserIDResponse) Descriptor() ([]byte, []int) {
	return file_api_grpc_v1_group_relation_proto_rawDescGZIP(), []int{12}
}

type CreateGroupAndInviteUsersResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// @inject_tag: json:"dialog_id"
	DialogId uint32 `protobuf:"varint,1,opt,name=DialogId,proto3" json:"dialog_id"`
}

func (x *CreateGroupAndInviteUsersResponse) Reset() {
	*x = CreateGroupAndInviteUsersResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_grpc_v1_group_relation_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateGroupAndInviteUsersResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateGroupAndInviteUsersResponse) ProtoMessage() {}

func (x *CreateGroupAndInviteUsersResponse) ProtoReflect() protoreflect.Message {
	mi := &file_api_grpc_v1_group_relation_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateGroupAndInviteUsersResponse.ProtoReflect.Descriptor instead.
func (*CreateGroupAndInviteUsersResponse) Descriptor() ([]byte, []int) {
	return file_api_grpc_v1_group_relation_proto_rawDescGZIP(), []int{13}
}

func (x *CreateGroupAndInviteUsersResponse) GetDialogId() uint32 {
	if x != nil {
		return x.DialogId
	}
	return 0
}

var File_api_grpc_v1_group_relation_proto protoreflect.FileDescriptor

var file_api_grpc_v1_group_relation_proto_rawDesc = []byte{
	0x0a, 0x20, 0x61, 0x70, 0x69, 0x2f, 0x67, 0x72, 0x70, 0x63, 0x2f, 0x76, 0x31, 0x2f, 0x67, 0x72,
	0x6f, 0x75, 0x70, 0x5f, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x12, 0x0b, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x76, 0x31, 0x1a,
	0x1b, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2f, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x44, 0x0a, 0x10,
	0x55, 0x73, 0x65, 0x72, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x16, 0x0a, 0x06, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x06, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x47, 0x72, 0x6f, 0x75,
	0x70, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x47, 0x72, 0x6f, 0x75, 0x70,
	0x49, 0x64, 0x22, 0x13, 0x0a, 0x11, 0x55, 0x73, 0x65, 0x72, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x2a, 0x0a, 0x0e, 0x47, 0x72, 0x6f, 0x75, 0x70,
	0x49, 0x44, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x47, 0x72, 0x6f,
	0x75, 0x70, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x47, 0x72, 0x6f, 0x75,
	0x70, 0x49, 0x64, 0x22, 0x2b, 0x0a, 0x0f, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x73, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64,
	0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x07, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x73,
	0x22, 0x4b, 0x0a, 0x17, 0x47, 0x65, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x65, 0x6c, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x47,
	0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x47, 0x72,
	0x6f, 0x75, 0x70, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x22, 0xb0, 0x02,
	0x0a, 0x18, 0x47, 0x65, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x47, 0x72,
	0x6f, 0x75, 0x70, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x47, 0x72, 0x6f,
	0x75, 0x70, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x36, 0x0a, 0x08,
	0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1a,
	0x2e, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x76, 0x31, 0x2e, 0x47, 0x72, 0x6f,
	0x75, 0x70, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x52, 0x08, 0x49, 0x64, 0x65, 0x6e,
	0x74, 0x69, 0x74, 0x79, 0x12, 0x1e, 0x0a, 0x0a, 0x4a, 0x6f, 0x69, 0x6e, 0x4d, 0x65, 0x74, 0x68,
	0x6f, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x4a, 0x6f, 0x69, 0x6e, 0x4d, 0x65,
	0x74, 0x68, 0x6f, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x4a, 0x6f, 0x69, 0x6e, 0x54, 0x69, 0x6d, 0x65,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x4a, 0x6f, 0x69, 0x6e, 0x54, 0x69, 0x6d, 0x65,
	0x12, 0x20, 0x0a, 0x0b, 0x4d, 0x75, 0x74, 0x65, 0x45, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x4d, 0x75, 0x74, 0x65, 0x45, 0x6e, 0x64, 0x54, 0x69,
	0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x49, 0x73, 0x53, 0x69, 0x6c, 0x65, 0x6e, 0x74, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x49, 0x73, 0x53, 0x69, 0x6c, 0x65, 0x6e, 0x74, 0x12, 0x18,
	0x0a, 0x07, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x72, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x07, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x72, 0x12, 0x16, 0x0a, 0x06, 0x52, 0x65, 0x6d, 0x61,
	0x72, 0x6b, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x52, 0x65, 0x6d, 0x61, 0x72, 0x6b,
	0x22, 0x35, 0x0a, 0x1b, 0x47, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x4d, 0x61, 0x6e, 0x61, 0x67,
	0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x44, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x16, 0x0a, 0x06, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x06, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x22, 0x57, 0x0a, 0x1c, 0x47, 0x65, 0x74, 0x55, 0x73,
	0x65, 0x72, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x44, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x37, 0x0a, 0x08, 0x47, 0x72, 0x6f, 0x75, 0x70,
	0x49, 0x44, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x72, 0x65, 0x6c, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x76, 0x31, 0x2e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x44, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x08, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x44, 0x73,
	0x22, 0x96, 0x01, 0x0a, 0x14, 0x55, 0x73, 0x65, 0x72, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x47, 0x72, 0x6f,
	0x75, 0x70, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x47, 0x72, 0x6f, 0x75,
	0x70, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x06, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x10, 0x0a, 0x03, 0x4d,
	0x73, 0x67, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x4d, 0x73, 0x67, 0x12, 0x1c, 0x0a,
	0x09, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x09, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x49,
	0x6e, 0x76, 0x69, 0x74, 0x65, 0x72, 0x49, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09,
	0x49, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x72, 0x49, 0x64, 0x22, 0x6c, 0x0a, 0x20, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x41, 0x6e, 0x64, 0x49, 0x6e, 0x76, 0x69, 0x74,
	0x65, 0x55, 0x73, 0x65, 0x72, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x18, 0x0a,
	0x07, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07,
	0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x55, 0x73, 0x65, 0x72, 0x49,
	0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x55, 0x73, 0x65, 0x72, 0x49, 0x44, 0x12,
	0x16, 0x0a, 0x06, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x52,
	0x06, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x22, 0x52, 0x0a, 0x1c, 0x47, 0x65, 0x74, 0x42, 0x61,
	0x74, 0x63, 0x68, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x47, 0x72, 0x6f, 0x75, 0x70,
	0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49,
	0x64, 0x12, 0x18, 0x0a, 0x07, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x73, 0x18, 0x02, 0x20, 0x03,
	0x28, 0x09, 0x52, 0x07, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x73, 0x22, 0x7e, 0x0a, 0x1d, 0x47,
	0x65, 0x74, 0x42, 0x61, 0x74, 0x63, 0x68, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x65, 0x6c, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x5d, 0x0a, 0x16,
	0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x72,
	0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x47, 0x72,
	0x6f, 0x75, 0x70, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x52, 0x16, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x73, 0x22, 0x2f, 0x0a, 0x2d, 0x44,
	0x65, 0x6c, 0x65, 0x74, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x42, 0x79, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x41, 0x6e, 0x64, 0x55, 0x73,
	0x65, 0x72, 0x49, 0x44, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x3f, 0x0a, 0x21,
	0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x41, 0x6e, 0x64, 0x49, 0x6e,
	0x76, 0x69, 0x74, 0x65, 0x55, 0x73, 0x65, 0x72, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x1a, 0x0a, 0x08, 0x44, 0x69, 0x61, 0x6c, 0x6f, 0x67, 0x49, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x08, 0x44, 0x69, 0x61, 0x6c, 0x6f, 0x67, 0x49, 0x64, 0x2a, 0x4a, 0x0a,
	0x0d, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x12, 0x11,
	0x0a, 0x0d, 0x49, 0x44, 0x45, 0x4e, 0x54, 0x49, 0x54, 0x59, 0x5f, 0x55, 0x53, 0x45, 0x52, 0x10,
	0x00, 0x12, 0x12, 0x0a, 0x0e, 0x49, 0x44, 0x45, 0x4e, 0x54, 0x49, 0x54, 0x59, 0x5f, 0x41, 0x44,
	0x4d, 0x49, 0x4e, 0x10, 0x01, 0x12, 0x12, 0x0a, 0x0e, 0x49, 0x44, 0x45, 0x4e, 0x54, 0x49, 0x54,
	0x59, 0x5f, 0x4f, 0x57, 0x4e, 0x45, 0x52, 0x10, 0x02, 0x32, 0xb8, 0x06, 0x0a, 0x14, 0x47, 0x72,
	0x6f, 0x75, 0x70, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x12, 0x4c, 0x0a, 0x0f, 0x47, 0x65, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x55, 0x73,
	0x65, 0x72, 0x49, 0x44, 0x73, 0x12, 0x1b, 0x2e, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x5f, 0x76, 0x31, 0x2e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x44, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x1c, 0x2e, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x76, 0x31,
	0x2e, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x6b, 0x0a, 0x14, 0x47, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x4d, 0x61, 0x6e, 0x61, 0x67,
	0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x44, 0x12, 0x28, 0x2e, 0x72, 0x65, 0x6c, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x5f, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x4d, 0x61,
	0x6e, 0x61, 0x67, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x44, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x29, 0x2e, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x76, 0x31,
	0x2e, 0x47, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x47, 0x72,
	0x6f, 0x75, 0x70, 0x49, 0x44, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x5f, 0x0a,
	0x10, 0x47, 0x65, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x24, 0x2e, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x76, 0x31, 0x2e,
	0x47, 0x65, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x25, 0x2e, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x5f, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x65,
	0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x6e,
	0x0a, 0x15, 0x47, 0x65, 0x74, 0x42, 0x61, 0x74, 0x63, 0x68, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52,
	0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x29, 0x2e, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x5f, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x42, 0x61, 0x74, 0x63, 0x68, 0x47, 0x72,
	0x6f, 0x75, 0x70, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x2a, 0x2e, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x76, 0x31,
	0x2e, 0x47, 0x65, 0x74, 0x42, 0x61, 0x74, 0x63, 0x68, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x65,
	0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x53,
	0x0a, 0x1c, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x65, 0x6c,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x79, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x12, 0x1b,
	0x2e, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x76, 0x31, 0x2e, 0x47, 0x72, 0x6f,
	0x75, 0x70, 0x49, 0x44, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d,
	0x70, 0x74, 0x79, 0x12, 0x59, 0x0a, 0x22, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x47, 0x72, 0x6f,
	0x75, 0x70, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x79, 0x47, 0x72, 0x6f, 0x75,
	0x70, 0x49, 0x64, 0x52, 0x65, 0x76, 0x65, 0x72, 0x74, 0x12, 0x1b, 0x2e, 0x72, 0x65, 0x6c, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x76, 0x31, 0x2e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x44, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x12, 0x7a,
	0x0a, 0x19, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x41, 0x6e, 0x64,
	0x49, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x55, 0x73, 0x65, 0x72, 0x73, 0x12, 0x2d, 0x2e, 0x72, 0x65,
	0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x47, 0x72, 0x6f, 0x75, 0x70, 0x41, 0x6e, 0x64, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x55, 0x73,
	0x65, 0x72, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2e, 0x2e, 0x72, 0x65, 0x6c,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x47,
	0x72, 0x6f, 0x75, 0x70, 0x41, 0x6e, 0x64, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x55, 0x73, 0x65,
	0x72, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x68, 0x0a, 0x1f, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x41, 0x6e, 0x64, 0x49, 0x6e, 0x76, 0x69,
	0x74, 0x65, 0x55, 0x73, 0x65, 0x72, 0x73, 0x52, 0x65, 0x76, 0x65, 0x72, 0x74, 0x12, 0x2d, 0x2e,
	0x72, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x41, 0x6e, 0x64, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x65,
	0x55, 0x73, 0x65, 0x72, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45,
	0x6d, 0x70, 0x74, 0x79, 0x42, 0x3d, 0x5a, 0x3b, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63,
	0x6f, 0x6d, 0x2f, 0x63, 0x6f, 0x73, 0x73, 0x69, 0x6d, 0x2f, 0x63, 0x6f, 0x73, 0x73, 0x2d, 0x73,
	0x65, 0x72, 0x76, 0x65, 0x72, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x2f, 0x72,
	0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x67, 0x72, 0x70, 0x63,
	0x2f, 0x76, 0x31, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_api_grpc_v1_group_relation_proto_rawDescOnce sync.Once
	file_api_grpc_v1_group_relation_proto_rawDescData = file_api_grpc_v1_group_relation_proto_rawDesc
)

func file_api_grpc_v1_group_relation_proto_rawDescGZIP() []byte {
	file_api_grpc_v1_group_relation_proto_rawDescOnce.Do(func() {
		file_api_grpc_v1_group_relation_proto_rawDescData = protoimpl.X.CompressGZIP(file_api_grpc_v1_group_relation_proto_rawDescData)
	})
	return file_api_grpc_v1_group_relation_proto_rawDescData
}

var file_api_grpc_v1_group_relation_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_api_grpc_v1_group_relation_proto_msgTypes = make([]protoimpl.MessageInfo, 14)
var file_api_grpc_v1_group_relation_proto_goTypes = []interface{}{
	(GroupIdentity)(0),                                    // 0: relation_v1.GroupIdentity
	(*UserGroupRequest)(nil),                              // 1: relation_v1.UserGroupRequest
	(*UserGroupResponse)(nil),                             // 2: relation_v1.UserGroupResponse
	(*GroupIDRequest)(nil),                                // 3: relation_v1.GroupIDRequest
	(*UserIdsResponse)(nil),                               // 4: relation_v1.UserIdsResponse
	(*GetGroupRelationRequest)(nil),                       // 5: relation_v1.GetGroupRelationRequest
	(*GetGroupRelationResponse)(nil),                      // 6: relation_v1.GetGroupRelationResponse
	(*GetUserManageGroupIDRequest)(nil),                   // 7: relation_v1.GetUserManageGroupIDRequest
	(*GetUserManageGroupIDResponse)(nil),                  // 8: relation_v1.GetUserManageGroupIDResponse
	(*UserGroupRequestList)(nil),                          // 9: relation_v1.UserGroupRequestList
	(*CreateGroupAndInviteUsersRequest)(nil),              // 10: relation_v1.CreateGroupAndInviteUsersRequest
	(*GetBatchGroupRelationRequest)(nil),                  // 11: relation_v1.GetBatchGroupRelationRequest
	(*GetBatchGroupRelationResponse)(nil),                 // 12: relation_v1.GetBatchGroupRelationResponse
	(*DeleteGroupRelationByGroupIdAndUserIDResponse)(nil), // 13: relation_v1.DeleteGroupRelationByGroupIdAndUserIDResponse
	(*CreateGroupAndInviteUsersResponse)(nil),             // 14: relation_v1.CreateGroupAndInviteUsersResponse
	(*emptypb.Empty)(nil),                                 // 15: google.protobuf.Empty
}
var file_api_grpc_v1_group_relation_proto_depIdxs = []int32{
	0,  // 0: relation_v1.GetGroupRelationResponse.Identity:type_name -> relation_v1.GroupIdentity
	3,  // 1: relation_v1.GetUserManageGroupIDResponse.GroupIDs:type_name -> relation_v1.GroupIDRequest
	6,  // 2: relation_v1.GetBatchGroupRelationResponse.GroupRelationResponses:type_name -> relation_v1.GetGroupRelationResponse
	3,  // 3: relation_v1.GroupRelationService.GetGroupUserIDs:input_type -> relation_v1.GroupIDRequest
	7,  // 4: relation_v1.GroupRelationService.GetUserManageGroupID:input_type -> relation_v1.GetUserManageGroupIDRequest
	5,  // 5: relation_v1.GroupRelationService.GetGroupRelation:input_type -> relation_v1.GetGroupRelationRequest
	11, // 6: relation_v1.GroupRelationService.GetBatchGroupRelation:input_type -> relation_v1.GetBatchGroupRelationRequest
	3,  // 7: relation_v1.GroupRelationService.DeleteGroupRelationByGroupId:input_type -> relation_v1.GroupIDRequest
	3,  // 8: relation_v1.GroupRelationService.DeleteGroupRelationByGroupIdRevert:input_type -> relation_v1.GroupIDRequest
	10, // 9: relation_v1.GroupRelationService.CreateGroupAndInviteUsers:input_type -> relation_v1.CreateGroupAndInviteUsersRequest
	10, // 10: relation_v1.GroupRelationService.CreateGroupAndInviteUsersRevert:input_type -> relation_v1.CreateGroupAndInviteUsersRequest
	4,  // 11: relation_v1.GroupRelationService.GetGroupUserIDs:output_type -> relation_v1.UserIdsResponse
	8,  // 12: relation_v1.GroupRelationService.GetUserManageGroupID:output_type -> relation_v1.GetUserManageGroupIDResponse
	6,  // 13: relation_v1.GroupRelationService.GetGroupRelation:output_type -> relation_v1.GetGroupRelationResponse
	12, // 14: relation_v1.GroupRelationService.GetBatchGroupRelation:output_type -> relation_v1.GetBatchGroupRelationResponse
	15, // 15: relation_v1.GroupRelationService.DeleteGroupRelationByGroupId:output_type -> google.protobuf.Empty
	15, // 16: relation_v1.GroupRelationService.DeleteGroupRelationByGroupIdRevert:output_type -> google.protobuf.Empty
	14, // 17: relation_v1.GroupRelationService.CreateGroupAndInviteUsers:output_type -> relation_v1.CreateGroupAndInviteUsersResponse
	15, // 18: relation_v1.GroupRelationService.CreateGroupAndInviteUsersRevert:output_type -> google.protobuf.Empty
	11, // [11:19] is the sub-list for method output_type
	3,  // [3:11] is the sub-list for method input_type
	3,  // [3:3] is the sub-list for extension type_name
	3,  // [3:3] is the sub-list for extension extendee
	0,  // [0:3] is the sub-list for field type_name
}

func init() { file_api_grpc_v1_group_relation_proto_init() }
func file_api_grpc_v1_group_relation_proto_init() {
	if File_api_grpc_v1_group_relation_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_api_grpc_v1_group_relation_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserGroupRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_grpc_v1_group_relation_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserGroupResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_grpc_v1_group_relation_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GroupIDRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_grpc_v1_group_relation_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserIdsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_grpc_v1_group_relation_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetGroupRelationRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_grpc_v1_group_relation_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetGroupRelationResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_grpc_v1_group_relation_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetUserManageGroupIDRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_grpc_v1_group_relation_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetUserManageGroupIDResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_grpc_v1_group_relation_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserGroupRequestList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_grpc_v1_group_relation_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateGroupAndInviteUsersRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_grpc_v1_group_relation_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetBatchGroupRelationRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_grpc_v1_group_relation_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetBatchGroupRelationResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_grpc_v1_group_relation_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteGroupRelationByGroupIdAndUserIDResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_grpc_v1_group_relation_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateGroupAndInviteUsersResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_api_grpc_v1_group_relation_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   14,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_api_grpc_v1_group_relation_proto_goTypes,
		DependencyIndexes: file_api_grpc_v1_group_relation_proto_depIdxs,
		EnumInfos:         file_api_grpc_v1_group_relation_proto_enumTypes,
		MessageInfos:      file_api_grpc_v1_group_relation_proto_msgTypes,
	}.Build()
	File_api_grpc_v1_group_relation_proto = out.File
	file_api_grpc_v1_group_relation_proto_rawDesc = nil
	file_api_grpc_v1_group_relation_proto_goTypes = nil
	file_api_grpc_v1_group_relation_proto_depIdxs = nil
}
