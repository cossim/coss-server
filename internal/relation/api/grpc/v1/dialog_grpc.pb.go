// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.25.1
// source: api/grpc/v1/dialog.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	DialogService_GetUserDialogList_FullMethodName                 = "/relation_v1.DialogService/GetUserDialogList"
	DialogService_GetDialogByIds_FullMethodName                    = "/relation_v1.DialogService/GetDialogByIds"
	DialogService_GetDialogById_FullMethodName                     = "/relation_v1.DialogService/GetDialogById"
	DialogService_GetDialogUsersByDialogID_FullMethodName          = "/relation_v1.DialogService/GetDialogUsersByDialogID"
	DialogService_GetDialogUserByDialogIDAndUserID_FullMethodName  = "/relation_v1.DialogService/GetDialogUserByDialogIDAndUserID"
	DialogService_GetDialogByGroupId_FullMethodName                = "/relation_v1.DialogService/GetDialogByGroupId"
	DialogService_DeleteDialogById_FullMethodName                  = "/relation_v1.DialogService/DeleteDialogById"
	DialogService_DeleteDialogByIdRevert_FullMethodName            = "/relation_v1.DialogService/DeleteDialogByIdRevert"
	DialogService_DeleteDialogUsersByDialogID_FullMethodName       = "/relation_v1.DialogService/DeleteDialogUsersByDialogID"
	DialogService_DeleteDialogUsersByDialogIDRevert_FullMethodName = "/relation_v1.DialogService/DeleteDialogUsersByDialogIDRevert"
	DialogService_CloseOrOpenDialog_FullMethodName                 = "/relation_v1.DialogService/CloseOrOpenDialog"
	DialogService_BatchCloseOrOpenDialog_FullMethodName            = "/relation_v1.DialogService/BatchCloseOrOpenDialog"
	DialogService_GetAllUsersInConversation_FullMethodName         = "/relation_v1.DialogService/GetAllUsersInConversation"
)

// DialogServiceClient is the client API for DialogService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type DialogServiceClient interface {
	// 获取用户对话列表
	GetUserDialogList(ctx context.Context, in *GetUserDialogListRequest, opts ...grpc.CallOption) (*GetUserDialogListResponse, error)
	// 根据多个对话ID获取对话信息
	GetDialogByIds(ctx context.Context, in *GetDialogByIdsRequest, opts ...grpc.CallOption) (*GetDialogByIdsResponse, error)
	// 根据对话id获取对话信息
	GetDialogById(ctx context.Context, in *GetDialogByIdRequest, opts ...grpc.CallOption) (*Dialog, error)
	// 根据对话ID获取对话成员列表
	GetDialogUsersByDialogID(ctx context.Context, in *GetDialogUsersByDialogIDRequest, opts ...grpc.CallOption) (*GetDialogUsersByDialogIDResponse, error)
	// 根据对话ID和用户ID获取对话成员信息
	GetDialogUserByDialogIDAndUserID(ctx context.Context, in *GetDialogUserByDialogIDAndUserIdRequest, opts ...grpc.CallOption) (*GetDialogUserByDialogIDAndUserIdResponse, error)
	// 根据群组ID获取对话信息
	GetDialogByGroupId(ctx context.Context, in *GetDialogByGroupIdRequest, opts ...grpc.CallOption) (*GetDialogByGroupIdResponse, error)
	// 根据对话ID删除对话
	DeleteDialogById(ctx context.Context, in *DeleteDialogByIdRequest, opts ...grpc.CallOption) (*DeleteDialogByIdResponse, error)
	// DeleteDialogById回滚操作
	DeleteDialogByIdRevert(ctx context.Context, in *DeleteDialogByIdRequest, opts ...grpc.CallOption) (*DeleteDialogByIdResponse, error)
	// 根据对话ID删除对话成员
	DeleteDialogUsersByDialogID(ctx context.Context, in *DeleteDialogUsersByDialogIDRequest, opts ...grpc.CallOption) (*DeleteDialogUsersByDialogIDResponse, error)
	// DeleteDialogUsersByDialogID回滚操作
	DeleteDialogUsersByDialogIDRevert(ctx context.Context, in *DeleteDialogUsersByDialogIDRequest, opts ...grpc.CallOption) (*DeleteDialogUsersByDialogIDResponse, error)
	// 关闭或者打开对话
	CloseOrOpenDialog(ctx context.Context, in *CloseOrOpenDialogRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// 批量打开或关闭对话
	BatchCloseOrOpenDialog(ctx context.Context, in *BatchCloseOrOpenDialogRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// 获取对话用户（包括已退出对话）
	GetAllUsersInConversation(ctx context.Context, in *GetAllUsersInConversationRequest, opts ...grpc.CallOption) (*GetAllUsersInConversationResponse, error)
}

type dialogServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewDialogServiceClient(cc grpc.ClientConnInterface) DialogServiceClient {
	return &dialogServiceClient{cc}
}

func (c *dialogServiceClient) GetUserDialogList(ctx context.Context, in *GetUserDialogListRequest, opts ...grpc.CallOption) (*GetUserDialogListResponse, error) {
	out := new(GetUserDialogListResponse)
	err := c.cc.Invoke(ctx, DialogService_GetUserDialogList_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dialogServiceClient) GetDialogByIds(ctx context.Context, in *GetDialogByIdsRequest, opts ...grpc.CallOption) (*GetDialogByIdsResponse, error) {
	out := new(GetDialogByIdsResponse)
	err := c.cc.Invoke(ctx, DialogService_GetDialogByIds_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dialogServiceClient) GetDialogById(ctx context.Context, in *GetDialogByIdRequest, opts ...grpc.CallOption) (*Dialog, error) {
	out := new(Dialog)
	err := c.cc.Invoke(ctx, DialogService_GetDialogById_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dialogServiceClient) GetDialogUsersByDialogID(ctx context.Context, in *GetDialogUsersByDialogIDRequest, opts ...grpc.CallOption) (*GetDialogUsersByDialogIDResponse, error) {
	out := new(GetDialogUsersByDialogIDResponse)
	err := c.cc.Invoke(ctx, DialogService_GetDialogUsersByDialogID_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dialogServiceClient) GetDialogUserByDialogIDAndUserID(ctx context.Context, in *GetDialogUserByDialogIDAndUserIdRequest, opts ...grpc.CallOption) (*GetDialogUserByDialogIDAndUserIdResponse, error) {
	out := new(GetDialogUserByDialogIDAndUserIdResponse)
	err := c.cc.Invoke(ctx, DialogService_GetDialogUserByDialogIDAndUserID_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dialogServiceClient) GetDialogByGroupId(ctx context.Context, in *GetDialogByGroupIdRequest, opts ...grpc.CallOption) (*GetDialogByGroupIdResponse, error) {
	out := new(GetDialogByGroupIdResponse)
	err := c.cc.Invoke(ctx, DialogService_GetDialogByGroupId_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dialogServiceClient) DeleteDialogById(ctx context.Context, in *DeleteDialogByIdRequest, opts ...grpc.CallOption) (*DeleteDialogByIdResponse, error) {
	out := new(DeleteDialogByIdResponse)
	err := c.cc.Invoke(ctx, DialogService_DeleteDialogById_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dialogServiceClient) DeleteDialogByIdRevert(ctx context.Context, in *DeleteDialogByIdRequest, opts ...grpc.CallOption) (*DeleteDialogByIdResponse, error) {
	out := new(DeleteDialogByIdResponse)
	err := c.cc.Invoke(ctx, DialogService_DeleteDialogByIdRevert_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dialogServiceClient) DeleteDialogUsersByDialogID(ctx context.Context, in *DeleteDialogUsersByDialogIDRequest, opts ...grpc.CallOption) (*DeleteDialogUsersByDialogIDResponse, error) {
	out := new(DeleteDialogUsersByDialogIDResponse)
	err := c.cc.Invoke(ctx, DialogService_DeleteDialogUsersByDialogID_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dialogServiceClient) DeleteDialogUsersByDialogIDRevert(ctx context.Context, in *DeleteDialogUsersByDialogIDRequest, opts ...grpc.CallOption) (*DeleteDialogUsersByDialogIDResponse, error) {
	out := new(DeleteDialogUsersByDialogIDResponse)
	err := c.cc.Invoke(ctx, DialogService_DeleteDialogUsersByDialogIDRevert_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dialogServiceClient) CloseOrOpenDialog(ctx context.Context, in *CloseOrOpenDialogRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, DialogService_CloseOrOpenDialog_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dialogServiceClient) BatchCloseOrOpenDialog(ctx context.Context, in *BatchCloseOrOpenDialogRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, DialogService_BatchCloseOrOpenDialog_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dialogServiceClient) GetAllUsersInConversation(ctx context.Context, in *GetAllUsersInConversationRequest, opts ...grpc.CallOption) (*GetAllUsersInConversationResponse, error) {
	out := new(GetAllUsersInConversationResponse)
	err := c.cc.Invoke(ctx, DialogService_GetAllUsersInConversation_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DialogServiceServer is the server API for DialogService service.
// All implementations should embed UnimplementedDialogServiceServer
// for forward compatibility
type DialogServiceServer interface {
	// 获取用户对话列表
	GetUserDialogList(context.Context, *GetUserDialogListRequest) (*GetUserDialogListResponse, error)
	// 根据多个对话ID获取对话信息
	GetDialogByIds(context.Context, *GetDialogByIdsRequest) (*GetDialogByIdsResponse, error)
	// 根据对话id获取对话信息
	GetDialogById(context.Context, *GetDialogByIdRequest) (*Dialog, error)
	// 根据对话ID获取对话成员列表
	GetDialogUsersByDialogID(context.Context, *GetDialogUsersByDialogIDRequest) (*GetDialogUsersByDialogIDResponse, error)
	// 根据对话ID和用户ID获取对话成员信息
	GetDialogUserByDialogIDAndUserID(context.Context, *GetDialogUserByDialogIDAndUserIdRequest) (*GetDialogUserByDialogIDAndUserIdResponse, error)
	// 根据群组ID获取对话信息
	GetDialogByGroupId(context.Context, *GetDialogByGroupIdRequest) (*GetDialogByGroupIdResponse, error)
	// 根据对话ID删除对话
	DeleteDialogById(context.Context, *DeleteDialogByIdRequest) (*DeleteDialogByIdResponse, error)
	// DeleteDialogById回滚操作
	DeleteDialogByIdRevert(context.Context, *DeleteDialogByIdRequest) (*DeleteDialogByIdResponse, error)
	// 根据对话ID删除对话成员
	DeleteDialogUsersByDialogID(context.Context, *DeleteDialogUsersByDialogIDRequest) (*DeleteDialogUsersByDialogIDResponse, error)
	// DeleteDialogUsersByDialogID回滚操作
	DeleteDialogUsersByDialogIDRevert(context.Context, *DeleteDialogUsersByDialogIDRequest) (*DeleteDialogUsersByDialogIDResponse, error)
	// 关闭或者打开对话
	CloseOrOpenDialog(context.Context, *CloseOrOpenDialogRequest) (*emptypb.Empty, error)
	// 批量打开或关闭对话
	BatchCloseOrOpenDialog(context.Context, *BatchCloseOrOpenDialogRequest) (*emptypb.Empty, error)
	// 获取对话用户（包括已退出对话）
	GetAllUsersInConversation(context.Context, *GetAllUsersInConversationRequest) (*GetAllUsersInConversationResponse, error)
}

// UnimplementedDialogServiceServer should be embedded to have forward compatible implementations.
type UnimplementedDialogServiceServer struct {
}

func (UnimplementedDialogServiceServer) GetUserDialogList(context.Context, *GetUserDialogListRequest) (*GetUserDialogListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserDialogList not implemented")
}
func (UnimplementedDialogServiceServer) GetDialogByIds(context.Context, *GetDialogByIdsRequest) (*GetDialogByIdsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDialogByIds not implemented")
}
func (UnimplementedDialogServiceServer) GetDialogById(context.Context, *GetDialogByIdRequest) (*Dialog, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDialogById not implemented")
}
func (UnimplementedDialogServiceServer) GetDialogUsersByDialogID(context.Context, *GetDialogUsersByDialogIDRequest) (*GetDialogUsersByDialogIDResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDialogUsersByDialogID not implemented")
}
func (UnimplementedDialogServiceServer) GetDialogUserByDialogIDAndUserID(context.Context, *GetDialogUserByDialogIDAndUserIdRequest) (*GetDialogUserByDialogIDAndUserIdResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDialogUserByDialogIDAndUserID not implemented")
}
func (UnimplementedDialogServiceServer) GetDialogByGroupId(context.Context, *GetDialogByGroupIdRequest) (*GetDialogByGroupIdResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDialogByGroupId not implemented")
}
func (UnimplementedDialogServiceServer) DeleteDialogById(context.Context, *DeleteDialogByIdRequest) (*DeleteDialogByIdResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteDialogById not implemented")
}
func (UnimplementedDialogServiceServer) DeleteDialogByIdRevert(context.Context, *DeleteDialogByIdRequest) (*DeleteDialogByIdResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteDialogByIdRevert not implemented")
}
func (UnimplementedDialogServiceServer) DeleteDialogUsersByDialogID(context.Context, *DeleteDialogUsersByDialogIDRequest) (*DeleteDialogUsersByDialogIDResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteDialogUsersByDialogID not implemented")
}
func (UnimplementedDialogServiceServer) DeleteDialogUsersByDialogIDRevert(context.Context, *DeleteDialogUsersByDialogIDRequest) (*DeleteDialogUsersByDialogIDResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteDialogUsersByDialogIDRevert not implemented")
}
func (UnimplementedDialogServiceServer) CloseOrOpenDialog(context.Context, *CloseOrOpenDialogRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CloseOrOpenDialog not implemented")
}
func (UnimplementedDialogServiceServer) BatchCloseOrOpenDialog(context.Context, *BatchCloseOrOpenDialogRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BatchCloseOrOpenDialog not implemented")
}
func (UnimplementedDialogServiceServer) GetAllUsersInConversation(context.Context, *GetAllUsersInConversationRequest) (*GetAllUsersInConversationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllUsersInConversation not implemented")
}

// UnsafeDialogServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to DialogServiceServer will
// result in compilation errors.
type UnsafeDialogServiceServer interface {
	mustEmbedUnimplementedDialogServiceServer()
}

func RegisterDialogServiceServer(s grpc.ServiceRegistrar, srv DialogServiceServer) {
	s.RegisterService(&DialogService_ServiceDesc, srv)
}

func _DialogService_GetUserDialogList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUserDialogListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DialogServiceServer).GetUserDialogList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DialogService_GetUserDialogList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DialogServiceServer).GetUserDialogList(ctx, req.(*GetUserDialogListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DialogService_GetDialogByIds_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetDialogByIdsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DialogServiceServer).GetDialogByIds(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DialogService_GetDialogByIds_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DialogServiceServer).GetDialogByIds(ctx, req.(*GetDialogByIdsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DialogService_GetDialogById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetDialogByIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DialogServiceServer).GetDialogById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DialogService_GetDialogById_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DialogServiceServer).GetDialogById(ctx, req.(*GetDialogByIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DialogService_GetDialogUsersByDialogID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetDialogUsersByDialogIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DialogServiceServer).GetDialogUsersByDialogID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DialogService_GetDialogUsersByDialogID_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DialogServiceServer).GetDialogUsersByDialogID(ctx, req.(*GetDialogUsersByDialogIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DialogService_GetDialogUserByDialogIDAndUserID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetDialogUserByDialogIDAndUserIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DialogServiceServer).GetDialogUserByDialogIDAndUserID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DialogService_GetDialogUserByDialogIDAndUserID_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DialogServiceServer).GetDialogUserByDialogIDAndUserID(ctx, req.(*GetDialogUserByDialogIDAndUserIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DialogService_GetDialogByGroupId_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetDialogByGroupIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DialogServiceServer).GetDialogByGroupId(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DialogService_GetDialogByGroupId_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DialogServiceServer).GetDialogByGroupId(ctx, req.(*GetDialogByGroupIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DialogService_DeleteDialogById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteDialogByIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DialogServiceServer).DeleteDialogById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DialogService_DeleteDialogById_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DialogServiceServer).DeleteDialogById(ctx, req.(*DeleteDialogByIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DialogService_DeleteDialogByIdRevert_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteDialogByIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DialogServiceServer).DeleteDialogByIdRevert(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DialogService_DeleteDialogByIdRevert_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DialogServiceServer).DeleteDialogByIdRevert(ctx, req.(*DeleteDialogByIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DialogService_DeleteDialogUsersByDialogID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteDialogUsersByDialogIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DialogServiceServer).DeleteDialogUsersByDialogID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DialogService_DeleteDialogUsersByDialogID_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DialogServiceServer).DeleteDialogUsersByDialogID(ctx, req.(*DeleteDialogUsersByDialogIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DialogService_DeleteDialogUsersByDialogIDRevert_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteDialogUsersByDialogIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DialogServiceServer).DeleteDialogUsersByDialogIDRevert(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DialogService_DeleteDialogUsersByDialogIDRevert_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DialogServiceServer).DeleteDialogUsersByDialogIDRevert(ctx, req.(*DeleteDialogUsersByDialogIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DialogService_CloseOrOpenDialog_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CloseOrOpenDialogRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DialogServiceServer).CloseOrOpenDialog(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DialogService_CloseOrOpenDialog_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DialogServiceServer).CloseOrOpenDialog(ctx, req.(*CloseOrOpenDialogRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DialogService_BatchCloseOrOpenDialog_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BatchCloseOrOpenDialogRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DialogServiceServer).BatchCloseOrOpenDialog(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DialogService_BatchCloseOrOpenDialog_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DialogServiceServer).BatchCloseOrOpenDialog(ctx, req.(*BatchCloseOrOpenDialogRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DialogService_GetAllUsersInConversation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAllUsersInConversationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DialogServiceServer).GetAllUsersInConversation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DialogService_GetAllUsersInConversation_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DialogServiceServer).GetAllUsersInConversation(ctx, req.(*GetAllUsersInConversationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// DialogService_ServiceDesc is the grpc.ServiceDesc for DialogService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var DialogService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "relation_v1.DialogService",
	HandlerType: (*DialogServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetUserDialogList",
			Handler:    _DialogService_GetUserDialogList_Handler,
		},
		{
			MethodName: "GetDialogByIds",
			Handler:    _DialogService_GetDialogByIds_Handler,
		},
		{
			MethodName: "GetDialogById",
			Handler:    _DialogService_GetDialogById_Handler,
		},
		{
			MethodName: "GetDialogUsersByDialogID",
			Handler:    _DialogService_GetDialogUsersByDialogID_Handler,
		},
		{
			MethodName: "GetDialogUserByDialogIDAndUserID",
			Handler:    _DialogService_GetDialogUserByDialogIDAndUserID_Handler,
		},
		{
			MethodName: "GetDialogByGroupId",
			Handler:    _DialogService_GetDialogByGroupId_Handler,
		},
		{
			MethodName: "DeleteDialogById",
			Handler:    _DialogService_DeleteDialogById_Handler,
		},
		{
			MethodName: "DeleteDialogByIdRevert",
			Handler:    _DialogService_DeleteDialogByIdRevert_Handler,
		},
		{
			MethodName: "DeleteDialogUsersByDialogID",
			Handler:    _DialogService_DeleteDialogUsersByDialogID_Handler,
		},
		{
			MethodName: "DeleteDialogUsersByDialogIDRevert",
			Handler:    _DialogService_DeleteDialogUsersByDialogIDRevert_Handler,
		},
		{
			MethodName: "CloseOrOpenDialog",
			Handler:    _DialogService_CloseOrOpenDialog_Handler,
		},
		{
			MethodName: "BatchCloseOrOpenDialog",
			Handler:    _DialogService_BatchCloseOrOpenDialog_Handler,
		},
		{
			MethodName: "GetAllUsersInConversation",
			Handler:    _DialogService_GetAllUsersInConversation_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/grpc/v1/dialog.proto",
}
