syntax = "proto3";
package relation_v1;
option go_package = "github.com/cossim/coss-server/internal/relation/api/grpc/v1";
import "google/protobuf/empty.proto";

message UserGroupRequest {
  // @inject_tag: json:"user_id"
  string UserId = 1;
  // @inject_tag: json:"group_id"
  uint32 GroupId = 2;
//  // @inject_tag: json:"relation_status"
//  uint32 RelationStatus = 4;
}

message UserGroupResponse {
}

message GroupIDRequest {
  // @inject_tag: json:"group_id"
  uint32 GroupId = 1;
}

message UserIdsResponse {
  // @inject_tag: json:"user_ids"
  repeated string UserIds = 1;
}


message RemoveFromGroupRequest {
  // @inject_tag: json:"group_id"
  uint32 GroupId = 1;     // 群聊id
  // @inject_tag: json:"user_id"
  string UserId = 2;     // 移除的用户id
}

message RemoveFromGroupResponse {
}

message LeaveGroupRequest {
  // @inject_tag: json:"group_id"
  uint32 GroupId = 1;   // 群聊id
  // @inject_tag: json:"user_id"
  string UserId = 2;    // 拒绝的用户id
}

message LeaveGroupResponse {
}


message GetGroupRelationRequest {
  // @inject_tag: json:"group_id"
  uint32 GroupId = 1;     // 群聊id
  // @inject_tag: json:"user_id"
  string UserId = 2;     // 用户id
}

message GetGroupRelationResponse {
  // @inject_tag: json:"group_id"
  uint32 GroupId = 1; // 群聊ID
  // @inject_tag: json:"user_id"
  string UserId = 2;  // 用户ID
//  // @inject_tag: json:"status"
//  GroupRelationStatus Status = 3; //状态
  // @inject_tag: json:"identity"
  GroupIdentity Identity = 4;  // 群聊身份
  // @inject_tag: json:"join_method"
  uint32 JoinMethod = 5; // 加入方式
  // @inject_tag: json:"join_time"
  int64 JoinTime = 6; //加入时间
  //  @inject_tag: json:"mute_end_time"
  int64 MuteEndTime = 7; //禁言结束时间
  // @inject_tag: json:"is_silent"
  GroupSilentNotificationType IsSilent = 8; //是否静默通知
  // @inject_tag: json:"inviter"
  string Inviter = 9; //邀请人
  // @inject_tag: json:"remark"
  string Remark = 11; //群聊备注
  // @inject_tag: json:"open_burn_after_reading"
  OpenBurnAfterReadingType  OpenBurnAfterReading = 12;
  // @inject_tag: json:"open_burn_after_reading_time_out"
  int64 OpenBurnAfterReadingTimeOut = 13;
}

enum OpenBurnAfterReadingType {
  CLOSE_BURN_AFTER_READING = 0; // 关闭
  OPEN_BURN_AFTER_READING = 1; // 开启
}
// 添加 GroupIdentity 枚举定义
enum GroupIdentity {
  IDENTITY_USER = 0;  // 普通用户
  IDENTITY_ADMIN = 1; // 管理员
  IDENTITY_OWNER = 2; // 群主
}

//enum GroupRelationStatus {
//    GroupStatusApplying  = 0; // 申请
//    GroupStatusPending   = 1; // 待通过
//    GroupStatusJoined    = 2; // 加入
//    GroupStatusDeleted   = 3; // 已删除
//    GroupStatusReject    = 4; // 拒绝
//    GroupStatusBlocked   = 5; // 被封禁
//}


message GetUserManageGroupIDRequest {
  // @inject_tag: json:"user_id"
  string UserId = 1;
}

message GetUserManageGroupIDResponse {
  repeated GroupIDRequest GroupIDs = 1;
}

message GetUserGroupIDsRequest {
  // @inject_tag: json:"user_id"
  string UserId = 1;  // 用户ID
}

message GetUserGroupIDsResponse {
  // @inject_tag: json:"group_id"
  repeated  uint32 GroupId = 1; // 群聊ID
}

message GetUserGroupListRequest {
  // @inject_tag: json:"user_id"
  string UserId = 1;
}

message GetUserGroupListResponse {
  repeated UserGroupRequestList UserGroupRequestList = 1;
}

message UserGroupRequestList {
  // @inject_tag: json:"group_id"
  uint32 GroupId = 1;   // 群聊id
  // @inject_tag: json:"user_id"
  string UserId = 2;    // 用户id
  // @inject_tag: json:"msg"
  string Msg = 3;       // 申请信息
//  // @inject_tag: json:"status"
//  GroupRelationStatus Status = 4;
  // @inject_tag: json:"created_at"
  int64 CreatedAt = 5;
  // @inject_tag: json:"inviter_id"
  string InviterId = 6;       // 邀请人id
}

message DeleteGroupRelationByGroupIdAndUserIDRequest {
  // @inject_tag: json:"group_id"
  uint32 GroupID = 1; // 群聊ID
  // @inject_tag: json:"user_id"
  string UserID = 2;  // 用户ID
//  // @inject_tag: json:"status"
//  GroupRelationStatus Status = 3;
}

message DeleteGroupRelationByGroupIdAndUserIDRevertRequest {
  // @inject_tag: json:"group_id"
  uint32 GroupID = 1; // 群聊ID
  // @inject_tag: json:"user_id"
  string UserID = 2;  // 用户ID
//  // @inject_tag: json:"status"
//  GroupRelationStatus Status = 3;
}

message CreateGroupAndInviteUsersRequest {
  // @inject_tag: json:"group_id"
  uint32 GroupId = 1; // 群聊id
  // @inject_tag: json:"user_id"
  string UserID = 2;  // 用户ID
  // @inject_tag: json:"member"
  repeated string Member = 3;  // 邀请的好友
}

message GetBatchGroupRelationRequest {
  // @inject_tag: json:"group_id"
  uint32 GroupId = 1;         // 群聊id
  // @inject_tag: json:"user_id"
  repeated string UserIds = 2; // 用户id列表
}

message GetBatchGroupRelationResponse {
  repeated GetGroupRelationResponse GroupRelationResponses = 1;
}

message DeleteGroupRelationByGroupIdAndUserIDResponse {}


enum GroupSilentNotificationType {
  // @inject_tag: json:"not_silent"
  GroupNotSilent = 0;
  // @inject_tag: json:"silent"
  GroupSilent = 1;
}

message SetGroupSilentNotificationRequest{
  // @inject_tag: json:"user_id"
  string UserId = 1;
  // @inject_tag: json:"group_id"
  uint32 GroupId = 2;
  // @inject_tag: json:"is_silent"
  bool IsSilent = 3;
}

message CreateGroupAndInviteUsersResponse {
  // @inject_tag: json:"dialog_id"
  uint32 DialogId = 1;
}

message RemoveGroupRelationByGroupIdAndUserIDsRequest{
  // @inject_tag: json:"group_id"
  uint32 GroupId = 1;
  // @inject_tag: json:"user_id"
  repeated string UserIDs = 2;
}

message SetGroupOpenBurnAfterReadingRequest {
  // @inject_tag: json:"user_id"
  string UserId = 1;
  // @inject_tag: json:"group_id"
  uint32 GroupId = 2;
  // @inject_tag: json:"open_burn_after_reading"
  OpenBurnAfterReadingType  OpenBurnAfterReading = 3;
}

message SetGroupOpenBurnAfterReadingTimeOutRequest{
  // @inject_tag: json:"user_id"
  string UserId = 1;
  // @inject_tag: json:"group_id"
  uint32 GroupId = 2;
  // @inject_tag: json:"open_burn_after_reading_time_out"
  int64 OpenBurnAfterReadingTimeOut = 3;
}

message SetGroupUserRemarkRequest{
  // @inject_tag: json:"user_id"
  string UserId = 1;
  // @inject_tag: json:"group_id"
  uint32 GroupId = 2;
  // @inject_tag: json:"remark"
  string Remark = 3;
}

message AddGroupAdminRequest {
  // @inject_tag: json:"group_id"
  uint32 GroupID = 1;
  string UserID = 2;
  // @inject_tag: json:"user_ids"
  repeated string UserIDs = 3;
}

message AddGroupAdminResponse {

}

service GroupRelationService {
  // 获取群聊成员ID列表
  rpc GetGroupUserIDs(GroupIDRequest) returns (UserIdsResponse);

  // 获取用户的所有群聊ID列表
  rpc GetUserGroupIDs(GetUserGroupIDsRequest) returns (GetUserGroupIDsResponse);

  // 获取用户的所有群聊列表信息
  rpc GetUserGroupList(GetUserGroupListRequest) returns (GetUserGroupListResponse);

  // 获取群聊管理员ID列表
  rpc GetGroupAdminIds(GroupIDRequest) returns (UserIdsResponse);

  // 获取用户管理的群聊ID列表
  rpc GetUserManageGroupID(GetUserManageGroupIDRequest) returns (GetUserManageGroupIDResponse);

  // 从群聊中移除成员
  rpc RemoveFromGroup (RemoveFromGroupRequest) returns (RemoveFromGroupResponse);

  // 退出群聊
  rpc LeaveGroup (LeaveGroupRequest) returns (LeaveGroupResponse);

  // 退出群聊回滚操作
  rpc LeaveGroupRevert(LeaveGroupRequest) returns (LeaveGroupResponse);

  // 获取用户与群聊关系信息
  rpc GetGroupRelation (GetGroupRelationRequest) returns (GetGroupRelationResponse);

  // 批量获取用户与群聊关系信息
  rpc GetBatchGroupRelation (GetBatchGroupRelationRequest) returns (GetBatchGroupRelationResponse);

  // 根据群聊ID删除群聊的所有关系
  rpc DeleteGroupRelationByGroupId(GroupIDRequest) returns (google.protobuf.Empty);

  // DeleteGroupRelationByGroupId回滚操作
  rpc DeleteGroupRelationByGroupIdRevert(GroupIDRequest) returns (google.protobuf.Empty);

  // 根据群聊ID和用户ID删除用户的群聊关系
  rpc DeleteGroupRelationByGroupIdAndUserID(DeleteGroupRelationByGroupIdAndUserIDRequest) returns (google.protobuf.Empty);

  // DeleteGroupRelationByGroupIdAndUserID回滚操作
  rpc DeleteGroupRelationByGroupIdAndUserIDRevert(DeleteGroupRelationByGroupIdAndUserIDRequest) returns (google.protobuf.Empty);

  // 创建群聊并邀请多个用户进群（包括自己）
  rpc CreateGroupAndInviteUsers(CreateGroupAndInviteUsersRequest) returns (CreateGroupAndInviteUsersResponse);

  // CreateGroupAndInviteUsers 回滚操作
  rpc CreateGroupAndInviteUsersRevert(CreateGroupAndInviteUsersRequest) returns (google.protobuf.Empty);

  // 设置群聊为静默通知状态
  rpc SetGroupSilentNotification(SetGroupSilentNotificationRequest) returns (google.protobuf.Empty);

  //移除多个用户
  rpc RemoveGroupRelationByGroupIdAndUserIDs(RemoveGroupRelationByGroupIdAndUserIDsRequest) returns (google.protobuf.Empty);

  // 设置阅后即焚开关
  rpc SetGroupOpenBurnAfterReading(SetGroupOpenBurnAfterReadingRequest) returns (google.protobuf.Empty);

  // 设置阅后即焚超时时间
  rpc SetGroupOpenBurnAfterReadingTimeOut(SetGroupOpenBurnAfterReadingTimeOutRequest) returns (google.protobuf.Empty);

  //设置群聊用户备注
  rpc SetGroupUserRemark(SetGroupUserRemarkRequest) returns (google.protobuf.Empty);

  // 添加群聊管理员
  rpc AddGroupAdmin(AddGroupAdminRequest) returns (AddGroupAdminResponse);
}
