// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.25.1
// source: api/grpc/v1/group_announcement.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	GroupAnnouncementService_CreateGroupAnnouncement_FullMethodName     = "/relation_v1.GroupAnnouncementService/CreateGroupAnnouncement"
	GroupAnnouncementService_GetGroupAnnouncementList_FullMethodName    = "/relation_v1.GroupAnnouncementService/GetGroupAnnouncementList"
	GroupAnnouncementService_GetGroupAnnouncement_FullMethodName        = "/relation_v1.GroupAnnouncementService/GetGroupAnnouncement"
	GroupAnnouncementService_UpdateGroupAnnouncement_FullMethodName     = "/relation_v1.GroupAnnouncementService/UpdateGroupAnnouncement"
	GroupAnnouncementService_DeleteGroupAnnouncement_FullMethodName     = "/relation_v1.GroupAnnouncementService/DeleteGroupAnnouncement"
	GroupAnnouncementService_MarkAnnouncementAsRead_FullMethodName      = "/relation_v1.GroupAnnouncementService/MarkAnnouncementAsRead"
	GroupAnnouncementService_GetReadUsers_FullMethodName                = "/relation_v1.GroupAnnouncementService/GetReadUsers"
	GroupAnnouncementService_GetAnnouncementReadByUserId_FullMethodName = "/relation_v1.GroupAnnouncementService/GetAnnouncementReadByUserId"
)

// GroupAnnouncementServiceClient is the client API for GroupAnnouncementService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type GroupAnnouncementServiceClient interface {
	CreateGroupAnnouncement(ctx context.Context, in *CreateGroupAnnouncementRequest, opts ...grpc.CallOption) (*CreateGroupAnnouncementResponse, error)
	GetGroupAnnouncementList(ctx context.Context, in *GetGroupAnnouncementListRequest, opts ...grpc.CallOption) (*GetGroupAnnouncementListResponse, error)
	GetGroupAnnouncement(ctx context.Context, in *GetGroupAnnouncementRequest, opts ...grpc.CallOption) (*GetGroupAnnouncementResponse, error)
	UpdateGroupAnnouncement(ctx context.Context, in *UpdateGroupAnnouncementRequest, opts ...grpc.CallOption) (*UpdateGroupAnnouncementResponse, error)
	DeleteGroupAnnouncement(ctx context.Context, in *DeleteGroupAnnouncementRequest, opts ...grpc.CallOption) (*DeleteGroupAnnouncementResponse, error)
	MarkAnnouncementAsRead(ctx context.Context, in *MarkAnnouncementAsReadRequest, opts ...grpc.CallOption) (*MarkAnnouncementAsReadResponse, error)
	GetReadUsers(ctx context.Context, in *GetReadUsersRequest, opts ...grpc.CallOption) (*GetReadUsersResponse, error)
	GetAnnouncementReadByUserId(ctx context.Context, in *GetAnnouncementReadByUserIdRequest, opts ...grpc.CallOption) (*GetAnnouncementReadByUserIdResponse, error)
}

type groupAnnouncementServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewGroupAnnouncementServiceClient(cc grpc.ClientConnInterface) GroupAnnouncementServiceClient {
	return &groupAnnouncementServiceClient{cc}
}

func (c *groupAnnouncementServiceClient) CreateGroupAnnouncement(ctx context.Context, in *CreateGroupAnnouncementRequest, opts ...grpc.CallOption) (*CreateGroupAnnouncementResponse, error) {
	out := new(CreateGroupAnnouncementResponse)
	err := c.cc.Invoke(ctx, GroupAnnouncementService_CreateGroupAnnouncement_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *groupAnnouncementServiceClient) GetGroupAnnouncementList(ctx context.Context, in *GetGroupAnnouncementListRequest, opts ...grpc.CallOption) (*GetGroupAnnouncementListResponse, error) {
	out := new(GetGroupAnnouncementListResponse)
	err := c.cc.Invoke(ctx, GroupAnnouncementService_GetGroupAnnouncementList_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *groupAnnouncementServiceClient) GetGroupAnnouncement(ctx context.Context, in *GetGroupAnnouncementRequest, opts ...grpc.CallOption) (*GetGroupAnnouncementResponse, error) {
	out := new(GetGroupAnnouncementResponse)
	err := c.cc.Invoke(ctx, GroupAnnouncementService_GetGroupAnnouncement_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *groupAnnouncementServiceClient) UpdateGroupAnnouncement(ctx context.Context, in *UpdateGroupAnnouncementRequest, opts ...grpc.CallOption) (*UpdateGroupAnnouncementResponse, error) {
	out := new(UpdateGroupAnnouncementResponse)
	err := c.cc.Invoke(ctx, GroupAnnouncementService_UpdateGroupAnnouncement_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *groupAnnouncementServiceClient) DeleteGroupAnnouncement(ctx context.Context, in *DeleteGroupAnnouncementRequest, opts ...grpc.CallOption) (*DeleteGroupAnnouncementResponse, error) {
	out := new(DeleteGroupAnnouncementResponse)
	err := c.cc.Invoke(ctx, GroupAnnouncementService_DeleteGroupAnnouncement_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *groupAnnouncementServiceClient) MarkAnnouncementAsRead(ctx context.Context, in *MarkAnnouncementAsReadRequest, opts ...grpc.CallOption) (*MarkAnnouncementAsReadResponse, error) {
	out := new(MarkAnnouncementAsReadResponse)
	err := c.cc.Invoke(ctx, GroupAnnouncementService_MarkAnnouncementAsRead_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *groupAnnouncementServiceClient) GetReadUsers(ctx context.Context, in *GetReadUsersRequest, opts ...grpc.CallOption) (*GetReadUsersResponse, error) {
	out := new(GetReadUsersResponse)
	err := c.cc.Invoke(ctx, GroupAnnouncementService_GetReadUsers_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *groupAnnouncementServiceClient) GetAnnouncementReadByUserId(ctx context.Context, in *GetAnnouncementReadByUserIdRequest, opts ...grpc.CallOption) (*GetAnnouncementReadByUserIdResponse, error) {
	out := new(GetAnnouncementReadByUserIdResponse)
	err := c.cc.Invoke(ctx, GroupAnnouncementService_GetAnnouncementReadByUserId_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// GroupAnnouncementServiceServer is the server API for GroupAnnouncementService service.
// All implementations should embed UnimplementedGroupAnnouncementServiceServer
// for forward compatibility
type GroupAnnouncementServiceServer interface {
	CreateGroupAnnouncement(context.Context, *CreateGroupAnnouncementRequest) (*CreateGroupAnnouncementResponse, error)
	GetGroupAnnouncementList(context.Context, *GetGroupAnnouncementListRequest) (*GetGroupAnnouncementListResponse, error)
	GetGroupAnnouncement(context.Context, *GetGroupAnnouncementRequest) (*GetGroupAnnouncementResponse, error)
	UpdateGroupAnnouncement(context.Context, *UpdateGroupAnnouncementRequest) (*UpdateGroupAnnouncementResponse, error)
	DeleteGroupAnnouncement(context.Context, *DeleteGroupAnnouncementRequest) (*DeleteGroupAnnouncementResponse, error)
	MarkAnnouncementAsRead(context.Context, *MarkAnnouncementAsReadRequest) (*MarkAnnouncementAsReadResponse, error)
	GetReadUsers(context.Context, *GetReadUsersRequest) (*GetReadUsersResponse, error)
	GetAnnouncementReadByUserId(context.Context, *GetAnnouncementReadByUserIdRequest) (*GetAnnouncementReadByUserIdResponse, error)
}

// UnimplementedGroupAnnouncementServiceServer should be embedded to have forward compatible implementations.
type UnimplementedGroupAnnouncementServiceServer struct {
}

func (UnimplementedGroupAnnouncementServiceServer) CreateGroupAnnouncement(context.Context, *CreateGroupAnnouncementRequest) (*CreateGroupAnnouncementResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateGroupAnnouncement not implemented")
}
func (UnimplementedGroupAnnouncementServiceServer) GetGroupAnnouncementList(context.Context, *GetGroupAnnouncementListRequest) (*GetGroupAnnouncementListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetGroupAnnouncementList not implemented")
}
func (UnimplementedGroupAnnouncementServiceServer) GetGroupAnnouncement(context.Context, *GetGroupAnnouncementRequest) (*GetGroupAnnouncementResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetGroupAnnouncement not implemented")
}
func (UnimplementedGroupAnnouncementServiceServer) UpdateGroupAnnouncement(context.Context, *UpdateGroupAnnouncementRequest) (*UpdateGroupAnnouncementResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateGroupAnnouncement not implemented")
}
func (UnimplementedGroupAnnouncementServiceServer) DeleteGroupAnnouncement(context.Context, *DeleteGroupAnnouncementRequest) (*DeleteGroupAnnouncementResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteGroupAnnouncement not implemented")
}
func (UnimplementedGroupAnnouncementServiceServer) MarkAnnouncementAsRead(context.Context, *MarkAnnouncementAsReadRequest) (*MarkAnnouncementAsReadResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MarkAnnouncementAsRead not implemented")
}
func (UnimplementedGroupAnnouncementServiceServer) GetReadUsers(context.Context, *GetReadUsersRequest) (*GetReadUsersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetReadUsers not implemented")
}
func (UnimplementedGroupAnnouncementServiceServer) GetAnnouncementReadByUserId(context.Context, *GetAnnouncementReadByUserIdRequest) (*GetAnnouncementReadByUserIdResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAnnouncementReadByUserId not implemented")
}

// UnsafeGroupAnnouncementServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interfaces is not recommended, as added methods to GroupAnnouncementServiceServer will
// result in compilation errors.
type UnsafeGroupAnnouncementServiceServer interface {
	mustEmbedUnimplementedGroupAnnouncementServiceServer()
}

func RegisterGroupAnnouncementServiceServer(s grpc.ServiceRegistrar, srv GroupAnnouncementServiceServer) {
	s.RegisterService(&GroupAnnouncementService_ServiceDesc, srv)
}

func _GroupAnnouncementService_CreateGroupAnnouncement_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateGroupAnnouncementRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GroupAnnouncementServiceServer).CreateGroupAnnouncement(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GroupAnnouncementService_CreateGroupAnnouncement_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GroupAnnouncementServiceServer).CreateGroupAnnouncement(ctx, req.(*CreateGroupAnnouncementRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GroupAnnouncementService_GetGroupAnnouncementList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetGroupAnnouncementListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GroupAnnouncementServiceServer).GetGroupAnnouncementList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GroupAnnouncementService_GetGroupAnnouncementList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GroupAnnouncementServiceServer).GetGroupAnnouncementList(ctx, req.(*GetGroupAnnouncementListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GroupAnnouncementService_GetGroupAnnouncement_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetGroupAnnouncementRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GroupAnnouncementServiceServer).GetGroupAnnouncement(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GroupAnnouncementService_GetGroupAnnouncement_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GroupAnnouncementServiceServer).GetGroupAnnouncement(ctx, req.(*GetGroupAnnouncementRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GroupAnnouncementService_UpdateGroupAnnouncement_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateGroupAnnouncementRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GroupAnnouncementServiceServer).UpdateGroupAnnouncement(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GroupAnnouncementService_UpdateGroupAnnouncement_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GroupAnnouncementServiceServer).UpdateGroupAnnouncement(ctx, req.(*UpdateGroupAnnouncementRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GroupAnnouncementService_DeleteGroupAnnouncement_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteGroupAnnouncementRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GroupAnnouncementServiceServer).DeleteGroupAnnouncement(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GroupAnnouncementService_DeleteGroupAnnouncement_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GroupAnnouncementServiceServer).DeleteGroupAnnouncement(ctx, req.(*DeleteGroupAnnouncementRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GroupAnnouncementService_MarkAnnouncementAsRead_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MarkAnnouncementAsReadRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GroupAnnouncementServiceServer).MarkAnnouncementAsRead(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GroupAnnouncementService_MarkAnnouncementAsRead_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GroupAnnouncementServiceServer).MarkAnnouncementAsRead(ctx, req.(*MarkAnnouncementAsReadRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GroupAnnouncementService_GetReadUsers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetReadUsersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GroupAnnouncementServiceServer).GetReadUsers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GroupAnnouncementService_GetReadUsers_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GroupAnnouncementServiceServer).GetReadUsers(ctx, req.(*GetReadUsersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GroupAnnouncementService_GetAnnouncementReadByUserId_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAnnouncementReadByUserIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GroupAnnouncementServiceServer).GetAnnouncementReadByUserId(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GroupAnnouncementService_GetAnnouncementReadByUserId_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GroupAnnouncementServiceServer).GetAnnouncementReadByUserId(ctx, req.(*GetAnnouncementReadByUserIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// GroupAnnouncementService_ServiceDesc is the grpc.ServiceDesc for GroupAnnouncementService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var GroupAnnouncementService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "relation_v1.GroupAnnouncementService",
	HandlerType: (*GroupAnnouncementServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateGroupAnnouncement",
			Handler:    _GroupAnnouncementService_CreateGroupAnnouncement_Handler,
		},
		{
			MethodName: "GetGroupAnnouncementList",
			Handler:    _GroupAnnouncementService_GetGroupAnnouncementList_Handler,
		},
		{
			MethodName: "GetGroupAnnouncement",
			Handler:    _GroupAnnouncementService_GetGroupAnnouncement_Handler,
		},
		{
			MethodName: "UpdateGroupAnnouncement",
			Handler:    _GroupAnnouncementService_UpdateGroupAnnouncement_Handler,
		},
		{
			MethodName: "DeleteGroupAnnouncement",
			Handler:    _GroupAnnouncementService_DeleteGroupAnnouncement_Handler,
		},
		{
			MethodName: "MarkAnnouncementAsRead",
			Handler:    _GroupAnnouncementService_MarkAnnouncementAsRead_Handler,
		},
		{
			MethodName: "GetReadUsers",
			Handler:    _GroupAnnouncementService_GetReadUsers_Handler,
		},
		{
			MethodName: "GetAnnouncementReadByUserId",
			Handler:    _GroupAnnouncementService_GetAnnouncementReadByUserId_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/grpc/v1/group_announcement.proto",
}
