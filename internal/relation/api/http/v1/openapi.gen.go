// Package v1 provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.16.2 DO NOT EDIT.
package v1

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/gin-gonic/gin"
	"github.com/oapi-codegen/runtime"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// 显示对话出现消息列表
	// (POST /api/v1/relation/dialog/{id}/show)
	ShowDialog(c *gin.Context, id uint32)
	// 置顶对话
	// (POST /api/v1/relation/dialog/{id}/top)
	TopDialog(c *gin.Context, id uint32)
	// 获取群聊列表
	// (GET /api/v1/relation/group)
	ListGroup(c *gin.Context, params ListGroupParams)
	// 获取群聊申请列表
	// (GET /api/v1/relation/group/request)
	ListGroupRequest(c *gin.Context, params ListGroupRequestParams)
	// 删除群聊申请记录
	// (DELETE /api/v1/relation/group/request/{id})
	DeleteGroupRequest(c *gin.Context, id uint32)
	// 管理群聊请求
	// (PUT /api/v1/relation/group/request/{id})
	ManageGroupRequest(c *gin.Context, id uint32)
	// 退出群聊
	// (DELETE /api/v1/relation/group/{id})
	QuitGroup(c *gin.Context, id uint32)
	// 添加群聊管理员
	// (POST /api/v1/relation/group/{id}/admin)
	AddGroupAdmin(c *gin.Context, id uint32)
	// 获取群聊公告
	// (GET /api/v1/relation/group/{id}/announcement)
	ListGroupAnnouncement(c *gin.Context, id uint32)
	// 添加群聊公告
	// (POST /api/v1/relation/group/{id}/announcement)
	AddGroupAnnouncement(c *gin.Context, id uint32)
	// 删除群聊公告
	// (DELETE /api/v1/relation/group/{id}/announcement/{aid})
	DeleteGroupAnnouncement(c *gin.Context, id uint32, aid uint32)
	// 获取群聊公告
	// (GET /api/v1/relation/group/{id}/announcement/{aid})
	GetGroupAnnouncement(c *gin.Context, id uint32, aid uint32)
	// 修改群聊公告
	// (PUT /api/v1/relation/group/{id}/announcement/{aid})
	UpdateGroupAnnouncement(c *gin.Context, id uint32, aid uint32)
	// 设置群聊公告已读
	// (POST /api/v1/relation/group/{id}/announcement/{aid}/read)
	SetGroupAnnouncementRead(c *gin.Context, id uint32, aid uint32)
	// 获取群聊公告已读列表
	// (POST /api/v1/relation/group/{id}/announcement/{aid}/reader)
	ListGroupAnnouncementRead(c *gin.Context, id uint32, aid uint32)
	// 邀请加入群聊
	// (POST /api/v1/relation/group/{id}/invite)
	InviteJoinGroup(c *gin.Context, id uint32)
	// 移除群聊成员
	// (DELETE /api/v1/relation/group/{id}/member)
	RemoveGroupMember(c *gin.Context, id uint32)
	// 获取群成员列表
	// (GET /api/v1/relation/group/{id}/member)
	ListGroupMember(c *gin.Context, id uint32)
	// 设置自己在群聊内的昵称
	// (PUT /api/v1/relation/group/{id}/remark)
	SetGroupRemark(c *gin.Context, id uint32)
	// 添加群聊申请
	// (POST /api/v1/relation/group/{id}/request)
	AddGroupRequest(c *gin.Context, id uint32)
	// 设置群聊静默通知
	// (POST /api/v1/relation/group/{id}/silent)
	SetGroupSilent(c *gin.Context, id uint32)
	// 获取黑名单
	// (GET /api/v1/relation/user/blacklist)
	Blacklist(c *gin.Context, params BlacklistParams)
	// 添加到黑名单
	// (POST /api/v1/relation/user/blacklist)
	AddBlacklist(c *gin.Context)
	// 从黑名单中移除
	// (DELETE /api/v1/relation/user/blacklist/{id})
	DeleteBlacklist(c *gin.Context, id string)
	// 获取好友列表
	// (GET /api/v1/relation/user/friend)
	ListFriend(c *gin.Context)
	// 添加好友
	// (POST /api/v1/relation/user/friend)
	AddFriend(c *gin.Context)
	// 删除好友
	// (DELETE /api/v1/relation/user/friend/{id})
	DeleteFriend(c *gin.Context, id string)
	// 设置用户阅后即焚
	// (POST /api/v1/relation/user/friend/{id}/burn)
	SetUserBurn(c *gin.Context, id string)
	// 设置好友备注
	// (POST /api/v1/relation/user/friend/{id}/remark)
	SetUserRemark(c *gin.Context, id string)
	// 设置好友静默通知
	// (POST /api/v1/relation/user/friend/{id}/silent)
	SetUserSilent(c *gin.Context, id string)
	// 获取好友请求列表
	// (GET /api/v1/relation/user/friend_request)
	ListFriendRequest(c *gin.Context, params ListFriendRequestParams)
	// 删除好友申请
	// (DELETE /api/v1/relation/user/friend_request/{id})
	DeleteFriendRequest(c *gin.Context, id uint32)
	// 管理好友请求
	// (PUT /api/v1/relation/user/friend_request/{id})
	ManageFriendRequest(c *gin.Context, id uint32)
	// 交换用户端到端公钥
	// (POST /api/v1/relation/user/{id}/e2e_key)
	ExchangeE2EKey(c *gin.Context, id string)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
	ErrorHandler       func(*gin.Context, error, int)
}

type MiddlewareFunc func(c *gin.Context)

// ShowDialog operation middleware
func (siw *ServerInterfaceWrapper) ShowDialog(c *gin.Context) {

	var err error

	// ------------- Path parameter "id" -------------
	var id uint32

	err = runtime.BindStyledParameter("simple", false, "id", c.Param("id"), &id)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter id: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(BearerAuthScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.ShowDialog(c, id)
}

// TopDialog operation middleware
func (siw *ServerInterfaceWrapper) TopDialog(c *gin.Context) {

	var err error

	// ------------- Path parameter "id" -------------
	var id uint32

	err = runtime.BindStyledParameter("simple", false, "id", c.Param("id"), &id)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter id: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(BearerAuthScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.TopDialog(c, id)
}

// ListGroup operation middleware
func (siw *ServerInterfaceWrapper) ListGroup(c *gin.Context) {

	var err error

	c.Set(BearerAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params ListGroupParams

	// ------------- Optional query parameter "page_num" -------------

	err = runtime.BindQueryParameter("form", true, false, "page_num", c.Request.URL.Query(), &params.PageNum)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter page_num: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "page_size" -------------

	err = runtime.BindQueryParameter("form", true, false, "page_size", c.Request.URL.Query(), &params.PageSize)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter page_size: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.ListGroup(c, params)
}

// ListGroupRequest operation middleware
func (siw *ServerInterfaceWrapper) ListGroupRequest(c *gin.Context) {

	var err error

	c.Set(BearerAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params ListGroupRequestParams

	// ------------- Optional query parameter "page_num" -------------

	err = runtime.BindQueryParameter("form", true, false, "page_num", c.Request.URL.Query(), &params.PageNum)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter page_num: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "page_size" -------------

	err = runtime.BindQueryParameter("form", true, false, "page_size", c.Request.URL.Query(), &params.PageSize)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter page_size: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.ListGroupRequest(c, params)
}

// DeleteGroupRequest operation middleware
func (siw *ServerInterfaceWrapper) DeleteGroupRequest(c *gin.Context) {

	var err error

	// ------------- Path parameter "id" -------------
	var id uint32

	err = runtime.BindStyledParameter("simple", false, "id", c.Param("id"), &id)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter id: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(BearerAuthScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.DeleteGroupRequest(c, id)
}

// ManageGroupRequest operation middleware
func (siw *ServerInterfaceWrapper) ManageGroupRequest(c *gin.Context) {

	var err error

	// ------------- Path parameter "id" -------------
	var id uint32

	err = runtime.BindStyledParameter("simple", false, "id", c.Param("id"), &id)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter id: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(BearerAuthScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.ManageGroupRequest(c, id)
}

// QuitGroup operation middleware
func (siw *ServerInterfaceWrapper) QuitGroup(c *gin.Context) {

	var err error

	// ------------- Path parameter "id" -------------
	var id uint32

	err = runtime.BindStyledParameter("simple", false, "id", c.Param("id"), &id)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter id: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(BearerAuthScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.QuitGroup(c, id)
}

// AddGroupAdmin operation middleware
func (siw *ServerInterfaceWrapper) AddGroupAdmin(c *gin.Context) {

	var err error

	// ------------- Path parameter "id" -------------
	var id uint32

	err = runtime.BindStyledParameter("simple", false, "id", c.Param("id"), &id)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter id: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(BearerAuthScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.AddGroupAdmin(c, id)
}

// ListGroupAnnouncement operation middleware
func (siw *ServerInterfaceWrapper) ListGroupAnnouncement(c *gin.Context) {

	var err error

	// ------------- Path parameter "id" -------------
	var id uint32

	err = runtime.BindStyledParameter("simple", false, "id", c.Param("id"), &id)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter id: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(BearerAuthScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.ListGroupAnnouncement(c, id)
}

// AddGroupAnnouncement operation middleware
func (siw *ServerInterfaceWrapper) AddGroupAnnouncement(c *gin.Context) {

	var err error

	// ------------- Path parameter "id" -------------
	var id uint32

	err = runtime.BindStyledParameter("simple", false, "id", c.Param("id"), &id)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter id: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(BearerAuthScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.AddGroupAnnouncement(c, id)
}

// DeleteGroupAnnouncement operation middleware
func (siw *ServerInterfaceWrapper) DeleteGroupAnnouncement(c *gin.Context) {

	var err error

	// ------------- Path parameter "id" -------------
	var id uint32

	err = runtime.BindStyledParameter("simple", false, "id", c.Param("id"), &id)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter id: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Path parameter "aid" -------------
	var aid uint32

	err = runtime.BindStyledParameter("simple", false, "aid", c.Param("aid"), &aid)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter aid: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(BearerAuthScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.DeleteGroupAnnouncement(c, id, aid)
}

// GetGroupAnnouncement operation middleware
func (siw *ServerInterfaceWrapper) GetGroupAnnouncement(c *gin.Context) {

	var err error

	// ------------- Path parameter "id" -------------
	var id uint32

	err = runtime.BindStyledParameter("simple", false, "id", c.Param("id"), &id)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter id: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Path parameter "aid" -------------
	var aid uint32

	err = runtime.BindStyledParameter("simple", false, "aid", c.Param("aid"), &aid)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter aid: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(BearerAuthScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetGroupAnnouncement(c, id, aid)
}

// UpdateGroupAnnouncement operation middleware
func (siw *ServerInterfaceWrapper) UpdateGroupAnnouncement(c *gin.Context) {

	var err error

	// ------------- Path parameter "id" -------------
	var id uint32

	err = runtime.BindStyledParameter("simple", false, "id", c.Param("id"), &id)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter id: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Path parameter "aid" -------------
	var aid uint32

	err = runtime.BindStyledParameter("simple", false, "aid", c.Param("aid"), &aid)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter aid: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(BearerAuthScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.UpdateGroupAnnouncement(c, id, aid)
}

// SetGroupAnnouncementRead operation middleware
func (siw *ServerInterfaceWrapper) SetGroupAnnouncementRead(c *gin.Context) {

	var err error

	// ------------- Path parameter "id" -------------
	var id uint32

	err = runtime.BindStyledParameter("simple", false, "id", c.Param("id"), &id)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter id: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Path parameter "aid" -------------
	var aid uint32

	err = runtime.BindStyledParameter("simple", false, "aid", c.Param("aid"), &aid)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter aid: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(BearerAuthScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.SetGroupAnnouncementRead(c, id, aid)
}

// ListGroupAnnouncementRead operation middleware
func (siw *ServerInterfaceWrapper) ListGroupAnnouncementRead(c *gin.Context) {

	var err error

	// ------------- Path parameter "id" -------------
	var id uint32

	err = runtime.BindStyledParameter("simple", false, "id", c.Param("id"), &id)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter id: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Path parameter "aid" -------------
	var aid uint32

	err = runtime.BindStyledParameter("simple", false, "aid", c.Param("aid"), &aid)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter aid: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(BearerAuthScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.ListGroupAnnouncementRead(c, id, aid)
}

// InviteJoinGroup operation middleware
func (siw *ServerInterfaceWrapper) InviteJoinGroup(c *gin.Context) {

	var err error

	// ------------- Path parameter "id" -------------
	var id uint32

	err = runtime.BindStyledParameter("simple", false, "id", c.Param("id"), &id)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter id: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(BearerAuthScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.InviteJoinGroup(c, id)
}

// RemoveGroupMember operation middleware
func (siw *ServerInterfaceWrapper) RemoveGroupMember(c *gin.Context) {

	var err error

	// ------------- Path parameter "id" -------------
	var id uint32

	err = runtime.BindStyledParameter("simple", false, "id", c.Param("id"), &id)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter id: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(BearerAuthScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.RemoveGroupMember(c, id)
}

// ListGroupMember operation middleware
func (siw *ServerInterfaceWrapper) ListGroupMember(c *gin.Context) {

	var err error

	// ------------- Path parameter "id" -------------
	var id uint32

	err = runtime.BindStyledParameter("simple", false, "id", c.Param("id"), &id)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter id: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(BearerAuthScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.ListGroupMember(c, id)
}

// SetGroupRemark operation middleware
func (siw *ServerInterfaceWrapper) SetGroupRemark(c *gin.Context) {

	var err error

	// ------------- Path parameter "id" -------------
	var id uint32

	err = runtime.BindStyledParameter("simple", false, "id", c.Param("id"), &id)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter id: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(BearerAuthScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.SetGroupRemark(c, id)
}

// AddGroupRequest operation middleware
func (siw *ServerInterfaceWrapper) AddGroupRequest(c *gin.Context) {

	var err error

	// ------------- Path parameter "id" -------------
	var id uint32

	err = runtime.BindStyledParameter("simple", false, "id", c.Param("id"), &id)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter id: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(BearerAuthScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.AddGroupRequest(c, id)
}

// SetGroupSilent operation middleware
func (siw *ServerInterfaceWrapper) SetGroupSilent(c *gin.Context) {

	var err error

	// ------------- Path parameter "id" -------------
	var id uint32

	err = runtime.BindStyledParameter("simple", false, "id", c.Param("id"), &id)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter id: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(BearerAuthScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.SetGroupSilent(c, id)
}

// Blacklist operation middleware
func (siw *ServerInterfaceWrapper) Blacklist(c *gin.Context) {

	var err error

	c.Set(BearerAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params BlacklistParams

	// ------------- Optional query parameter "page_num" -------------

	err = runtime.BindQueryParameter("form", true, false, "page_num", c.Request.URL.Query(), &params.PageNum)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter page_num: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "page_size" -------------

	err = runtime.BindQueryParameter("form", true, false, "page_size", c.Request.URL.Query(), &params.PageSize)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter page_size: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.Blacklist(c, params)
}

// AddBlacklist operation middleware
func (siw *ServerInterfaceWrapper) AddBlacklist(c *gin.Context) {

	c.Set(BearerAuthScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.AddBlacklist(c)
}

// DeleteBlacklist operation middleware
func (siw *ServerInterfaceWrapper) DeleteBlacklist(c *gin.Context) {

	var err error

	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameter("simple", false, "id", c.Param("id"), &id)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter id: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(BearerAuthScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.DeleteBlacklist(c, id)
}

// ListFriend operation middleware
func (siw *ServerInterfaceWrapper) ListFriend(c *gin.Context) {

	c.Set(BearerAuthScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.ListFriend(c)
}

// AddFriend operation middleware
func (siw *ServerInterfaceWrapper) AddFriend(c *gin.Context) {

	c.Set(BearerAuthScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.AddFriend(c)
}

// DeleteFriend operation middleware
func (siw *ServerInterfaceWrapper) DeleteFriend(c *gin.Context) {

	var err error

	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameter("simple", false, "id", c.Param("id"), &id)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter id: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(BearerAuthScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.DeleteFriend(c, id)
}

// SetUserBurn operation middleware
func (siw *ServerInterfaceWrapper) SetUserBurn(c *gin.Context) {

	var err error

	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameter("simple", false, "id", c.Param("id"), &id)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter id: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(BearerAuthScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.SetUserBurn(c, id)
}

// SetUserRemark operation middleware
func (siw *ServerInterfaceWrapper) SetUserRemark(c *gin.Context) {

	var err error

	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameter("simple", false, "id", c.Param("id"), &id)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter id: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(BearerAuthScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.SetUserRemark(c, id)
}

// SetUserSilent operation middleware
func (siw *ServerInterfaceWrapper) SetUserSilent(c *gin.Context) {

	var err error

	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameter("simple", false, "id", c.Param("id"), &id)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter id: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(BearerAuthScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.SetUserSilent(c, id)
}

// ListFriendRequest operation middleware
func (siw *ServerInterfaceWrapper) ListFriendRequest(c *gin.Context) {

	var err error

	c.Set(BearerAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params ListFriendRequestParams

	// ------------- Optional query parameter "page_num" -------------

	err = runtime.BindQueryParameter("form", true, false, "page_num", c.Request.URL.Query(), &params.PageNum)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter page_num: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "page_size" -------------

	err = runtime.BindQueryParameter("form", true, false, "page_size", c.Request.URL.Query(), &params.PageSize)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter page_size: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.ListFriendRequest(c, params)
}

// DeleteFriendRequest operation middleware
func (siw *ServerInterfaceWrapper) DeleteFriendRequest(c *gin.Context) {

	var err error

	// ------------- Path parameter "id" -------------
	var id uint32

	err = runtime.BindStyledParameter("simple", false, "id", c.Param("id"), &id)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter id: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(BearerAuthScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.DeleteFriendRequest(c, id)
}

// ManageFriendRequest operation middleware
func (siw *ServerInterfaceWrapper) ManageFriendRequest(c *gin.Context) {

	var err error

	// ------------- Path parameter "id" -------------
	var id uint32

	err = runtime.BindStyledParameter("simple", false, "id", c.Param("id"), &id)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter id: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(BearerAuthScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.ManageFriendRequest(c, id)
}

// ExchangeE2EKey operation middleware
func (siw *ServerInterfaceWrapper) ExchangeE2EKey(c *gin.Context) {

	var err error

	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameter("simple", false, "id", c.Param("id"), &id)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter id: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(BearerAuthScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.ExchangeE2EKey(c, id)
}

// GinServerOptions provides options for the Gin server.
type GinServerOptions struct {
	BaseURL      string
	Middlewares  []MiddlewareFunc
	ErrorHandler func(*gin.Context, error, int)
}

// RegisterHandlers creates http.Handler with routing matching OpenAPI spec.
func RegisterHandlers(router gin.IRouter, si ServerInterface) {
	RegisterHandlersWithOptions(router, si, GinServerOptions{})
}

// RegisterHandlersWithOptions creates http.Handler with additional options
func RegisterHandlersWithOptions(router gin.IRouter, si ServerInterface, options GinServerOptions) {
	errorHandler := options.ErrorHandler
	if errorHandler == nil {
		errorHandler = func(c *gin.Context, err error, statusCode int) {
			c.JSON(statusCode, gin.H{"msg": err.Error()})
		}
	}

	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
		ErrorHandler:       errorHandler,
	}

	router.POST(options.BaseURL+"/api/v1/relation/dialog/:id/show", wrapper.ShowDialog)
	router.POST(options.BaseURL+"/api/v1/relation/dialog/:id/top", wrapper.TopDialog)
	router.GET(options.BaseURL+"/api/v1/relation/group", wrapper.ListGroup)
	router.GET(options.BaseURL+"/api/v1/relation/group/request", wrapper.ListGroupRequest)
	router.DELETE(options.BaseURL+"/api/v1/relation/group/request/:id", wrapper.DeleteGroupRequest)
	router.PUT(options.BaseURL+"/api/v1/relation/group/request/:id", wrapper.ManageGroupRequest)
	router.DELETE(options.BaseURL+"/api/v1/relation/group/:id", wrapper.QuitGroup)
	router.POST(options.BaseURL+"/api/v1/relation/group/:id/admin", wrapper.AddGroupAdmin)
	router.GET(options.BaseURL+"/api/v1/relation/group/:id/announcement", wrapper.ListGroupAnnouncement)
	router.POST(options.BaseURL+"/api/v1/relation/group/:id/announcement", wrapper.AddGroupAnnouncement)
	router.DELETE(options.BaseURL+"/api/v1/relation/group/:id/announcement/:aid", wrapper.DeleteGroupAnnouncement)
	router.GET(options.BaseURL+"/api/v1/relation/group/:id/announcement/:aid", wrapper.GetGroupAnnouncement)
	router.PUT(options.BaseURL+"/api/v1/relation/group/:id/announcement/:aid", wrapper.UpdateGroupAnnouncement)
	router.POST(options.BaseURL+"/api/v1/relation/group/:id/announcement/:aid/read", wrapper.SetGroupAnnouncementRead)
	router.POST(options.BaseURL+"/api/v1/relation/group/:id/announcement/:aid/reader", wrapper.ListGroupAnnouncementRead)
	router.POST(options.BaseURL+"/api/v1/relation/group/:id/invite", wrapper.InviteJoinGroup)
	router.DELETE(options.BaseURL+"/api/v1/relation/group/:id/member", wrapper.RemoveGroupMember)
	router.GET(options.BaseURL+"/api/v1/relation/group/:id/member", wrapper.ListGroupMember)
	router.PUT(options.BaseURL+"/api/v1/relation/group/:id/remark", wrapper.SetGroupRemark)
	router.POST(options.BaseURL+"/api/v1/relation/group/:id/request", wrapper.AddGroupRequest)
	router.POST(options.BaseURL+"/api/v1/relation/group/:id/silent", wrapper.SetGroupSilent)
	router.GET(options.BaseURL+"/api/v1/relation/user/blacklist", wrapper.Blacklist)
	router.POST(options.BaseURL+"/api/v1/relation/user/blacklist", wrapper.AddBlacklist)
	router.DELETE(options.BaseURL+"/api/v1/relation/user/blacklist/:id", wrapper.DeleteBlacklist)
	router.GET(options.BaseURL+"/api/v1/relation/user/friend", wrapper.ListFriend)
	router.POST(options.BaseURL+"/api/v1/relation/user/friend", wrapper.AddFriend)
	router.DELETE(options.BaseURL+"/api/v1/relation/user/friend/:id", wrapper.DeleteFriend)
	router.POST(options.BaseURL+"/api/v1/relation/user/friend/:id/burn", wrapper.SetUserBurn)
	router.POST(options.BaseURL+"/api/v1/relation/user/friend/:id/remark", wrapper.SetUserRemark)
	router.POST(options.BaseURL+"/api/v1/relation/user/friend/:id/silent", wrapper.SetUserSilent)
	router.GET(options.BaseURL+"/api/v1/relation/user/friend_request", wrapper.ListFriendRequest)
	router.DELETE(options.BaseURL+"/api/v1/relation/user/friend_request/:id", wrapper.DeleteFriendRequest)
	router.PUT(options.BaseURL+"/api/v1/relation/user/friend_request/:id", wrapper.ManageFriendRequest)
	router.POST(options.BaseURL+"/api/v1/relation/user/:id/e2e_key", wrapper.ExchangeE2EKey)
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"//91EkRXi3IAAA==",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
