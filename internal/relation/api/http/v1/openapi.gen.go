// Package v1 provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen/v2 version v2.1.0 DO NOT EDIT.
package v1

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/gin-gonic/gin"
	"github.com/oapi-codegen/runtime"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// 显示对话出现消息列表
	// (POST /api/v1/relation/dialog/{id}/show)
	ShowDialog(c *gin.Context, id uint32)
	// 置顶对话
	// (POST /api/v1/relation/dialog/{id}/top)
	TopDialog(c *gin.Context, id uint32)
	// 获取群聊列表
	// (GET /api/v1/relation/group)
	ListGroup(c *gin.Context, params ListGroupParams)
	// 获取群聊申请列表
	// (GET /api/v1/relation/group/request)
	ListGroupRequest(c *gin.Context, params ListGroupRequestParams)
	// 删除群聊申请记录
	// (DELETE /api/v1/relation/group/request/{id})
	DeleteGroupRequest(c *gin.Context, id uint32)
	// 管理群聊请求
	// (PUT /api/v1/relation/group/request/{id})
	ManageGroupRequest(c *gin.Context, id uint32)
	// 退出群聊
	// (DELETE /api/v1/relation/group/{id})
	QuitGroup(c *gin.Context, id uint32)
	// 添加群聊管理员
	// (POST /api/v1/relation/group/{id}/admin)
	AddGroupAdmin(c *gin.Context, id uint32)
	// 获取群聊公告
	// (GET /api/v1/relation/group/{id}/announcement)
	ListGroupAnnouncement(c *gin.Context, id uint32)
	// 添加群聊公告
	// (POST /api/v1/relation/group/{id}/announcement)
	AddGroupAnnouncement(c *gin.Context, id uint32)
	// 删除群聊公告
	// (DELETE /api/v1/relation/group/{id}/announcement/{aid})
	DeleteGroupAnnouncement(c *gin.Context, id uint32, aid uint32)
	// 获取群聊公告
	// (GET /api/v1/relation/group/{id}/announcement/{aid})
	GetGroupAnnouncement(c *gin.Context, id uint32, aid uint32)
	// 修改群聊公告
	// (PUT /api/v1/relation/group/{id}/announcement/{aid})
	UpdateGroupAnnouncement(c *gin.Context, id uint32, aid uint32)
	// 设置群聊公告已读
	// (POST /api/v1/relation/group/{id}/announcement/{aid}/read)
	SetGroupAnnouncementRead(c *gin.Context, id uint32, aid uint32)
	// 获取群聊公告已读列表
	// (POST /api/v1/relation/group/{id}/announcement/{aid}/reader)
	ListGroupAnnouncementRead(c *gin.Context, id uint32, aid uint32)
	// 邀请加入群聊
	// (POST /api/v1/relation/group/{id}/invite)
	InviteJoinGroup(c *gin.Context, id uint32)
	// 移除群聊成员
	// (DELETE /api/v1/relation/group/{id}/member)
	RemoveGroupMember(c *gin.Context, id uint32)
	// 获取群成员列表
	// (GET /api/v1/relation/group/{id}/member)
	ListGroupMember(c *gin.Context, id uint32)
	// 设置自己在群聊内的昵称
	// (PUT /api/v1/relation/group/{id}/remark)
	SetGroupRemark(c *gin.Context, id uint32)
	// 添加群聊申请
	// (POST /api/v1/relation/group/{id}/request)
	AddGroupRequest(c *gin.Context, id uint32)
	// 设置群聊静默通知
	// (POST /api/v1/relation/group/{id}/silent)
	SetGroupSilent(c *gin.Context, id uint32)
	// 获取黑名单
	// (GET /api/v1/relation/user/blacklist)
	Blacklist(c *gin.Context, params BlacklistParams)
	// 添加到黑名单
	// (POST /api/v1/relation/user/blacklist)
	AddBlacklist(c *gin.Context)
	// 从黑名单中移除
	// (DELETE /api/v1/relation/user/blacklist/{id})
	DeleteBlacklist(c *gin.Context, id string)
	// 获取好友列表
	// (GET /api/v1/relation/user/friend)
	ListFriend(c *gin.Context)
	// 添加好友
	// (POST /api/v1/relation/user/friend)
	AddFriend(c *gin.Context)
	// 删除好友
	// (DELETE /api/v1/relation/user/friend/{id})
	DeleteFriend(c *gin.Context, id string)
	// 设置用户阅后即焚
	// (POST /api/v1/relation/user/friend/{id}/burn)
	SetUserBurn(c *gin.Context, id string)
	// 设置好友备注
	// (POST /api/v1/relation/user/friend/{id}/remark)
	SetUserRemark(c *gin.Context, id string)
	// 设置好友静默通知
	// (POST /api/v1/relation/user/friend/{id}/silent)
	SetUserSilent(c *gin.Context, id string)
	// 获取好友请求列表
	// (GET /api/v1/relation/user/friend_request)
	ListFriendRequest(c *gin.Context, params ListFriendRequestParams)
	// 删除好友申请
	// (DELETE /api/v1/relation/user/friend_request/{id})
	DeleteFriendRequest(c *gin.Context, id uint32)
	// 管理好友请求
	// (PUT /api/v1/relation/user/friend_request/{id})
	ManageFriendRequest(c *gin.Context, id uint32)
	// 交换用户端到端公钥
	// (POST /api/v1/relation/user/{id}/e2e_key)
	ExchangeE2EKey(c *gin.Context, id string)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
	ErrorHandler       func(*gin.Context, error, int)
}

type MiddlewareFunc func(c *gin.Context)

// ShowDialog operation middleware
func (siw *ServerInterfaceWrapper) ShowDialog(c *gin.Context) {

	var err error

	// ------------- Path parameter "id" -------------
	var id uint32

	err = runtime.BindStyledParameterWithOptions("simple", "id", c.Param("id"), &id, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter id: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(BearerAuthScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.ShowDialog(c, id)
}

// TopDialog operation middleware
func (siw *ServerInterfaceWrapper) TopDialog(c *gin.Context) {

	var err error

	// ------------- Path parameter "id" -------------
	var id uint32

	err = runtime.BindStyledParameterWithOptions("simple", "id", c.Param("id"), &id, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter id: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(BearerAuthScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.TopDialog(c, id)
}

// ListGroup operation middleware
func (siw *ServerInterfaceWrapper) ListGroup(c *gin.Context) {

	var err error

	c.Set(BearerAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params ListGroupParams

	// ------------- Optional query parameter "page_num" -------------

	err = runtime.BindQueryParameter("form", true, false, "page_num", c.Request.URL.Query(), &params.PageNum)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter page_num: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "page_size" -------------

	err = runtime.BindQueryParameter("form", true, false, "page_size", c.Request.URL.Query(), &params.PageSize)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter page_size: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.ListGroup(c, params)
}

// ListGroupRequest operation middleware
func (siw *ServerInterfaceWrapper) ListGroupRequest(c *gin.Context) {

	var err error

	c.Set(BearerAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params ListGroupRequestParams

	// ------------- Optional query parameter "page_num" -------------

	err = runtime.BindQueryParameter("form", true, false, "page_num", c.Request.URL.Query(), &params.PageNum)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter page_num: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "page_size" -------------

	err = runtime.BindQueryParameter("form", true, false, "page_size", c.Request.URL.Query(), &params.PageSize)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter page_size: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.ListGroupRequest(c, params)
}

// DeleteGroupRequest operation middleware
func (siw *ServerInterfaceWrapper) DeleteGroupRequest(c *gin.Context) {

	var err error

	// ------------- Path parameter "id" -------------
	var id uint32

	err = runtime.BindStyledParameterWithOptions("simple", "id", c.Param("id"), &id, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter id: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(BearerAuthScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.DeleteGroupRequest(c, id)
}

// ManageGroupRequest operation middleware
func (siw *ServerInterfaceWrapper) ManageGroupRequest(c *gin.Context) {

	var err error

	// ------------- Path parameter "id" -------------
	var id uint32

	err = runtime.BindStyledParameterWithOptions("simple", "id", c.Param("id"), &id, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter id: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(BearerAuthScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.ManageGroupRequest(c, id)
}

// QuitGroup operation middleware
func (siw *ServerInterfaceWrapper) QuitGroup(c *gin.Context) {

	var err error

	// ------------- Path parameter "id" -------------
	var id uint32

	err = runtime.BindStyledParameterWithOptions("simple", "id", c.Param("id"), &id, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter id: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(BearerAuthScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.QuitGroup(c, id)
}

// AddGroupAdmin operation middleware
func (siw *ServerInterfaceWrapper) AddGroupAdmin(c *gin.Context) {

	var err error

	// ------------- Path parameter "id" -------------
	var id uint32

	err = runtime.BindStyledParameterWithOptions("simple", "id", c.Param("id"), &id, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter id: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(BearerAuthScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.AddGroupAdmin(c, id)
}

// ListGroupAnnouncement operation middleware
func (siw *ServerInterfaceWrapper) ListGroupAnnouncement(c *gin.Context) {

	var err error

	// ------------- Path parameter "id" -------------
	var id uint32

	err = runtime.BindStyledParameterWithOptions("simple", "id", c.Param("id"), &id, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter id: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(BearerAuthScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.ListGroupAnnouncement(c, id)
}

// AddGroupAnnouncement operation middleware
func (siw *ServerInterfaceWrapper) AddGroupAnnouncement(c *gin.Context) {

	var err error

	// ------------- Path parameter "id" -------------
	var id uint32

	err = runtime.BindStyledParameterWithOptions("simple", "id", c.Param("id"), &id, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter id: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(BearerAuthScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.AddGroupAnnouncement(c, id)
}

// DeleteGroupAnnouncement operation middleware
func (siw *ServerInterfaceWrapper) DeleteGroupAnnouncement(c *gin.Context) {

	var err error

	// ------------- Path parameter "id" -------------
	var id uint32

	err = runtime.BindStyledParameterWithOptions("simple", "id", c.Param("id"), &id, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter id: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Path parameter "aid" -------------
	var aid uint32

	err = runtime.BindStyledParameterWithOptions("simple", "aid", c.Param("aid"), &aid, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter aid: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(BearerAuthScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.DeleteGroupAnnouncement(c, id, aid)
}

// GetGroupAnnouncement operation middleware
func (siw *ServerInterfaceWrapper) GetGroupAnnouncement(c *gin.Context) {

	var err error

	// ------------- Path parameter "id" -------------
	var id uint32

	err = runtime.BindStyledParameterWithOptions("simple", "id", c.Param("id"), &id, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter id: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Path parameter "aid" -------------
	var aid uint32

	err = runtime.BindStyledParameterWithOptions("simple", "aid", c.Param("aid"), &aid, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter aid: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(BearerAuthScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetGroupAnnouncement(c, id, aid)
}

// UpdateGroupAnnouncement operation middleware
func (siw *ServerInterfaceWrapper) UpdateGroupAnnouncement(c *gin.Context) {

	var err error

	// ------------- Path parameter "id" -------------
	var id uint32

	err = runtime.BindStyledParameterWithOptions("simple", "id", c.Param("id"), &id, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter id: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Path parameter "aid" -------------
	var aid uint32

	err = runtime.BindStyledParameterWithOptions("simple", "aid", c.Param("aid"), &aid, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter aid: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(BearerAuthScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.UpdateGroupAnnouncement(c, id, aid)
}

// SetGroupAnnouncementRead operation middleware
func (siw *ServerInterfaceWrapper) SetGroupAnnouncementRead(c *gin.Context) {

	var err error

	// ------------- Path parameter "id" -------------
	var id uint32

	err = runtime.BindStyledParameterWithOptions("simple", "id", c.Param("id"), &id, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter id: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Path parameter "aid" -------------
	var aid uint32

	err = runtime.BindStyledParameterWithOptions("simple", "aid", c.Param("aid"), &aid, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter aid: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(BearerAuthScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.SetGroupAnnouncementRead(c, id, aid)
}

// ListGroupAnnouncementRead operation middleware
func (siw *ServerInterfaceWrapper) ListGroupAnnouncementRead(c *gin.Context) {

	var err error

	// ------------- Path parameter "id" -------------
	var id uint32

	err = runtime.BindStyledParameterWithOptions("simple", "id", c.Param("id"), &id, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter id: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Path parameter "aid" -------------
	var aid uint32

	err = runtime.BindStyledParameterWithOptions("simple", "aid", c.Param("aid"), &aid, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter aid: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(BearerAuthScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.ListGroupAnnouncementRead(c, id, aid)
}

// InviteJoinGroup operation middleware
func (siw *ServerInterfaceWrapper) InviteJoinGroup(c *gin.Context) {

	var err error

	// ------------- Path parameter "id" -------------
	var id uint32

	err = runtime.BindStyledParameterWithOptions("simple", "id", c.Param("id"), &id, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter id: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(BearerAuthScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.InviteJoinGroup(c, id)
}

// RemoveGroupMember operation middleware
func (siw *ServerInterfaceWrapper) RemoveGroupMember(c *gin.Context) {

	var err error

	// ------------- Path parameter "id" -------------
	var id uint32

	err = runtime.BindStyledParameterWithOptions("simple", "id", c.Param("id"), &id, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter id: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(BearerAuthScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.RemoveGroupMember(c, id)
}

// ListGroupMember operation middleware
func (siw *ServerInterfaceWrapper) ListGroupMember(c *gin.Context) {

	var err error

	// ------------- Path parameter "id" -------------
	var id uint32

	err = runtime.BindStyledParameterWithOptions("simple", "id", c.Param("id"), &id, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter id: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(BearerAuthScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.ListGroupMember(c, id)
}

// SetGroupRemark operation middleware
func (siw *ServerInterfaceWrapper) SetGroupRemark(c *gin.Context) {

	var err error

	// ------------- Path parameter "id" -------------
	var id uint32

	err = runtime.BindStyledParameterWithOptions("simple", "id", c.Param("id"), &id, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter id: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(BearerAuthScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.SetGroupRemark(c, id)
}

// AddGroupRequest operation middleware
func (siw *ServerInterfaceWrapper) AddGroupRequest(c *gin.Context) {

	var err error

	// ------------- Path parameter "id" -------------
	var id uint32

	err = runtime.BindStyledParameterWithOptions("simple", "id", c.Param("id"), &id, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter id: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(BearerAuthScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.AddGroupRequest(c, id)
}

// SetGroupSilent operation middleware
func (siw *ServerInterfaceWrapper) SetGroupSilent(c *gin.Context) {

	var err error

	// ------------- Path parameter "id" -------------
	var id uint32

	err = runtime.BindStyledParameterWithOptions("simple", "id", c.Param("id"), &id, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter id: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(BearerAuthScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.SetGroupSilent(c, id)
}

// Blacklist operation middleware
func (siw *ServerInterfaceWrapper) Blacklist(c *gin.Context) {

	var err error

	c.Set(BearerAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params BlacklistParams

	// ------------- Optional query parameter "page_num" -------------

	err = runtime.BindQueryParameter("form", true, false, "page_num", c.Request.URL.Query(), &params.PageNum)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter page_num: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "page_size" -------------

	err = runtime.BindQueryParameter("form", true, false, "page_size", c.Request.URL.Query(), &params.PageSize)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter page_size: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.Blacklist(c, params)
}

// AddBlacklist operation middleware
func (siw *ServerInterfaceWrapper) AddBlacklist(c *gin.Context) {

	c.Set(BearerAuthScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.AddBlacklist(c)
}

// DeleteBlacklist operation middleware
func (siw *ServerInterfaceWrapper) DeleteBlacklist(c *gin.Context) {

	var err error

	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithOptions("simple", "id", c.Param("id"), &id, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter id: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(BearerAuthScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.DeleteBlacklist(c, id)
}

// ListFriend operation middleware
func (siw *ServerInterfaceWrapper) ListFriend(c *gin.Context) {

	c.Set(BearerAuthScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.ListFriend(c)
}

// AddFriend operation middleware
func (siw *ServerInterfaceWrapper) AddFriend(c *gin.Context) {

	c.Set(BearerAuthScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.AddFriend(c)
}

// DeleteFriend operation middleware
func (siw *ServerInterfaceWrapper) DeleteFriend(c *gin.Context) {

	var err error

	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithOptions("simple", "id", c.Param("id"), &id, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter id: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(BearerAuthScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.DeleteFriend(c, id)
}

// SetUserBurn operation middleware
func (siw *ServerInterfaceWrapper) SetUserBurn(c *gin.Context) {

	var err error

	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithOptions("simple", "id", c.Param("id"), &id, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter id: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(BearerAuthScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.SetUserBurn(c, id)
}

// SetUserRemark operation middleware
func (siw *ServerInterfaceWrapper) SetUserRemark(c *gin.Context) {

	var err error

	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithOptions("simple", "id", c.Param("id"), &id, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter id: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(BearerAuthScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.SetUserRemark(c, id)
}

// SetUserSilent operation middleware
func (siw *ServerInterfaceWrapper) SetUserSilent(c *gin.Context) {

	var err error

	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithOptions("simple", "id", c.Param("id"), &id, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter id: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(BearerAuthScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.SetUserSilent(c, id)
}

// ListFriendRequest operation middleware
func (siw *ServerInterfaceWrapper) ListFriendRequest(c *gin.Context) {

	var err error

	c.Set(BearerAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params ListFriendRequestParams

	// ------------- Optional query parameter "page_num" -------------

	err = runtime.BindQueryParameter("form", true, false, "page_num", c.Request.URL.Query(), &params.PageNum)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter page_num: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "page_size" -------------

	err = runtime.BindQueryParameter("form", true, false, "page_size", c.Request.URL.Query(), &params.PageSize)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter page_size: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.ListFriendRequest(c, params)
}

// DeleteFriendRequest operation middleware
func (siw *ServerInterfaceWrapper) DeleteFriendRequest(c *gin.Context) {

	var err error

	// ------------- Path parameter "id" -------------
	var id uint32

	err = runtime.BindStyledParameterWithOptions("simple", "id", c.Param("id"), &id, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter id: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(BearerAuthScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.DeleteFriendRequest(c, id)
}

// ManageFriendRequest operation middleware
func (siw *ServerInterfaceWrapper) ManageFriendRequest(c *gin.Context) {

	var err error

	// ------------- Path parameter "id" -------------
	var id uint32

	err = runtime.BindStyledParameterWithOptions("simple", "id", c.Param("id"), &id, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter id: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(BearerAuthScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.ManageFriendRequest(c, id)
}

// ExchangeE2EKey operation middleware
func (siw *ServerInterfaceWrapper) ExchangeE2EKey(c *gin.Context) {

	var err error

	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithOptions("simple", "id", c.Param("id"), &id, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter id: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(BearerAuthScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.ExchangeE2EKey(c, id)
}

// GinServerOptions provides options for the Gin server.
type GinServerOptions struct {
	BaseURL      string
	Middlewares  []MiddlewareFunc
	ErrorHandler func(*gin.Context, error, int)
}

// RegisterHandlers creates http.Handler with routing matching OpenAPI spec.
func RegisterHandlers(router gin.IRouter, si ServerInterface) {
	RegisterHandlersWithOptions(router, si, GinServerOptions{})
}

// RegisterHandlersWithOptions creates http.Handler with additional options
func RegisterHandlersWithOptions(router gin.IRouter, si ServerInterface, options GinServerOptions) {
	errorHandler := options.ErrorHandler
	if errorHandler == nil {
		errorHandler = func(c *gin.Context, err error, statusCode int) {
			c.JSON(statusCode, gin.H{"msg": err.Error()})
		}
	}

	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
		ErrorHandler:       errorHandler,
	}

	router.POST(options.BaseURL+"/api/v1/relation/dialog/:id/show", wrapper.ShowDialog)
	router.POST(options.BaseURL+"/api/v1/relation/dialog/:id/top", wrapper.TopDialog)
	router.GET(options.BaseURL+"/api/v1/relation/group", wrapper.ListGroup)
	router.GET(options.BaseURL+"/api/v1/relation/group/request", wrapper.ListGroupRequest)
	router.DELETE(options.BaseURL+"/api/v1/relation/group/request/:id", wrapper.DeleteGroupRequest)
	router.PUT(options.BaseURL+"/api/v1/relation/group/request/:id", wrapper.ManageGroupRequest)
	router.DELETE(options.BaseURL+"/api/v1/relation/group/:id", wrapper.QuitGroup)
	router.POST(options.BaseURL+"/api/v1/relation/group/:id/admin", wrapper.AddGroupAdmin)
	router.GET(options.BaseURL+"/api/v1/relation/group/:id/announcement", wrapper.ListGroupAnnouncement)
	router.POST(options.BaseURL+"/api/v1/relation/group/:id/announcement", wrapper.AddGroupAnnouncement)
	router.DELETE(options.BaseURL+"/api/v1/relation/group/:id/announcement/:aid", wrapper.DeleteGroupAnnouncement)
	router.GET(options.BaseURL+"/api/v1/relation/group/:id/announcement/:aid", wrapper.GetGroupAnnouncement)
	router.PUT(options.BaseURL+"/api/v1/relation/group/:id/announcement/:aid", wrapper.UpdateGroupAnnouncement)
	router.POST(options.BaseURL+"/api/v1/relation/group/:id/announcement/:aid/read", wrapper.SetGroupAnnouncementRead)
	router.POST(options.BaseURL+"/api/v1/relation/group/:id/announcement/:aid/reader", wrapper.ListGroupAnnouncementRead)
	router.POST(options.BaseURL+"/api/v1/relation/group/:id/invite", wrapper.InviteJoinGroup)
	router.DELETE(options.BaseURL+"/api/v1/relation/group/:id/member", wrapper.RemoveGroupMember)
	router.GET(options.BaseURL+"/api/v1/relation/group/:id/member", wrapper.ListGroupMember)
	router.PUT(options.BaseURL+"/api/v1/relation/group/:id/remark", wrapper.SetGroupRemark)
	router.POST(options.BaseURL+"/api/v1/relation/group/:id/request", wrapper.AddGroupRequest)
	router.POST(options.BaseURL+"/api/v1/relation/group/:id/silent", wrapper.SetGroupSilent)
	router.GET(options.BaseURL+"/api/v1/relation/user/blacklist", wrapper.Blacklist)
	router.POST(options.BaseURL+"/api/v1/relation/user/blacklist", wrapper.AddBlacklist)
	router.DELETE(options.BaseURL+"/api/v1/relation/user/blacklist/:id", wrapper.DeleteBlacklist)
	router.GET(options.BaseURL+"/api/v1/relation/user/friend", wrapper.ListFriend)
	router.POST(options.BaseURL+"/api/v1/relation/user/friend", wrapper.AddFriend)
	router.DELETE(options.BaseURL+"/api/v1/relation/user/friend/:id", wrapper.DeleteFriend)
	router.POST(options.BaseURL+"/api/v1/relation/user/friend/:id/burn", wrapper.SetUserBurn)
	router.POST(options.BaseURL+"/api/v1/relation/user/friend/:id/remark", wrapper.SetUserRemark)
	router.POST(options.BaseURL+"/api/v1/relation/user/friend/:id/silent", wrapper.SetUserSilent)
	router.GET(options.BaseURL+"/api/v1/relation/user/friend_request", wrapper.ListFriendRequest)
	router.DELETE(options.BaseURL+"/api/v1/relation/user/friend_request/:id", wrapper.DeleteFriendRequest)
	router.PUT(options.BaseURL+"/api/v1/relation/user/friend_request/:id", wrapper.ManageFriendRequest)
	router.POST(options.BaseURL+"/api/v1/relation/user/:id/e2e_key", wrapper.ExchangeE2EKey)
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"/45OMQ4rcgAA",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
