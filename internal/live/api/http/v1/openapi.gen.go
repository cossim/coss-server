// Package v1 provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen/v2 version v2.1.0 DO NOT EDIT.
package v1

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/gin-gonic/gin"
	"github.com/oapi-codegen/runtime"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// 创建通话
	// (POST /api/v1/live)
	CreateRoom(c *gin.Context)
	// 获取群聊当前通话房间信息
	// (GET /api/v1/live/group/{groupId})
	GetGroupRoom(c *gin.Context, groupId uint32)
	// 获取用户当前通话房间信息
	// (GET /api/v1/live/user)
	GetUserRoom(c *gin.Context)
	// 删除通话
	// (DELETE /api/v1/live/{id})
	DeleteRoom(c *gin.Context, id string)
	// 获取通话房间信息
	// (GET /api/v1/live/{id})
	GetRoom(c *gin.Context, id string)
	// 加入通话
	// (POST /api/v1/live/{id}/join)
	JoinRoom(c *gin.Context, id string)
	// 拒绝通话
	// (POST /api/v1/live/{id}/reject)
	RejectRoom(c *gin.Context, id string)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
	ErrorHandler       func(*gin.Context, error, int)
}

type MiddlewareFunc func(c *gin.Context)

// CreateRoom operation middleware
func (siw *ServerInterfaceWrapper) CreateRoom(c *gin.Context) {

	c.Set(BearerAuthScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.CreateRoom(c)
}

// GetGroupRoom operation middleware
func (siw *ServerInterfaceWrapper) GetGroupRoom(c *gin.Context) {

	var err error

	// ------------- Path parameter "groupId" -------------
	var groupId uint32

	err = runtime.BindStyledParameterWithOptions("simple", "groupId", c.Param("groupId"), &groupId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter groupId: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(BearerAuthScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetGroupRoom(c, groupId)
}

// GetUserRoom operation middleware
func (siw *ServerInterfaceWrapper) GetUserRoom(c *gin.Context) {

	c.Set(BearerAuthScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetUserRoom(c)
}

// DeleteRoom operation middleware
func (siw *ServerInterfaceWrapper) DeleteRoom(c *gin.Context) {

	var err error

	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithOptions("simple", "id", c.Param("id"), &id, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter id: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(BearerAuthScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.DeleteRoom(c, id)
}

// GetRoom operation middleware
func (siw *ServerInterfaceWrapper) GetRoom(c *gin.Context) {

	var err error

	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithOptions("simple", "id", c.Param("id"), &id, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter id: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(BearerAuthScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetRoom(c, id)
}

// JoinRoom operation middleware
func (siw *ServerInterfaceWrapper) JoinRoom(c *gin.Context) {

	var err error

	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithOptions("simple", "id", c.Param("id"), &id, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter id: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(BearerAuthScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.JoinRoom(c, id)
}

// RejectRoom operation middleware
func (siw *ServerInterfaceWrapper) RejectRoom(c *gin.Context) {

	var err error

	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithOptions("simple", "id", c.Param("id"), &id, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter id: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(BearerAuthScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.RejectRoom(c, id)
}

// GinServerOptions provides options for the Gin server.
type GinServerOptions struct {
	BaseURL      string
	Middlewares  []MiddlewareFunc
	ErrorHandler func(*gin.Context, error, int)
}

// RegisterHandlers creates http.Handler with routing matching OpenAPI spec.
func RegisterHandlers(router gin.IRouter, si ServerInterface) {
	RegisterHandlersWithOptions(router, si, GinServerOptions{})
}

// RegisterHandlersWithOptions creates http.Handler with additional options
func RegisterHandlersWithOptions(router gin.IRouter, si ServerInterface, options GinServerOptions) {
	errorHandler := options.ErrorHandler
	if errorHandler == nil {
		errorHandler = func(c *gin.Context, err error, statusCode int) {
			c.JSON(statusCode, gin.H{"msg": err.Error()})
		}
	}

	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
		ErrorHandler:       errorHandler,
	}

	router.POST(options.BaseURL+"/api/v1/live", wrapper.CreateRoom)
	router.GET(options.BaseURL+"/api/v1/live/group/:groupId", wrapper.GetGroupRoom)
	router.GET(options.BaseURL+"/api/v1/live/user", wrapper.GetUserRoom)
	router.DELETE(options.BaseURL+"/api/v1/live/:id", wrapper.DeleteRoom)
	router.GET(options.BaseURL+"/api/v1/live/:id", wrapper.GetRoom)
	router.POST(options.BaseURL+"/api/v1/live/:id/join", wrapper.JoinRoom)
	router.POST(options.BaseURL+"/api/v1/live/:id/reject", wrapper.RejectRoom)
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/9xYXW8TRxf+K6vzvpcbHKBUle9aEMjcUIVWXCDLGu8exwO7O8vMbCCyVgqIqmkQpSr9",
	"gkILEq24qQJVpUhEwJ9h7eRfVDOzdtbe9Uecdb+uEu/snjnneZ5z5pzpgMP8kAUYSAHVDginjT7R/57m",
	"SCSuMOav4LUIhVQPQ85C5JKifmWVsyhsUFf976JwOA0lZQFUoffmWW/3du0M2NBi3CcSqhDRQJ48ATbI",
	"9RChCjSQuIocbLixtMqW1NMlcZWGS0xbId5SyNQ7HKqSRxjbQFt5H4yxDmAQ+VC9bHyCehzHNvjoN9Xn",
	"o97VzlisZck2WpFAbl1vM+s69TyLo4N0DfWKQzwPbKAS/cw+ICSnwSoo4+RGzSyeOHXKBp8G6c/jgwgJ",
	"52R91vjUa8xX+4VyHaot4gkVM0ud7sD/ObagCv+rHFBWSfmqKJoumDdjG2Qb9Rccr0WUozvARXFVj+0B",
	"aMOw7G883Nt+3Hu5m/x0B+wBogojsPvA2oA3iB96Kr50ZRiaWemM7SH/tJEBZfWBVda8go5UUWUFKUIW",
	"CMyrgTPm5wPrbr7d//4Prca5fB1DTcS9/F7Xsbkine6ju8nW0+TB8+TRi+TxRqkbxwXYnGc0mJiqh5fR",
	"5G3GESDZVaO9YVSSrSfJZ7+kAnt427z1n2XjY8IldWhIAlkLWiyPEnUxkFQZGXX4U1WQAupcDYiPJSNE",
	"RSOMmh4V7aKieKmNso1cF7/wIACLClMPVfaxTLo3GfOQBEf06QqjAboNIvMOKbFZkmoYBocIDeT77819",
	"hoxxQmOdq/FHsykkkQU1VmWPdVESGYmRsD4oN6oiXWbTNr+Yls5hpboRJ/3KsVgSMprTKdI/eCfVq9FE",
	"i0s9evuHScmy4DKV+2Lx7J/xZXq/Rl1kDdUaNTg6jLuNtOrO3QIUyvDC4LAaFiOJXMoaGJCmh+6ECsYs",
	"846lPyi7ZDnMRSe/+2n9uNyK3eLExwYvrCRn1Zql14YLSdlC4iiYF/UZGSlnB2v2ApR2CKr1B+VSnZPn",
	"EY0JdCJO5fpFVb2MoptIOPIPI9k++HW2z+X5S5+AbUYyHZJePQixLWUIes6haZMhqdR9ucOEoL7lqVmG",
	"hBRsWEMuDHLHjy0fWwY9WGCgFqtwUj9SFVi2tVcVEtLK2vGKMqCzkImC8znZ/DHZfWV6OtD2zFFRc1U2",
	"DJp1MH0+CvkRc3XH47BAoqnyJAw96ujPKleEUZgp7tNKf3481VAMu7i3vdN9eevd6/vJvVvdb19AduRI",
	"Z0qenok68BPLywtxMD12CzzMgtjd/CrZ+hmyUoHq5WGRXK7HdRtE5PuEr+dJkGRVqGlKM1dXlrJcVvQM",
	"V+noPzU31jM8FlC79+VOcu+73ptneze3ktf3ky/u9j1Ug9S7t0+7N7dzlJ9DeU4ZTkkPiSpQErnQQYy9",
	"H6Dqt5Ie9BsxSP3L0WVnoJ96rRAroBbGrg6ySHFjkDOYzcPwjFxMYV6P6lPo/uZ5d3PnMHSrYWWQ4n8P",
	"0Dmfjwz0NBSmAN2hJq9c9LDo2Db29zc2ks9fZXfJ4XtGG5glmfZ+vWns9R7ezro8Lr3o5Mwauekal0aj",
	"VywKcONGGtAh69iT/QfPxtUxe5JuZ9PqPxfIvyBNykmNedOhoob8CX2EvhtKdn5PfvshefR8BPscl/07",
	"qBnINJYXSGb5bc3oRd4MTc0im5jchV+BP0ZQ2Ru+Q6Z+9svZBMVR9+NjJdW983Vv9/GI4WEZrWgTMwrJ",
	"2PsXVoWptJnI5qFt6Ms8bXH8ZwAAAP//DVTHHlwaAAA=",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
