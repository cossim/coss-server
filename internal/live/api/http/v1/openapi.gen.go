// Package v1 provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen/v2 version v2.1.0 DO NOT EDIT.
package v1

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/gin-gonic/gin"
	"github.com/oapi-codegen/runtime"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// 创建通话
	// (POST /api/v1/live)
	CreateRoom(c *gin.Context)
	// 获取群聊当前通话房间信息
	// (GET /api/v1/live/group/{groupId})
	GetGroupRoom(c *gin.Context, groupId uint32)
	// 获取用户当前通话房间信息
	// (GET /api/v1/live/user)
	GetUserRoom(c *gin.Context)
	// 删除通话
	// (DELETE /api/v1/live/{id})
	DeleteRoom(c *gin.Context, id string)
	// 获取通话房间信息
	// (GET /api/v1/live/{id})
	GetRoom(c *gin.Context, id string)
	// 加入通话
	// (POST /api/v1/live/{id}/join)
	JoinRoom(c *gin.Context, id string)
	// 拒绝通话
	// (POST /api/v1/live/{id}/reject)
	RejectRoom(c *gin.Context, id string)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
	ErrorHandler       func(*gin.Context, error, int)
}

type MiddlewareFunc func(c *gin.Context)

// CreateRoom operation middleware
func (siw *ServerInterfaceWrapper) CreateRoom(c *gin.Context) {

	c.Set(BearerAuthScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.CreateRoom(c)
}

// GetGroupRoom operation middleware
func (siw *ServerInterfaceWrapper) GetGroupRoom(c *gin.Context) {

	var err error

	// ------------- Path parameter "groupId" -------------
	var groupId uint32

	err = runtime.BindStyledParameterWithOptions("simple", "groupId", c.Param("groupId"), &groupId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter groupId: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(BearerAuthScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetGroupRoom(c, groupId)
}

// GetUserRoom operation middleware
func (siw *ServerInterfaceWrapper) GetUserRoom(c *gin.Context) {

	c.Set(BearerAuthScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetUserRoom(c)
}

// DeleteRoom operation middleware
func (siw *ServerInterfaceWrapper) DeleteRoom(c *gin.Context) {

	var err error

	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithOptions("simple", "id", c.Param("id"), &id, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter id: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(BearerAuthScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.DeleteRoom(c, id)
}

// GetRoom operation middleware
func (siw *ServerInterfaceWrapper) GetRoom(c *gin.Context) {

	var err error

	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithOptions("simple", "id", c.Param("id"), &id, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter id: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(BearerAuthScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetRoom(c, id)
}

// JoinRoom operation middleware
func (siw *ServerInterfaceWrapper) JoinRoom(c *gin.Context) {

	var err error

	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithOptions("simple", "id", c.Param("id"), &id, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter id: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(BearerAuthScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.JoinRoom(c, id)
}

// RejectRoom operation middleware
func (siw *ServerInterfaceWrapper) RejectRoom(c *gin.Context) {

	var err error

	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithOptions("simple", "id", c.Param("id"), &id, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter id: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(BearerAuthScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.RejectRoom(c, id)
}

// GinServerOptions provides options for the Gin server.
type GinServerOptions struct {
	BaseURL      string
	Middlewares  []MiddlewareFunc
	ErrorHandler func(*gin.Context, error, int)
}

// RegisterHandlers creates http.Handler with routing matching OpenAPI spec.
func RegisterHandlers(router gin.IRouter, si ServerInterface) {
	RegisterHandlersWithOptions(router, si, GinServerOptions{})
}

// RegisterHandlersWithOptions creates http.Handler with additional options
func RegisterHandlersWithOptions(router gin.IRouter, si ServerInterface, options GinServerOptions) {
	errorHandler := options.ErrorHandler
	if errorHandler == nil {
		errorHandler = func(c *gin.Context, err error, statusCode int) {
			c.JSON(statusCode, gin.H{"msg": err.Error()})
		}
	}

	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
		ErrorHandler:       errorHandler,
	}

	router.POST(options.BaseURL+"/api/v1/live", wrapper.CreateRoom)
	router.GET(options.BaseURL+"/api/v1/live/group/:groupId", wrapper.GetGroupRoom)
	router.GET(options.BaseURL+"/api/v1/live/user", wrapper.GetUserRoom)
	router.DELETE(options.BaseURL+"/api/v1/live/:id", wrapper.DeleteRoom)
	router.GET(options.BaseURL+"/api/v1/live/:id", wrapper.GetRoom)
	router.POST(options.BaseURL+"/api/v1/live/:id/join", wrapper.JoinRoom)
	router.POST(options.BaseURL+"/api/v1/live/:id/reject", wrapper.RejectRoom)
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/9RY32/UxhP/V6z5fh9ayeEClKq6txYECi9UoRUPKDrt2XO5BdtrdteBKLIUEKhpUEpV",
	"SlNSaEGiFS8VUCEikQL/THxJnvovVLvru/jOvh+5+Fr6lJzXO575fD4zO7NL4DA/ZAEGUkB1CYTTRJ/o",
	"f09yJBJnGfNn8UqEQqqHIWchcklRvzLPWRTWqKv+d1E4nIaSsgCqsPP2yc7WzZlTYEODcZ9IqEJEA3n8",
	"GNggF0OEKtBA4jxysOHa1DybUk+nxGUaTjFthXhTIVPvcKhKHmFsA23kfTDGlgCDyIfqReMTzMVxbIOP",
	"fl1t7/Vu5pTFGpZsohUJ5NbVJrOuUs+zODpIF1CvOMTzwAYq0c98B4TkNJgHZZxcmzGLx06csMGnQfrz",
	"aCdCwjlZHDU+9Rrz1fdCuQjVBvGEipmlTi/B/zk2oAr/q+xTVkn5qiiazpk3YxtkE/UOjlciytHt4KK4",
	"movtDmjdsOwtb+w+e7jzYiv5+TbYHUQVRmC3gbUBrxE/9FR86Uo3NKPSGdtd/mkjHcrmOlZZ/RI6UkWV",
	"FaQIWSAwrwbOmJ8PrLXybm/9pVbjWL72oUZSH1kk+wG5++pWa/1Va/3V3vrLD5K1e9tv1v76c0N8mM0J",
	"GsixE6KPVxH38h5dxfqsdFoP1pLVx8n9p8mD58nD5VLhiAsYO8toMLCAHFzcgz/TTxaSXTYZ0Y1Ksvoo",
	"ufVrKvuNm+atcjXyHrHxOeGSOjQkgZwJGiyPEnUxkFQZ6XX4S1UmA+pcDoiPJSNERS2M6h4VzaJSfaGJ",
	"solcl+RwPwCLClOlVU1gmSJUZ8xDEhzSp0uMBujWSEFuK7FZKvN70vjjj8pOZI117uQ5nE0hiSyo/Cp7",
	"rPOSyEj0hPVJuVEV6TKbtvnFtKB3K9WNOGlXjsmSkNGcTpF2OzCoXvUmWlxqQ9A+4kqWBZep3CeLZ7vz",
	"KNP7Beoiq6mGrcbRYdytpVV37MakUIbnOodVtxhJ5FJWw4DUPXQHVDBmmXcsvaHskuUwF53810/qx+VW",
	"7AYnPtZ4YSU5rdYsvTbZNoejYF7UZqSnnO2v2RNQ2gGo1hvKpTonz0MaE+hEnMrF86p6GUXXkXDkn0ay",
	"uf/rdJvLsxe+ANsMijokvbofYlPKEPT0RdMmQ1KppwWHCUF9y1MTFgkp2LCAXBjkjh6ZPjINetzBQC1W",
	"4bh+pCqwbGqvKiSklYWjFWVAZyETBedzsvJTsvXa9HSg7ZmjYsZV2dAZIcBMHyjkZ8zVHY/DAommypMw",
	"9Kijt1UuCaMwU9yHlf780Kyh6HZx99lm68WN7Td3kzs3WveeQ3YQSiddnp6JOvBj09MTcTA9dgs8zILY",
	"Wvk2Wf0FslKB6sVukVyci+dsEJHvE76YJ0GSeaFmPM3cnLKU5bKiJ8vKkv4z48b6ZgELqN39ZjO588PO",
	"2ye711eTN3eTr9faHqrxbvvd49b1ZznKz6A8owynpIdEFSiJXOgg+t5aUPVbSQ/ajRik/uXosjPQD73s",
	"iBVQE2NXB1mkuD7IGczGYXhELoYwry8QhtD9/dPWyuZB6FbDSifF/x2gcz4fGuhhKAwBeomavHLRw6Jj",
	"29jfW15Ovnqd/UoO31PawCjJtPvbdWNvZ+Nm1uV+6UUHZ1bP/Vu/NOq9+FGAGzfSgA5Yxx7t3X/Sr47Z",
	"g3Q7mlbfXyD/gTQpJzXGTYeKGvIH9BH6bijZ/CP5/cfkwdMe7HNctu+gRiDTWJ4gmeW3Nb0XeSM0NZNs",
	"YnIXfgX+GEFlb/gOmPrZnaMJiqPux/tKqnX7u52thz2Gu2U0q02MKCRj7z9YFYbSZiIbh7aunXna4vjv",
	"AAAA//8zcJD48hoAAA==",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
