// Package v1 provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.16.2 DO NOT EDIT.
package v1

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/gin-gonic/gin"
	"github.com/oapi-codegen/runtime"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// 获取指定对话中延迟的消息
	// (POST /api/v1/msg/dialog/after)
	GetAfterMsgs(c *gin.Context)
	// 获取群组标记消息列表
	// (GET /api/v1/msg/dialog/group/{dialog_id}/label)
	GetGroupLabelMsgList(c *gin.Context, dialogId int)
	// 获取用户对话列表
	// (GET /api/v1/msg/dialog/list)
	GetUserDialogList(c *gin.Context, params GetUserDialogListParams)
	// 获取用户标记消息列表
	// (GET /api/v1/msg/dialog/user/{dialog_id}/label)
	GetUserLabelMsgList(c *gin.Context, dialogId int)
	// 获取群组消息列表
	// (GET /api/v1/msg/group/list)
	GetGroupMsgList(c *gin.Context, params GetGroupMsgListParams)
	// 设置群组消息已读
	// (PUT /api/v1/msg/group/read)
	GroupMessageRead(c *gin.Context)
	// 发送群组消息
	// (POST /api/v1/msg/group/send)
	SendGroupMsg(c *gin.Context)
	// 撤回群组消息
	// (DELETE /api/v1/msg/group/{id})
	RecallGroupMsg(c *gin.Context, id int)
	// 编辑群组消息
	// (PUT /api/v1/msg/group/{id})
	EditGroupMsg(c *gin.Context, id int)
	// 标记群组消息
	// (POST /api/v1/msg/group/{id}/label)
	LabelGroupMsg(c *gin.Context, id int)
	// 获取群组消息阅读者
	// (GET /api/v1/msg/group/{id}/read)
	GetGroupMessageReaders(c *gin.Context, id int, params GetGroupMessageReadersParams)
	// 获取私信列表
	// (GET /api/v1/msg/user/list)
	GetUserMsgList(c *gin.Context, params GetUserMsgListParams)
	// 设置用户消息已读
	// (PUT /api/v1/msg/user/read)
	ReadUserMsgs(c *gin.Context)
	// 发送私信
	// (POST /api/v1/msg/user/send)
	SendUserMsg(c *gin.Context)
	// 撤回用户消息
	// (DELETE /api/v1/msg/user/{id})
	RecallUserMsg(c *gin.Context, id int)
	// 编辑用户消息
	// (PUT /api/v1/msg/user/{id})
	EditUserMsg(c *gin.Context, id int)
	// 标记用户消息
	// (POST /api/v1/msg/user/{id}/label)
	LabelUserMsg(c *gin.Context, id int)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
	ErrorHandler       func(*gin.Context, error, int)
}

type MiddlewareFunc func(c *gin.Context)

// GetAfterMsgs operation middleware
func (siw *ServerInterfaceWrapper) GetAfterMsgs(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetAfterMsgs(c)
}

// GetGroupLabelMsgList operation middleware
func (siw *ServerInterfaceWrapper) GetGroupLabelMsgList(c *gin.Context) {

	var err error

	// ------------- Path parameter "dialog_id" -------------
	var dialogId int

	err = runtime.BindStyledParameter("simple", false, "dialog_id", c.Param("dialog_id"), &dialogId)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter dialog_id: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetGroupLabelMsgList(c, dialogId)
}

// GetUserDialogList operation middleware
func (siw *ServerInterfaceWrapper) GetUserDialogList(c *gin.Context) {

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetUserDialogListParams

	// ------------- Required query parameter "page_num" -------------

	if paramValue := c.Query("page_num"); paramValue != "" {

	} else {
		siw.ErrorHandler(c, fmt.Errorf("Query argument page_num is required, but not found"), http.StatusBadRequest)
		return
	}

	err = runtime.BindQueryParameter("form", true, true, "page_num", c.Request.URL.Query(), &params.PageNum)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter page_num: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Required query parameter "page_size" -------------

	if paramValue := c.Query("page_size"); paramValue != "" {

	} else {
		siw.ErrorHandler(c, fmt.Errorf("Query argument page_size is required, but not found"), http.StatusBadRequest)
		return
	}

	err = runtime.BindQueryParameter("form", true, true, "page_size", c.Request.URL.Query(), &params.PageSize)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter page_size: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetUserDialogList(c, params)
}

// GetUserLabelMsgList operation middleware
func (siw *ServerInterfaceWrapper) GetUserLabelMsgList(c *gin.Context) {

	var err error

	// ------------- Path parameter "dialog_id" -------------
	var dialogId int

	err = runtime.BindStyledParameter("simple", false, "dialog_id", c.Param("dialog_id"), &dialogId)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter dialog_id: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetUserLabelMsgList(c, dialogId)
}

// GetGroupMsgList operation middleware
func (siw *ServerInterfaceWrapper) GetGroupMsgList(c *gin.Context) {

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetGroupMsgListParams

	// ------------- Required query parameter "dialog_id" -------------

	if paramValue := c.Query("dialog_id"); paramValue != "" {

	} else {
		siw.ErrorHandler(c, fmt.Errorf("Query argument dialog_id is required, but not found"), http.StatusBadRequest)
		return
	}

	err = runtime.BindQueryParameter("form", true, true, "dialog_id", c.Request.URL.Query(), &params.DialogId)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter dialog_id: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "msg_id" -------------

	err = runtime.BindQueryParameter("form", true, false, "msg_id", c.Request.URL.Query(), &params.MsgId)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter msg_id: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "user_id" -------------

	err = runtime.BindQueryParameter("form", true, false, "user_id", c.Request.URL.Query(), &params.UserId)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter user_id: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "type" -------------

	err = runtime.BindQueryParameter("form", true, false, "type", c.Request.URL.Query(), &params.Type)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter type: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "content" -------------

	err = runtime.BindQueryParameter("form", true, false, "content", c.Request.URL.Query(), &params.Content)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter content: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Required query parameter "page_num" -------------

	if paramValue := c.Query("page_num"); paramValue != "" {

	} else {
		siw.ErrorHandler(c, fmt.Errorf("Query argument page_num is required, but not found"), http.StatusBadRequest)
		return
	}

	err = runtime.BindQueryParameter("form", true, true, "page_num", c.Request.URL.Query(), &params.PageNum)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter page_num: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Required query parameter "page_size" -------------

	if paramValue := c.Query("page_size"); paramValue != "" {

	} else {
		siw.ErrorHandler(c, fmt.Errorf("Query argument page_size is required, but not found"), http.StatusBadRequest)
		return
	}

	err = runtime.BindQueryParameter("form", true, true, "page_size", c.Request.URL.Query(), &params.PageSize)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter page_size: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetGroupMsgList(c, params)
}

// GroupMessageRead operation middleware
func (siw *ServerInterfaceWrapper) GroupMessageRead(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GroupMessageRead(c)
}

// SendGroupMsg operation middleware
func (siw *ServerInterfaceWrapper) SendGroupMsg(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.SendGroupMsg(c)
}

// RecallGroupMsg operation middleware
func (siw *ServerInterfaceWrapper) RecallGroupMsg(c *gin.Context) {

	var err error

	// ------------- Path parameter "id" -------------
	var id int

	err = runtime.BindStyledParameter("simple", false, "id", c.Param("id"), &id)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter id: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.RecallGroupMsg(c, id)
}

// EditGroupMsg operation middleware
func (siw *ServerInterfaceWrapper) EditGroupMsg(c *gin.Context) {

	var err error

	// ------------- Path parameter "id" -------------
	var id int

	err = runtime.BindStyledParameter("simple", false, "id", c.Param("id"), &id)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter id: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.EditGroupMsg(c, id)
}

// LabelGroupMsg operation middleware
func (siw *ServerInterfaceWrapper) LabelGroupMsg(c *gin.Context) {

	var err error

	// ------------- Path parameter "id" -------------
	var id int

	err = runtime.BindStyledParameter("simple", false, "id", c.Param("id"), &id)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter id: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.LabelGroupMsg(c, id)
}

// GetGroupMessageReaders operation middleware
func (siw *ServerInterfaceWrapper) GetGroupMessageReaders(c *gin.Context) {

	var err error

	// ------------- Path parameter "id" -------------
	var id int

	err = runtime.BindStyledParameter("simple", false, "id", c.Param("id"), &id)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter id: %w", err), http.StatusBadRequest)
		return
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params GetGroupMessageReadersParams

	// ------------- Required query parameter "dialog_id" -------------

	if paramValue := c.Query("dialog_id"); paramValue != "" {

	} else {
		siw.ErrorHandler(c, fmt.Errorf("Query argument dialog_id is required, but not found"), http.StatusBadRequest)
		return
	}

	err = runtime.BindQueryParameter("form", true, true, "dialog_id", c.Request.URL.Query(), &params.DialogId)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter dialog_id: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Required query parameter "group_id" -------------

	if paramValue := c.Query("group_id"); paramValue != "" {

	} else {
		siw.ErrorHandler(c, fmt.Errorf("Query argument group_id is required, but not found"), http.StatusBadRequest)
		return
	}

	err = runtime.BindQueryParameter("form", true, true, "group_id", c.Request.URL.Query(), &params.GroupId)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter group_id: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetGroupMessageReaders(c, id, params)
}

// GetUserMsgList operation middleware
func (siw *ServerInterfaceWrapper) GetUserMsgList(c *gin.Context) {

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetUserMsgListParams

	// ------------- Required query parameter "dialog_id" -------------

	if paramValue := c.Query("dialog_id"); paramValue != "" {

	} else {
		siw.ErrorHandler(c, fmt.Errorf("Query argument dialog_id is required, but not found"), http.StatusBadRequest)
		return
	}

	err = runtime.BindQueryParameter("form", true, true, "dialog_id", c.Request.URL.Query(), &params.DialogId)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter dialog_id: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "type" -------------

	err = runtime.BindQueryParameter("form", true, false, "type", c.Request.URL.Query(), &params.Type)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter type: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "user_id" -------------

	err = runtime.BindQueryParameter("form", true, false, "user_id", c.Request.URL.Query(), &params.UserId)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter user_id: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "content" -------------

	err = runtime.BindQueryParameter("form", true, false, "content", c.Request.URL.Query(), &params.Content)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter content: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "msg_id" -------------

	err = runtime.BindQueryParameter("form", true, false, "msg_id", c.Request.URL.Query(), &params.MsgId)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter msg_id: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Required query parameter "page_num" -------------

	if paramValue := c.Query("page_num"); paramValue != "" {

	} else {
		siw.ErrorHandler(c, fmt.Errorf("Query argument page_num is required, but not found"), http.StatusBadRequest)
		return
	}

	err = runtime.BindQueryParameter("form", true, true, "page_num", c.Request.URL.Query(), &params.PageNum)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter page_num: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Required query parameter "page_size" -------------

	if paramValue := c.Query("page_size"); paramValue != "" {

	} else {
		siw.ErrorHandler(c, fmt.Errorf("Query argument page_size is required, but not found"), http.StatusBadRequest)
		return
	}

	err = runtime.BindQueryParameter("form", true, true, "page_size", c.Request.URL.Query(), &params.PageSize)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter page_size: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "start_at" -------------

	err = runtime.BindQueryParameter("form", true, false, "start_at", c.Request.URL.Query(), &params.StartAt)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter start_at: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Required query parameter "end_at" -------------

	if paramValue := c.Query("end_at"); paramValue != "" {

	} else {
		siw.ErrorHandler(c, fmt.Errorf("Query argument end_at is required, but not found"), http.StatusBadRequest)
		return
	}

	err = runtime.BindQueryParameter("form", true, true, "end_at", c.Request.URL.Query(), &params.EndAt)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter end_at: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetUserMsgList(c, params)
}

// ReadUserMsgs operation middleware
func (siw *ServerInterfaceWrapper) ReadUserMsgs(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.ReadUserMsgs(c)
}

// SendUserMsg operation middleware
func (siw *ServerInterfaceWrapper) SendUserMsg(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.SendUserMsg(c)
}

// RecallUserMsg operation middleware
func (siw *ServerInterfaceWrapper) RecallUserMsg(c *gin.Context) {

	var err error

	// ------------- Path parameter "id" -------------
	var id int

	err = runtime.BindStyledParameter("simple", false, "id", c.Param("id"), &id)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter id: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.RecallUserMsg(c, id)
}

// EditUserMsg operation middleware
func (siw *ServerInterfaceWrapper) EditUserMsg(c *gin.Context) {

	var err error

	// ------------- Path parameter "id" -------------
	var id int

	err = runtime.BindStyledParameter("simple", false, "id", c.Param("id"), &id)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter id: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.EditUserMsg(c, id)
}

// LabelUserMsg operation middleware
func (siw *ServerInterfaceWrapper) LabelUserMsg(c *gin.Context) {

	var err error

	// ------------- Path parameter "id" -------------
	var id int

	err = runtime.BindStyledParameter("simple", false, "id", c.Param("id"), &id)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter id: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.LabelUserMsg(c, id)
}

// GinServerOptions provides options for the Gin server.
type GinServerOptions struct {
	BaseURL      string
	Middlewares  []MiddlewareFunc
	ErrorHandler func(*gin.Context, error, int)
}

// RegisterHandlers creates http.Handler with routing matching OpenAPI spec.
func RegisterHandlers(router gin.IRouter, si ServerInterface) {
	RegisterHandlersWithOptions(router, si, GinServerOptions{})
}

// RegisterHandlersWithOptions creates http.Handler with additional options
func RegisterHandlersWithOptions(router gin.IRouter, si ServerInterface, options GinServerOptions) {
	errorHandler := options.ErrorHandler
	if errorHandler == nil {
		errorHandler = func(c *gin.Context, err error, statusCode int) {
			c.JSON(statusCode, gin.H{"msg": err.Error()})
		}
	}

	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
		ErrorHandler:       errorHandler,
	}

	router.POST(options.BaseURL+"/api/v1/msg/dialog/after", wrapper.GetAfterMsgs)
	router.GET(options.BaseURL+"/api/v1/msg/dialog/group/:dialog_id/label", wrapper.GetGroupLabelMsgList)
	router.GET(options.BaseURL+"/api/v1/msg/dialog/list", wrapper.GetUserDialogList)
	router.GET(options.BaseURL+"/api/v1/msg/dialog/user/:dialog_id/label", wrapper.GetUserLabelMsgList)
	router.GET(options.BaseURL+"/api/v1/msg/group/list", wrapper.GetGroupMsgList)
	router.PUT(options.BaseURL+"/api/v1/msg/group/read", wrapper.GroupMessageRead)
	router.POST(options.BaseURL+"/api/v1/msg/group/send", wrapper.SendGroupMsg)
	router.DELETE(options.BaseURL+"/api/v1/msg/group/:id", wrapper.RecallGroupMsg)
	router.PUT(options.BaseURL+"/api/v1/msg/group/:id", wrapper.EditGroupMsg)
	router.POST(options.BaseURL+"/api/v1/msg/group/:id/label", wrapper.LabelGroupMsg)
	router.GET(options.BaseURL+"/api/v1/msg/group/:id/read", wrapper.GetGroupMessageReaders)
	router.GET(options.BaseURL+"/api/v1/msg/user/list", wrapper.GetUserMsgList)
	router.PUT(options.BaseURL+"/api/v1/msg/user/read", wrapper.ReadUserMsgs)
	router.POST(options.BaseURL+"/api/v1/msg/user/send", wrapper.SendUserMsg)
	router.DELETE(options.BaseURL+"/api/v1/msg/user/:id", wrapper.RecallUserMsg)
	router.PUT(options.BaseURL+"/api/v1/msg/user/:id", wrapper.EditUserMsg)
	router.POST(options.BaseURL+"/api/v1/msg/user/:id/label", wrapper.LabelUserMsg)
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"fwEAAP//kA9vBzJMAAA=",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
