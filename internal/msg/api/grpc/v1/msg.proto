syntax = "proto3";
package msg_v1;
option go_package = "github.com/cossim/coss-server/internal/msg/api/grpc/v1";

message SendUserMsgRequest{
  // @inject_tag: json:"sender_id"
  string SenderId=1;
  // @inject_tag: json:"receiver_id"
  string ReceiverId=2;
  // @inject_tag: json:"content"
  string Content=3;
  // @inject_tag: json:"type"
  int32 Type=4;
  // @inject_tag: json:"reply_id"
  uint64 ReplyId=5;
  // @inject_tag: json:"dialog_id"
  uint32 DialogId = 6;
  // @inject_tag: json:"is_burn_after_reading"
  bool IsBurnAfterReadingType = 7;
  // @inject_tag: json:"sub_type"
  int32 SubType = 8;
}

enum ReadType {
  NotRead = 0;
  IsRead = 1;
}



//// 定义 UserMessageType 枚举类型
enum MessageType {
  Unknown = 0; // 未知
  Text = 1;        // 文本消息
  Voice = 2;       // 语音消息
  Image = 3;       // 图片消息
  Label = 4;       // 标注
  Notice = 5;      // 群公告
  File = 6;        // 文件消息
  Video = 7;       // 视频消息
  EmojiReply = 8;  // emoji回复
  VoiceCall = 9;   // 语音通话
  VideoCall = 10;  // 视频通话
  Delete = 11;     // 撤回消息
  CancelLabel = 12; // 取消标注
}
//
//// 通话消息的子类型
enum CallSubType {
  Normal = 0;      // 正常通话
  Cancelled = 1;   // 取消通话
  Rejected = 2;    // 拒绝通话
  Missed = 3;      // 未接通话
}
//
message SendUserMsgResponse{
  // @inject_tag: json:"msg_id" form:"msg_id" uri:"msg_id"
  uint32 MsgId = 1;
}

message SendMultiUserMsgRequest{
  // @inject_tag: json:"msg_list"
  repeated SendUserMsgRequest MsgList = 1;
}

message SendMultiUserMsgResponse{

}

message  DeleteUserMsgByDialogIdRequest {
  // @inject_tag: json:"dialog_id"
  uint32 DialogId = 1;
}

message  DeleteUserMsgByDialogIdResponse {

}

message DeleteUserMsgByIDRequest{
  // @inject_tag: json:"id"
  uint32 ID = 1;
  // @inject_tag: json:"is_physical"
  bool IsPhysical = 2;
}
//
message DeleteUserMsgByIDResponse{

}
//
message DeleteUserMessageByIdsRequest {
  // @inject_tag: json:"ids"
  repeated uint32 IDs = 1;
  // @inject_tag: json:"is_physical"
  bool IsPhysical = 2;
}

service MsgService {
  //发送私聊消息
  rpc SendUserMessage(SendUserMsgRequest) returns(SendUserMsgResponse);
  //群发私聊消息
  rpc SendMultiUserMessage(SendMultiUserMsgRequest) returns(SendMultiUserMsgResponse);

//  //确认根据对话id删除私聊消息
  rpc ConfirmDeleteUserMessageByDialogId(DeleteUserMsgByDialogIdRequest) returns (DeleteUserMsgByDialogIdResponse);

//  //根据消息id删除私聊消息
  rpc DeleteUserMessageById(DeleteUserMsgByIDRequest) returns (DeleteUserMsgByIDResponse);
  //根据消息ids删除私聊消息
  rpc DeleteUserMessageByIDs(DeleteUserMessageByIdsRequest) returns (DeleteUserMsgByIDResponse);
}