// Package v1 provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.16.2 DO NOT EDIT.
package v1

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/gin-gonic/gin"
	"github.com/oapi-codegen/runtime"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// 上传文件
	// (POST /api/v1/storage/files)
	Upload(c *gin.Context)
	// 下载文件
	// (GET /api/v1/storage/files/download/{type}/{id})
	Download(c *gin.Context, pType string, id string)
	// 清除文件分片(用于中断上传)
	// (POST /api/v1/storage/files/multipart/abort)
	AbortUploadMultipart(c *gin.Context)
	// 完成分片上传
	// (POST /api/v1/storage/files/multipart/complete)
	CompleteUploadMultipart(c *gin.Context)
	// 生成分片上传id
	// (GET /api/v1/storage/files/multipart/key)
	GetMultipartKey(c *gin.Context, params GetMultipartKeyParams)
	// 上传分片
	// (POST /api/v1/storage/files/multipart/upload)
	UploadMultipart(c *gin.Context)
	// 删除文件
	// (DELETE /api/v1/storage/files/{id})
	DeleteFile(c *gin.Context, id string)
	// 获取文件信息
	// (GET /api/v1/storage/files/{id})
	GetFileInfo(c *gin.Context, id string)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
	ErrorHandler       func(*gin.Context, error, int)
}

type MiddlewareFunc func(c *gin.Context)

// Upload operation middleware
func (siw *ServerInterfaceWrapper) Upload(c *gin.Context) {

	c.Set(BearerAuthScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.Upload(c)
}

// Download operation middleware
func (siw *ServerInterfaceWrapper) Download(c *gin.Context) {

	var err error

	// ------------- Path parameter "type" -------------
	var pType string

	err = runtime.BindStyledParameter("simple", false, "type", c.Param("type"), &pType)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter type: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameter("simple", false, "id", c.Param("id"), &id)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter id: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.Download(c, pType, id)
}

// AbortUploadMultipart operation middleware
func (siw *ServerInterfaceWrapper) AbortUploadMultipart(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.AbortUploadMultipart(c)
}

// CompleteUploadMultipart operation middleware
func (siw *ServerInterfaceWrapper) CompleteUploadMultipart(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.CompleteUploadMultipart(c)
}

// GetMultipartKey operation middleware
func (siw *ServerInterfaceWrapper) GetMultipartKey(c *gin.Context) {

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetMultipartKeyParams

	// ------------- Required query parameter "file_name" -------------

	if paramValue := c.Query("file_name"); paramValue != "" {

	} else {
		siw.ErrorHandler(c, fmt.Errorf("Query argument file_name is required, but not found"), http.StatusBadRequest)
		return
	}

	err = runtime.BindQueryParameter("form", true, true, "file_name", c.Request.URL.Query(), &params.FileName)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter file_name: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "type" -------------

	err = runtime.BindQueryParameter("form", true, false, "type", c.Request.URL.Query(), &params.Type)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter type: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetMultipartKey(c, params)
}

// UploadMultipart operation middleware
func (siw *ServerInterfaceWrapper) UploadMultipart(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.UploadMultipart(c)
}

// DeleteFile operation middleware
func (siw *ServerInterfaceWrapper) DeleteFile(c *gin.Context) {

	var err error

	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameter("simple", false, "id", c.Param("id"), &id)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter id: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.DeleteFile(c, id)
}

// GetFileInfo operation middleware
func (siw *ServerInterfaceWrapper) GetFileInfo(c *gin.Context) {

	var err error

	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameter("simple", false, "id", c.Param("id"), &id)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter id: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetFileInfo(c, id)
}

// GinServerOptions provides options for the Gin server.
type GinServerOptions struct {
	BaseURL      string
	Middlewares  []MiddlewareFunc
	ErrorHandler func(*gin.Context, error, int)
}

// RegisterHandlers creates http.Handler with routing matching OpenAPI spec.
func RegisterHandlers(router gin.IRouter, si ServerInterface) {
	RegisterHandlersWithOptions(router, si, GinServerOptions{})
}

// RegisterHandlersWithOptions creates http.Handler with additional options
func RegisterHandlersWithOptions(router gin.IRouter, si ServerInterface, options GinServerOptions) {
	errorHandler := options.ErrorHandler
	if errorHandler == nil {
		errorHandler = func(c *gin.Context, err error, statusCode int) {
			c.JSON(statusCode, gin.H{"msg": err.Error()})
		}
	}

	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
		ErrorHandler:       errorHandler,
	}

	router.POST(options.BaseURL+"/api/v1/storage/files", wrapper.Upload)
	router.GET(options.BaseURL+"/api/v1/storage/files/download/:type/:id", wrapper.Download)
	router.POST(options.BaseURL+"/api/v1/storage/files/multipart/abort", wrapper.AbortUploadMultipart)
	router.POST(options.BaseURL+"/api/v1/storage/files/multipart/complete", wrapper.CompleteUploadMultipart)
	router.GET(options.BaseURL+"/api/v1/storage/files/multipart/key", wrapper.GetMultipartKey)
	router.POST(options.BaseURL+"/api/v1/storage/files/multipart/upload", wrapper.UploadMultipart)
	router.DELETE(options.BaseURL+"/api/v1/storage/files/:id", wrapper.DeleteFile)
	router.GET(options.BaseURL+"/api/v1/storage/files/:id", wrapper.GetFileInfo)
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/9xXXWsbRxT9K+a2DwmsvHLytm9OS4obCiFp6UMwZqS9kifZ3ZnMzqYVYqF9iJ0PEydg",
	"DKWlTkKhfUgaSqERidP+GX3YT/4LZWZWnzurxEJqSJ9s7c7eO/ecc++caUKVhZxFGMkYvCbE1U0Mif53",
	"tcKE/IoHjPhX8GaCsVRPuWAchaSo19zAhvojGxzBg1gKGtXBgW9LdVZSD0vxDcpLjEvKIhKUOKORRAGe",
	"FAmqZSykEkMuG+DVSBBj6kCiM25Qf76BU6cfjFWuY1VC6sAnLOQBSnxLkTUa4EZEQpx3qQtAz8Rqgo9x",
	"VVD9JXjQ3d9uv/6r98frzs/3z5S944M/j58+OjncWfE6P/7du7t9crhzzjOLTg53zntHv24dP310FgaY",
	"qcR1FB8OtZ+h/CIJJOWkr+FL2LiCMWdRjIU6tqHW2XvRbn2nFjj/MVMLhX88bbt1r334mPpzrdHGSzEF",
	"VeaPNli/5NQBn0gy8mYYLMQ4JnVLW1pTGxlcpAEWb0K3ug0gw8ucAXIgEUFRLvVqsWykDsRYTQSVjatq",
	"7BsILiARKFYTual+VfSvi0yERIIHn3/9JTjmkFCRzNvhNjel5JCqwDSqsXxlq5fXlmpMLCmYl2LJBKnj",
	"ksKfqAWxCkRloCJdzV6uXl4DB26hiE2EleXyclmxyThGhFPw4PxyeXkFHOBEbuoKXMKpe2vFzRK4Kpt+",
	"wZkZ7zbtG9BBBzbbWfPBy0QDDghzOlxgfsOoNZIY6Whhf864NSbCUl+t5iS1S6yIc3Cg1oe6QiMi8kNn",
	"8TNe0aeqpQJ98K6ZDa+nqXluOkdXcq5cnoCCcB7QqkbPvR6rbY3i8LHAGnjwkTu0HG7mN1xLc+qEVqru",
	"POzcOxjTL3jXxpV7bT1ddyBOwlCBmCNZknqsastkpspz7LpxffZNpPbmNhVOqdukfqqqqaNVS/eP3rwp",
	"0NKnWSStVUFClChivXOqvlX6BQeM0TCkjBJhGnuIZm7iWcNQ/1RB1hdI8TRiDWIGPUPsCHNjkJ6CuWFj",
	"EmVliydAt3X7+IdfsuP+zlbv7naOuxEzPPAVU6fC7DhZfPeCm28qM63bvYdboy03YCYP25ne3m/tVw/a",
	"refd/eem5c7Oylk1M+fFtHV+31H70plNshxt4w5/0czZ7xPvkbz8vByQZwVvJqIy72ydh729g4kseiCN",
	"kzTq1S9pn20bjzcT1MdhNtiGl7JZhuREsGzYDr9b2NG6yAE7/c5jkcfRg5ed3X2rPAqIm0kg5t7xNgNW",
	"MHhP07nzcWI/Pes+ezLYzTv4sZkuj6lWudyIkrCifPu0bXRe7XZ2X1rkNNudznYVeG8jalRiViVOqOMU",
	"Cuw7NR/758hk6seD8ytv1vRHypC+k137QHxWVrL1QBhHI4+zYx/x2RAxBu6fJ93vX9gGvAJyTd0J/0dg",
	"ThmfVlAs0k3TfwMAAP//6SyxL4EVAAA=",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
