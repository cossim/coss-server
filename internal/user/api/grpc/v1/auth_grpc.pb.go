// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.25.1
// source: api/grpc/v1/auth.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	UserAuthService_ParseToken_FullMethodName        = "/user_v1.UserAuthService/ParseToken"
	UserAuthService_GenerateUserToken_FullMethodName = "/user_v1.UserAuthService/GenerateUserToken"
	UserAuthService_Access_FullMethodName            = "/user_v1.UserAuthService/Access"
)

// UserAuthServiceClient is the client API for UserAuthService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type UserAuthServiceClient interface {
	ParseToken(ctx context.Context, in *ParseTokenRequest, opts ...grpc.CallOption) (*AuthClaims, error)
	GenerateUserToken(ctx context.Context, in *GenerateUserTokenRequest, opts ...grpc.CallOption) (*GenerateUserTokenResponse, error)
	Access(ctx context.Context, in *AccessRequest, opts ...grpc.CallOption) (*AuthClaims, error)
}

type userAuthServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewUserAuthServiceClient(cc grpc.ClientConnInterface) UserAuthServiceClient {
	return &userAuthServiceClient{cc}
}

func (c *userAuthServiceClient) ParseToken(ctx context.Context, in *ParseTokenRequest, opts ...grpc.CallOption) (*AuthClaims, error) {
	out := new(AuthClaims)
	err := c.cc.Invoke(ctx, UserAuthService_ParseToken_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userAuthServiceClient) GenerateUserToken(ctx context.Context, in *GenerateUserTokenRequest, opts ...grpc.CallOption) (*GenerateUserTokenResponse, error) {
	out := new(GenerateUserTokenResponse)
	err := c.cc.Invoke(ctx, UserAuthService_GenerateUserToken_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userAuthServiceClient) Access(ctx context.Context, in *AccessRequest, opts ...grpc.CallOption) (*AuthClaims, error) {
	out := new(AuthClaims)
	err := c.cc.Invoke(ctx, UserAuthService_Access_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// UserAuthServiceServer is the server API for UserAuthService service.
// All implementations should embed UnimplementedUserAuthServiceServer
// for forward compatibility
type UserAuthServiceServer interface {
	ParseToken(context.Context, *ParseTokenRequest) (*AuthClaims, error)
	GenerateUserToken(context.Context, *GenerateUserTokenRequest) (*GenerateUserTokenResponse, error)
	Access(context.Context, *AccessRequest) (*AuthClaims, error)
}

// UnimplementedUserAuthServiceServer should be embedded to have forward compatible implementations.
type UnimplementedUserAuthServiceServer struct {
}

func (UnimplementedUserAuthServiceServer) ParseToken(context.Context, *ParseTokenRequest) (*AuthClaims, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ParseToken not implemented")
}
func (UnimplementedUserAuthServiceServer) GenerateUserToken(context.Context, *GenerateUserTokenRequest) (*GenerateUserTokenResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GenerateUserToken not implemented")
}
func (UnimplementedUserAuthServiceServer) Access(context.Context, *AccessRequest) (*AuthClaims, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Access not implemented")
}

// UnsafeUserAuthServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to UserAuthServiceServer will
// result in compilation errors.
type UnsafeUserAuthServiceServer interface {
	mustEmbedUnimplementedUserAuthServiceServer()
}

func RegisterUserAuthServiceServer(s grpc.ServiceRegistrar, srv UserAuthServiceServer) {
	s.RegisterService(&UserAuthService_ServiceDesc, srv)
}

func _UserAuthService_ParseToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ParseTokenRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserAuthServiceServer).ParseToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserAuthService_ParseToken_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserAuthServiceServer).ParseToken(ctx, req.(*ParseTokenRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserAuthService_GenerateUserToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GenerateUserTokenRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserAuthServiceServer).GenerateUserToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserAuthService_GenerateUserToken_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserAuthServiceServer).GenerateUserToken(ctx, req.(*GenerateUserTokenRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserAuthService_Access_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AccessRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserAuthServiceServer).Access(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserAuthService_Access_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserAuthServiceServer).Access(ctx, req.(*AccessRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// UserAuthService_ServiceDesc is the grpc.ServiceDesc for UserAuthService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var UserAuthService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "user_v1.UserAuthService",
	HandlerType: (*UserAuthServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ParseToken",
			Handler:    _UserAuthService_ParseToken_Handler,
		},
		{
			MethodName: "GenerateUserToken",
			Handler:    _UserAuthService_GenerateUserToken_Handler,
		},
		{
			MethodName: "Access",
			Handler:    _UserAuthService_Access_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/grpc/v1/auth.proto",
}
