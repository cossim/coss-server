// Package v1 provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.16.2 DO NOT EDIT.
package v1

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/gin-gonic/gin"
	"github.com/oapi-codegen/runtime"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// 修改用户信息
	// (PUT /api/v1/user)
	UpdateUser(c *gin.Context)
	// 用户激活
	// (GET /api/v1/user/activate)
	UserActivate(c *gin.Context, params UserActivateParams)
	// 修改用户头像
	// (PUT /api/v1/user/avatar)
	UpdateUserAvatar(c *gin.Context)
	// 修改用户密钥包
	// (PUT /api/v1/user/bundle)
	UpdateUserBundle(c *gin.Context)
	// 获取该用户当前登录的所有客户端
	// (GET /api/v1/user/clients)
	GetUserLoginClients(c *gin.Context)
	// 发送激活邮件
	// (POST /api/v1/user/email/verification)
	UserEmailVerification(c *gin.Context)
	// 用户登录
	// (POST /api/v1/user/login)
	UserLogin(c *gin.Context)
	// 退出登录
	// (POST /api/v1/user/logout)
	UserLogout(c *gin.Context)
	// 修改密码
	// (PUT /api/v1/user/password)
	UpdateUserPassword(c *gin.Context)
	// 设置用户pgp公钥
	// (POST /api/v1/user/public_key)
	SetUserPublicKey(c *gin.Context)
	// 重置用户公钥
	// (PUT /api/v1/user/public_key)
	ResetUserPublicKey(c *gin.Context)
	// 用户注册
	// (POST /api/v1/user/register)
	UserRegister(c *gin.Context)
	// 搜索用户
	// (GET /api/v1/user/search)
	SearchUser(c *gin.Context, params SearchUserParams)
	// 获取服务端pgp公钥
	// (GET /api/v1/user/system/public_key)
	GetPGPPublicKey(c *gin.Context)
	// 获取用户信息
	// (GET /api/v1/user/{id})
	GetUser(c *gin.Context, id string)
	// 获取用户密钥包
	// (GET /api/v1/user/{id}/bundle)
	GetUserBundle(c *gin.Context, id string)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
	ErrorHandler       func(*gin.Context, error, int)
}

type MiddlewareFunc func(c *gin.Context)

// UpdateUser operation middleware
func (siw *ServerInterfaceWrapper) UpdateUser(c *gin.Context) {

	c.Set(BearerAuthScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.UpdateUser(c)
}

// UserActivate operation middleware
func (siw *ServerInterfaceWrapper) UserActivate(c *gin.Context) {

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params UserActivateParams

	// ------------- Required query parameter "user_id" -------------

	if paramValue := c.Query("user_id"); paramValue != "" {

	} else {
		siw.ErrorHandler(c, fmt.Errorf("Query argument user_id is required, but not found"), http.StatusBadRequest)
		return
	}

	err = runtime.BindQueryParameter("form", true, true, "user_id", c.Request.URL.Query(), &params.UserId)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter user_id: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Required query parameter "key" -------------

	if paramValue := c.Query("key"); paramValue != "" {

	} else {
		siw.ErrorHandler(c, fmt.Errorf("Query argument key is required, but not found"), http.StatusBadRequest)
		return
	}

	err = runtime.BindQueryParameter("form", true, true, "key", c.Request.URL.Query(), &params.Key)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter key: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.UserActivate(c, params)
}

// UpdateUserAvatar operation middleware
func (siw *ServerInterfaceWrapper) UpdateUserAvatar(c *gin.Context) {

	c.Set(BearerAuthScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.UpdateUserAvatar(c)
}

// UpdateUserBundle operation middleware
func (siw *ServerInterfaceWrapper) UpdateUserBundle(c *gin.Context) {

	c.Set(BearerAuthScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.UpdateUserBundle(c)
}

// GetUserLoginClients operation middleware
func (siw *ServerInterfaceWrapper) GetUserLoginClients(c *gin.Context) {

	c.Set(BearerAuthScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetUserLoginClients(c)
}

// UserEmailVerification operation middleware
func (siw *ServerInterfaceWrapper) UserEmailVerification(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.UserEmailVerification(c)
}

// UserLogin operation middleware
func (siw *ServerInterfaceWrapper) UserLogin(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.UserLogin(c)
}

// UserLogout operation middleware
func (siw *ServerInterfaceWrapper) UserLogout(c *gin.Context) {

	c.Set(BearerAuthScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.UserLogout(c)
}

// UpdateUserPassword operation middleware
func (siw *ServerInterfaceWrapper) UpdateUserPassword(c *gin.Context) {

	c.Set(BearerAuthScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.UpdateUserPassword(c)
}

// SetUserPublicKey operation middleware
func (siw *ServerInterfaceWrapper) SetUserPublicKey(c *gin.Context) {

	c.Set(BearerAuthScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.SetUserPublicKey(c)
}

// ResetUserPublicKey operation middleware
func (siw *ServerInterfaceWrapper) ResetUserPublicKey(c *gin.Context) {

	c.Set(BearerAuthScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.ResetUserPublicKey(c)
}

// UserRegister operation middleware
func (siw *ServerInterfaceWrapper) UserRegister(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.UserRegister(c)
}

// SearchUser operation middleware
func (siw *ServerInterfaceWrapper) SearchUser(c *gin.Context) {

	var err error

	c.Set(BearerAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params SearchUserParams

	// ------------- Required query parameter "email" -------------

	if paramValue := c.Query("email"); paramValue != "" {

	} else {
		siw.ErrorHandler(c, fmt.Errorf("Query argument email is required, but not found"), http.StatusBadRequest)
		return
	}

	err = runtime.BindQueryParameter("form", true, true, "email", c.Request.URL.Query(), &params.Email)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter email: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.SearchUser(c, params)
}

// GetPGPPublicKey operation middleware
func (siw *ServerInterfaceWrapper) GetPGPPublicKey(c *gin.Context) {

	c.Set(BearerAuthScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetPGPPublicKey(c)
}

// GetUser operation middleware
func (siw *ServerInterfaceWrapper) GetUser(c *gin.Context) {

	var err error

	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameter("simple", false, "id", c.Param("id"), &id)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter id: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(BearerAuthScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetUser(c, id)
}

// GetUserBundle operation middleware
func (siw *ServerInterfaceWrapper) GetUserBundle(c *gin.Context) {

	var err error

	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameter("simple", false, "id", c.Param("id"), &id)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter id: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(BearerAuthScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetUserBundle(c, id)
}

// GinServerOptions provides options for the Gin server.
type GinServerOptions struct {
	BaseURL      string
	Middlewares  []MiddlewareFunc
	ErrorHandler func(*gin.Context, error, int)
}

// RegisterHandlers creates http.Handler with routing matching OpenAPI spec.
func RegisterHandlers(router gin.IRouter, si ServerInterface) {
	RegisterHandlersWithOptions(router, si, GinServerOptions{})
}

// RegisterHandlersWithOptions creates http.Handler with additional options
func RegisterHandlersWithOptions(router gin.IRouter, si ServerInterface, options GinServerOptions) {
	errorHandler := options.ErrorHandler
	if errorHandler == nil {
		errorHandler = func(c *gin.Context, err error, statusCode int) {
			c.JSON(statusCode, gin.H{"msg": err.Error()})
		}
	}

	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
		ErrorHandler:       errorHandler,
	}

	router.PUT(options.BaseURL+"/api/v1/user", wrapper.UpdateUser)
	router.GET(options.BaseURL+"/api/v1/user/activate", wrapper.UserActivate)
	router.PUT(options.BaseURL+"/api/v1/user/avatar", wrapper.UpdateUserAvatar)
	router.PUT(options.BaseURL+"/api/v1/user/bundle", wrapper.UpdateUserBundle)
	router.GET(options.BaseURL+"/api/v1/user/clients", wrapper.GetUserLoginClients)
	router.POST(options.BaseURL+"/api/v1/user/email/verification", wrapper.UserEmailVerification)
	router.POST(options.BaseURL+"/api/v1/user/login", wrapper.UserLogin)
	router.POST(options.BaseURL+"/api/v1/user/logout", wrapper.UserLogout)
	router.PUT(options.BaseURL+"/api/v1/user/password", wrapper.UpdateUserPassword)
	router.POST(options.BaseURL+"/api/v1/user/public_key", wrapper.SetUserPublicKey)
	router.PUT(options.BaseURL+"/api/v1/user/public_key", wrapper.ResetUserPublicKey)
	router.POST(options.BaseURL+"/api/v1/user/register", wrapper.UserRegister)
	router.GET(options.BaseURL+"/api/v1/user/search", wrapper.SearchUser)
	router.GET(options.BaseURL+"/api/v1/user/system/public_key", wrapper.GetPGPPublicKey)
	router.GET(options.BaseURL+"/api/v1/user/:id", wrapper.GetUser)
	router.GET(options.BaseURL+"/api/v1/user/:id/bundle", wrapper.GetUserBundle)
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
