// Package v1 provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.16.2 DO NOT EDIT.
package v1

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/gin-gonic/gin"
	"github.com/oapi-codegen/runtime"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// 修改用户信息
	// (PUT /api/v1/user)
	UpdateUser(c *gin.Context)
	// 用户激活
	// (GET /api/v1/user/activate)
	UserActivate(c *gin.Context, params UserActivateParams)
	// 修改用户头像
	// (PUT /api/v1/user/avatar)
	UpdateUserAvatar(c *gin.Context)
	// 修改用户密钥包
	// (PUT /api/v1/user/bundle)
	UpdateUserBundle(c *gin.Context)
	// 获取该用户当前登录的所有客户端
	// (GET /api/v1/user/clients)
	GetUserLoginClients(c *gin.Context)
	// 发送激活邮件
	// (POST /api/v1/user/email/verification)
	UserEmailVerification(c *gin.Context)
	// 用户登录
	// (POST /api/v1/user/login)
	UserLogin(c *gin.Context)
	// 退出登录
	// (POST /api/v1/user/logout)
	UserLogout(c *gin.Context)
	// 修改密码
	// (PUT /api/v1/user/password)
	UpdateUserPassword(c *gin.Context)
	// 设置用户pgp公钥
	// (POST /api/v1/user/public_key)
	SetUserPublicKey(c *gin.Context)
	// 重置用户公钥
	// (PUT /api/v1/user/public_key)
	ResetUserPublicKey(c *gin.Context)
	// 用户注册
	// (POST /api/v1/user/register)
	UserRegister(c *gin.Context)
	// 搜索用户
	// (GET /api/v1/user/search)
	SearchUser(c *gin.Context, params SearchUserParams)
	// 获取服务端pgp公钥
	// (GET /api/v1/user/system/public_key)
	GetPGPPublicKey(c *gin.Context)
	// 获取用户信息
	// (GET /api/v1/user/{id})
	GetUser(c *gin.Context, id string)
	// 获取用户密钥包
	// (GET /api/v1/user/{id}/bundle)
	GetUserBundle(c *gin.Context, id string)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
	ErrorHandler       func(*gin.Context, error, int)
}

type MiddlewareFunc func(c *gin.Context)

// UpdateUser operation middleware
func (siw *ServerInterfaceWrapper) UpdateUser(c *gin.Context) {

	c.Set(BearerAuthScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.UpdateUser(c)
}

// UserActivate operation middleware
func (siw *ServerInterfaceWrapper) UserActivate(c *gin.Context) {

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params UserActivateParams

	// ------------- Required query parameter "user_id" -------------

	if paramValue := c.Query("user_id"); paramValue != "" {

	} else {
		siw.ErrorHandler(c, fmt.Errorf("Query argument user_id is required, but not found"), http.StatusBadRequest)
		return
	}

	err = runtime.BindQueryParameter("form", true, true, "user_id", c.Request.URL.Query(), &params.UserId)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter user_id: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Required query parameter "key" -------------

	if paramValue := c.Query("key"); paramValue != "" {

	} else {
		siw.ErrorHandler(c, fmt.Errorf("Query argument key is required, but not found"), http.StatusBadRequest)
		return
	}

	err = runtime.BindQueryParameter("form", true, true, "key", c.Request.URL.Query(), &params.Key)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter key: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.UserActivate(c, params)
}

// UpdateUserAvatar operation middleware
func (siw *ServerInterfaceWrapper) UpdateUserAvatar(c *gin.Context) {

	c.Set(BearerAuthScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.UpdateUserAvatar(c)
}

// UpdateUserBundle operation middleware
func (siw *ServerInterfaceWrapper) UpdateUserBundle(c *gin.Context) {

	c.Set(BearerAuthScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.UpdateUserBundle(c)
}

// GetUserLoginClients operation middleware
func (siw *ServerInterfaceWrapper) GetUserLoginClients(c *gin.Context) {

	c.Set(BearerAuthScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetUserLoginClients(c)
}

// UserEmailVerification operation middleware
func (siw *ServerInterfaceWrapper) UserEmailVerification(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.UserEmailVerification(c)
}

// UserLogin operation middleware
func (siw *ServerInterfaceWrapper) UserLogin(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.UserLogin(c)
}

// UserLogout operation middleware
func (siw *ServerInterfaceWrapper) UserLogout(c *gin.Context) {

	c.Set(BearerAuthScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.UserLogout(c)
}

// UpdateUserPassword operation middleware
func (siw *ServerInterfaceWrapper) UpdateUserPassword(c *gin.Context) {

	c.Set(BearerAuthScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.UpdateUserPassword(c)
}

// SetUserPublicKey operation middleware
func (siw *ServerInterfaceWrapper) SetUserPublicKey(c *gin.Context) {

	c.Set(BearerAuthScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.SetUserPublicKey(c)
}

// ResetUserPublicKey operation middleware
func (siw *ServerInterfaceWrapper) ResetUserPublicKey(c *gin.Context) {

	c.Set(BearerAuthScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.ResetUserPublicKey(c)
}

// UserRegister operation middleware
func (siw *ServerInterfaceWrapper) UserRegister(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.UserRegister(c)
}

// SearchUser operation middleware
func (siw *ServerInterfaceWrapper) SearchUser(c *gin.Context) {

	var err error

	c.Set(BearerAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params SearchUserParams

	// ------------- Required query parameter "email" -------------

	if paramValue := c.Query("email"); paramValue != "" {

	} else {
		siw.ErrorHandler(c, fmt.Errorf("Query argument email is required, but not found"), http.StatusBadRequest)
		return
	}

	err = runtime.BindQueryParameter("form", true, true, "email", c.Request.URL.Query(), &params.Email)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter email: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.SearchUser(c, params)
}

// GetPGPPublicKey operation middleware
func (siw *ServerInterfaceWrapper) GetPGPPublicKey(c *gin.Context) {

	c.Set(BearerAuthScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetPGPPublicKey(c)
}

// GetUser operation middleware
func (siw *ServerInterfaceWrapper) GetUser(c *gin.Context) {

	var err error

	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameter("simple", false, "id", c.Param("id"), &id)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter id: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(BearerAuthScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetUser(c, id)
}

// GetUserBundle operation middleware
func (siw *ServerInterfaceWrapper) GetUserBundle(c *gin.Context) {

	var err error

	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameter("simple", false, "id", c.Param("id"), &id)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter id: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(BearerAuthScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetUserBundle(c, id)
}

// GinServerOptions provides options for the Gin server.
type GinServerOptions struct {
	BaseURL      string
	Middlewares  []MiddlewareFunc
	ErrorHandler func(*gin.Context, error, int)
}

// RegisterHandlers creates http.Handler with routing matching OpenAPI spec.
func RegisterHandlers(router gin.IRouter, si ServerInterface) {
	RegisterHandlersWithOptions(router, si, GinServerOptions{})
}

// RegisterHandlersWithOptions creates http.Handler with additional options
func RegisterHandlersWithOptions(router gin.IRouter, si ServerInterface, options GinServerOptions) {
	errorHandler := options.ErrorHandler
	if errorHandler == nil {
		errorHandler = func(c *gin.Context, err error, statusCode int) {
			c.JSON(statusCode, gin.H{"msg": err.Error()})
		}
	}

	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
		ErrorHandler:       errorHandler,
	}

	router.PUT(options.BaseURL+"/api/v1/user", wrapper.UpdateUser)
	router.GET(options.BaseURL+"/api/v1/user/activate", wrapper.UserActivate)
	router.PUT(options.BaseURL+"/api/v1/user/avatar", wrapper.UpdateUserAvatar)
	router.PUT(options.BaseURL+"/api/v1/user/bundle", wrapper.UpdateUserBundle)
	router.GET(options.BaseURL+"/api/v1/user/clients", wrapper.GetUserLoginClients)
	router.POST(options.BaseURL+"/api/v1/user/email/verification", wrapper.UserEmailVerification)
	router.POST(options.BaseURL+"/api/v1/user/login", wrapper.UserLogin)
	router.POST(options.BaseURL+"/api/v1/user/logout", wrapper.UserLogout)
	router.PUT(options.BaseURL+"/api/v1/user/password", wrapper.UpdateUserPassword)
	router.POST(options.BaseURL+"/api/v1/user/public_key", wrapper.SetUserPublicKey)
	router.PUT(options.BaseURL+"/api/v1/user/public_key", wrapper.ResetUserPublicKey)
	router.POST(options.BaseURL+"/api/v1/user/register", wrapper.UserRegister)
	router.GET(options.BaseURL+"/api/v1/user/search", wrapper.SearchUser)
	router.GET(options.BaseURL+"/api/v1/user/system/public_key", wrapper.GetPGPPublicKey)
	router.GET(options.BaseURL+"/api/v1/user/:id", wrapper.GetUser)
	router.GET(options.BaseURL+"/api/v1/user/:id/bundle", wrapper.GetUserBundle)
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
