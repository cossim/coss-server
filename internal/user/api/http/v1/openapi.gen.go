// Package v1 provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen/v2 version v2.1.0 DO NOT EDIT.
package v1

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/gin-gonic/gin"
	"github.com/oapi-codegen/runtime"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// 用户激活
	// (GET /api/v1/user/activate)
	UserActivate(c *gin.Context, params UserActivateParams)
	// 修改用户密钥包
	// (PUT /api/v1/user/bundle)
	UpdateUserBundle(c *gin.Context)
	// 获取该用户当前登录的所有客户端
	// (GET /api/v1/user/clients)
	GetUserClients(c *gin.Context)
	// 发送激活邮件
	// (POST /api/v1/user/email/verification)
	UserEmailVerification(c *gin.Context)
	// 用户登录
	// (POST /api/v1/user/login)
	UserLogin(c *gin.Context)
	// 退出登录
	// (POST /api/v1/user/logout)
	UserLogout(c *gin.Context)
	// 修改密码
	// (PUT /api/v1/user/password)
	UpdateUserPassword(c *gin.Context)
	// 设置用户公钥
	// (POST /api/v1/user/public_key)
	SetUserPublicKey(c *gin.Context)
	// 重置用户公钥
	// (PUT /api/v1/user/public_key)
	ResetUserPublicKey(c *gin.Context)
	// 用户注册
	// (POST /api/v1/user/register)
	UserRegister(c *gin.Context)
	// 获取服务端pgp公钥
	// (GET /api/v1/user/system/public_key)
	GetPGPPublicKey(c *gin.Context)
	// 获取用户信息
	// (GET /api/v1/user/{id})
	GetUser(c *gin.Context, id string)
	// 修改用户信息
	// (PUT /api/v1/user/{id})
	UpdateUser(c *gin.Context, id string)
	// 获取用户密钥包
	// (GET /api/v1/user/{id}/bundle)
	GetUserBundle(c *gin.Context, id string)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
	ErrorHandler       func(*gin.Context, error, int)
}

type MiddlewareFunc func(c *gin.Context)

// UserActivate operation middleware
func (siw *ServerInterfaceWrapper) UserActivate(c *gin.Context) {

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params UserActivateParams

	// ------------- Required query parameter "user_id" -------------

	if paramValue := c.Query("user_id"); paramValue != "" {

	} else {
		siw.ErrorHandler(c, fmt.Errorf("Query argument user_id is required, but not found"), http.StatusBadRequest)
		return
	}

	err = runtime.BindQueryParameter("form", true, true, "user_id", c.Request.URL.Query(), &params.UserId)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter user_id: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Required query parameter "key" -------------

	if paramValue := c.Query("key"); paramValue != "" {

	} else {
		siw.ErrorHandler(c, fmt.Errorf("Query argument key is required, but not found"), http.StatusBadRequest)
		return
	}

	err = runtime.BindQueryParameter("form", true, true, "key", c.Request.URL.Query(), &params.Key)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter key: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.UserActivate(c, params)
}

// UpdateUserBundle operation middleware
func (siw *ServerInterfaceWrapper) UpdateUserBundle(c *gin.Context) {

	c.Set(BearerAuthScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.UpdateUserBundle(c)
}

// GetUserClients operation middleware
func (siw *ServerInterfaceWrapper) GetUserClients(c *gin.Context) {

	c.Set(BearerAuthScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetUserClients(c)
}

// UserEmailVerification operation middleware
func (siw *ServerInterfaceWrapper) UserEmailVerification(c *gin.Context) {

	c.Set(BearerAuthScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.UserEmailVerification(c)
}

// UserLogin operation middleware
func (siw *ServerInterfaceWrapper) UserLogin(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.UserLogin(c)
}

// UserLogout operation middleware
func (siw *ServerInterfaceWrapper) UserLogout(c *gin.Context) {

	c.Set(BearerAuthScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.UserLogout(c)
}

// UpdateUserPassword operation middleware
func (siw *ServerInterfaceWrapper) UpdateUserPassword(c *gin.Context) {

	c.Set(BearerAuthScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.UpdateUserPassword(c)
}

// SetUserPublicKey operation middleware
func (siw *ServerInterfaceWrapper) SetUserPublicKey(c *gin.Context) {

	c.Set(BearerAuthScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.SetUserPublicKey(c)
}

// ResetUserPublicKey operation middleware
func (siw *ServerInterfaceWrapper) ResetUserPublicKey(c *gin.Context) {

	c.Set(BearerAuthScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.ResetUserPublicKey(c)
}

// UserRegister operation middleware
func (siw *ServerInterfaceWrapper) UserRegister(c *gin.Context) {

	c.Set(BearerAuthScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.UserRegister(c)
}

// GetPGPPublicKey operation middleware
func (siw *ServerInterfaceWrapper) GetPGPPublicKey(c *gin.Context) {

	c.Set(BearerAuthScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetPGPPublicKey(c)
}

// GetUser operation middleware
func (siw *ServerInterfaceWrapper) GetUser(c *gin.Context) {

	var err error

	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithOptions("simple", "id", c.Param("id"), &id, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter id: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(BearerAuthScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetUser(c, id)
}

// UpdateUser operation middleware
func (siw *ServerInterfaceWrapper) UpdateUser(c *gin.Context) {

	var err error

	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithOptions("simple", "id", c.Param("id"), &id, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter id: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(BearerAuthScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.UpdateUser(c, id)
}

// GetUserBundle operation middleware
func (siw *ServerInterfaceWrapper) GetUserBundle(c *gin.Context) {

	var err error

	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithOptions("simple", "id", c.Param("id"), &id, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter id: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(BearerAuthScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetUserBundle(c, id)
}

// GinServerOptions provides options for the Gin server.
type GinServerOptions struct {
	BaseURL      string
	Middlewares  []MiddlewareFunc
	ErrorHandler func(*gin.Context, error, int)
}

// RegisterHandlers creates http.Handler with routing matching OpenAPI spec.
func RegisterHandlers(router gin.IRouter, si ServerInterface) {
	RegisterHandlersWithOptions(router, si, GinServerOptions{})
}

// RegisterHandlersWithOptions creates http.Handler with additional options
func RegisterHandlersWithOptions(router gin.IRouter, si ServerInterface, options GinServerOptions) {
	errorHandler := options.ErrorHandler
	if errorHandler == nil {
		errorHandler = func(c *gin.Context, err error, statusCode int) {
			c.JSON(statusCode, gin.H{"msg": err.Error()})
		}
	}

	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
		ErrorHandler:       errorHandler,
	}

	router.GET(options.BaseURL+"/api/v1/user/activate", wrapper.UserActivate)
	router.PUT(options.BaseURL+"/api/v1/user/bundle", wrapper.UpdateUserBundle)
	router.GET(options.BaseURL+"/api/v1/user/clients", wrapper.GetUserClients)
	router.POST(options.BaseURL+"/api/v1/user/email/verification", wrapper.UserEmailVerification)
	router.POST(options.BaseURL+"/api/v1/user/login", wrapper.UserLogin)
	router.POST(options.BaseURL+"/api/v1/user/logout", wrapper.UserLogout)
	router.PUT(options.BaseURL+"/api/v1/user/password", wrapper.UpdateUserPassword)
	router.POST(options.BaseURL+"/api/v1/user/public_key", wrapper.SetUserPublicKey)
	router.PUT(options.BaseURL+"/api/v1/user/public_key", wrapper.ResetUserPublicKey)
	router.POST(options.BaseURL+"/api/v1/user/register", wrapper.UserRegister)
	router.GET(options.BaseURL+"/api/v1/user/system/public_key", wrapper.GetPGPPublicKey)
	router.GET(options.BaseURL+"/api/v1/user/:id", wrapper.GetUser)
	router.PUT(options.BaseURL+"/api/v1/user/:id", wrapper.UpdateUser)
	router.GET(options.BaseURL+"/api/v1/user/:id/bundle", wrapper.GetUserBundle)
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"lKfK/wkAAP//mDZpmFooAAA=",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
