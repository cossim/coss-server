// Package v1 provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.16.2 DO NOT EDIT.
package v1

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/gin-gonic/gin"
	"github.com/oapi-codegen/runtime"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// 修改用户信息
	// (PUT /api/v1/user)
	UpdateUser(c *gin.Context)
	// 用户激活
	// (GET /api/v1/user/activate)
	UserActivate(c *gin.Context, params UserActivateParams)
	// 修改用户头像
	// (PUT /api/v1/user/avatar)
	UpdateUserAvatar(c *gin.Context)
	// 修改用户密钥包
	// (PUT /api/v1/user/bundle)
	UpdateUserBundle(c *gin.Context)
	// 获取该用户当前登录的所有客户端
	// (GET /api/v1/user/clients)
	GetUserLoginClients(c *gin.Context)
	// 发送激活邮件
	// (POST /api/v1/user/email/verification)
	UserEmailVerification(c *gin.Context)
	// 用户登录
	// (POST /api/v1/user/login)
	UserLogin(c *gin.Context)
	// 退出登录
	// (POST /api/v1/user/logout)
	UserLogout(c *gin.Context)
	// 修改密码
	// (PUT /api/v1/user/password)
	UpdateUserPassword(c *gin.Context)
	// 设置用户pgp公钥
	// (POST /api/v1/user/public_key)
	SetUserPublicKey(c *gin.Context)
	// 重置用户公钥
	// (PUT /api/v1/user/public_key)
	ResetUserPublicKey(c *gin.Context)
	// 用户注册
	// (POST /api/v1/user/register)
	UserRegister(c *gin.Context)
	// 搜索用户
	// (GET /api/v1/user/search)
	SearchUser(c *gin.Context, params SearchUserParams)
	// 获取服务端pgp公钥
	// (GET /api/v1/user/system/public_key)
	GetPGPPublicKey(c *gin.Context)
	// 获取用户信息
	// (GET /api/v1/user/{id})
	GetUser(c *gin.Context, id string)
	// 获取用户密钥包
	// (GET /api/v1/user/{id}/bundle)
	GetUserBundle(c *gin.Context, id string)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
	ErrorHandler       func(*gin.Context, error, int)
}

type MiddlewareFunc func(c *gin.Context)

// UpdateUser operation middleware
func (siw *ServerInterfaceWrapper) UpdateUser(c *gin.Context) {

	c.Set(BearerAuthScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.UpdateUser(c)
}

// UserActivate operation middleware
func (siw *ServerInterfaceWrapper) UserActivate(c *gin.Context) {

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params UserActivateParams

	// ------------- Required query parameter "user_id" -------------

	if paramValue := c.Query("user_id"); paramValue != "" {

	} else {
		siw.ErrorHandler(c, fmt.Errorf("Query argument user_id is required, but not found"), http.StatusBadRequest)
		return
	}

	err = runtime.BindQueryParameter("form", true, true, "user_id", c.Request.URL.Query(), &params.UserId)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter user_id: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Required query parameter "key" -------------

	if paramValue := c.Query("key"); paramValue != "" {

	} else {
		siw.ErrorHandler(c, fmt.Errorf("Query argument key is required, but not found"), http.StatusBadRequest)
		return
	}

	err = runtime.BindQueryParameter("form", true, true, "key", c.Request.URL.Query(), &params.Key)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter key: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.UserActivate(c, params)
}

// UpdateUserAvatar operation middleware
func (siw *ServerInterfaceWrapper) UpdateUserAvatar(c *gin.Context) {

	c.Set(BearerAuthScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.UpdateUserAvatar(c)
}

// UpdateUserBundle operation middleware
func (siw *ServerInterfaceWrapper) UpdateUserBundle(c *gin.Context) {

	c.Set(BearerAuthScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.UpdateUserBundle(c)
}

// GetUserLoginClients operation middleware
func (siw *ServerInterfaceWrapper) GetUserLoginClients(c *gin.Context) {

	c.Set(BearerAuthScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetUserLoginClients(c)
}

// UserEmailVerification operation middleware
func (siw *ServerInterfaceWrapper) UserEmailVerification(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.UserEmailVerification(c)
}

// UserLogin operation middleware
func (siw *ServerInterfaceWrapper) UserLogin(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.UserLogin(c)
}

// UserLogout operation middleware
func (siw *ServerInterfaceWrapper) UserLogout(c *gin.Context) {

	c.Set(BearerAuthScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.UserLogout(c)
}

// UpdateUserPassword operation middleware
func (siw *ServerInterfaceWrapper) UpdateUserPassword(c *gin.Context) {

	c.Set(BearerAuthScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.UpdateUserPassword(c)
}

// SetUserPublicKey operation middleware
func (siw *ServerInterfaceWrapper) SetUserPublicKey(c *gin.Context) {

	c.Set(BearerAuthScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.SetUserPublicKey(c)
}

// ResetUserPublicKey operation middleware
func (siw *ServerInterfaceWrapper) ResetUserPublicKey(c *gin.Context) {

	c.Set(BearerAuthScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.ResetUserPublicKey(c)
}

// UserRegister operation middleware
func (siw *ServerInterfaceWrapper) UserRegister(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.UserRegister(c)
}

// SearchUser operation middleware
func (siw *ServerInterfaceWrapper) SearchUser(c *gin.Context) {

	var err error

	c.Set(BearerAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params SearchUserParams

	// ------------- Required query parameter "email" -------------

	if paramValue := c.Query("email"); paramValue != "" {

	} else {
		siw.ErrorHandler(c, fmt.Errorf("Query argument email is required, but not found"), http.StatusBadRequest)
		return
	}

	err = runtime.BindQueryParameter("form", true, true, "email", c.Request.URL.Query(), &params.Email)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter email: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.SearchUser(c, params)
}

// GetPGPPublicKey operation middleware
func (siw *ServerInterfaceWrapper) GetPGPPublicKey(c *gin.Context) {

	c.Set(BearerAuthScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetPGPPublicKey(c)
}

// GetUser operation middleware
func (siw *ServerInterfaceWrapper) GetUser(c *gin.Context) {

	var err error

	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameter("simple", false, "id", c.Param("id"), &id)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter id: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(BearerAuthScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetUser(c, id)
}

// GetUserBundle operation middleware
func (siw *ServerInterfaceWrapper) GetUserBundle(c *gin.Context) {

	var err error

	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameter("simple", false, "id", c.Param("id"), &id)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter id: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(BearerAuthScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetUserBundle(c, id)
}

// GinServerOptions provides options for the Gin server.
type GinServerOptions struct {
	BaseURL      string
	Middlewares  []MiddlewareFunc
	ErrorHandler func(*gin.Context, error, int)
}

// RegisterHandlers creates http.Handler with routing matching OpenAPI spec.
func RegisterHandlers(router gin.IRouter, si ServerInterface) {
	RegisterHandlersWithOptions(router, si, GinServerOptions{})
}

// RegisterHandlersWithOptions creates http.Handler with additional options
func RegisterHandlersWithOptions(router gin.IRouter, si ServerInterface, options GinServerOptions) {
	errorHandler := options.ErrorHandler
	if errorHandler == nil {
		errorHandler = func(c *gin.Context, err error, statusCode int) {
			c.JSON(statusCode, gin.H{"msg": err.Error()})
		}
	}

	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
		ErrorHandler:       errorHandler,
	}

	router.PUT(options.BaseURL+"/api/v1/user", wrapper.UpdateUser)
	router.GET(options.BaseURL+"/api/v1/user/activate", wrapper.UserActivate)
	router.PUT(options.BaseURL+"/api/v1/user/avatar", wrapper.UpdateUserAvatar)
	router.PUT(options.BaseURL+"/api/v1/user/bundle", wrapper.UpdateUserBundle)
	router.GET(options.BaseURL+"/api/v1/user/clients", wrapper.GetUserLoginClients)
	router.POST(options.BaseURL+"/api/v1/user/email/verification", wrapper.UserEmailVerification)
	router.POST(options.BaseURL+"/api/v1/user/login", wrapper.UserLogin)
	router.POST(options.BaseURL+"/api/v1/user/logout", wrapper.UserLogout)
	router.PUT(options.BaseURL+"/api/v1/user/password", wrapper.UpdateUserPassword)
	router.POST(options.BaseURL+"/api/v1/user/public_key", wrapper.SetUserPublicKey)
	router.PUT(options.BaseURL+"/api/v1/user/public_key", wrapper.ResetUserPublicKey)
	router.POST(options.BaseURL+"/api/v1/user/register", wrapper.UserRegister)
	router.GET(options.BaseURL+"/api/v1/user/search", wrapper.SearchUser)
	router.GET(options.BaseURL+"/api/v1/user/system/public_key", wrapper.GetPGPPublicKey)
	router.GET(options.BaseURL+"/api/v1/user/:id", wrapper.GetUser)
	router.GET(options.BaseURL+"/api/v1/user/:id/bundle", wrapper.GetUserBundle)
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
