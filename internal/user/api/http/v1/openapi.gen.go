// Package v1 provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen/v2 version v2.1.0 DO NOT EDIT.
package v1

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/gin-gonic/gin"
	"github.com/oapi-codegen/runtime"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// 修改用户信息
	// (PUT /api/v1/user)
	UpdateUser(c *gin.Context)
	// 用户激活
	// (GET /api/v1/user/activate)
	UserActivate(c *gin.Context, params UserActivateParams)
	// 修改用户头像
	// (PUT /api/v1/user/avatar)
	UpdateUserAvatar(c *gin.Context)
	// 修改用户密钥包
	// (PUT /api/v1/user/bundle)
	UpdateUserBundle(c *gin.Context)
	// 获取该用户当前登录的所有客户端
	// (GET /api/v1/user/clients)
	GetUserLoginClients(c *gin.Context)
	// 发送激活邮件
	// (POST /api/v1/user/email/verification)
	UserEmailVerification(c *gin.Context)
	// 用户登录
	// (POST /api/v1/user/login)
	UserLogin(c *gin.Context)
	// 退出登录
	// (POST /api/v1/user/logout)
	UserLogout(c *gin.Context)
	// 修改密码
	// (PUT /api/v1/user/password)
	UpdateUserPassword(c *gin.Context)
	// 设置用户pgp公钥
	// (POST /api/v1/user/public_key)
	SetUserPublicKey(c *gin.Context)
	// 重置用户公钥
	// (PUT /api/v1/user/public_key)
	ResetUserPublicKey(c *gin.Context)
	// 用户注册
	// (POST /api/v1/user/register)
	UserRegister(c *gin.Context)
	// 搜索用户
	// (GET /api/v1/user/search)
	SearchUser(c *gin.Context, params SearchUserParams)
	// 获取服务端pgp公钥
	// (GET /api/v1/user/system/public_key)
	GetPGPPublicKey(c *gin.Context)
	// 获取用户信息
	// (GET /api/v1/user/{id})
	GetUser(c *gin.Context, id string)
	// 获取用户密钥包
	// (GET /api/v1/user/{id}/bundle)
	GetUserBundle(c *gin.Context, id string)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
	ErrorHandler       func(*gin.Context, error, int)
}

type MiddlewareFunc func(c *gin.Context)

// UpdateUser operation middleware
func (siw *ServerInterfaceWrapper) UpdateUser(c *gin.Context) {

	c.Set(BearerAuthScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.UpdateUser(c)
}

// UserActivate operation middleware
func (siw *ServerInterfaceWrapper) UserActivate(c *gin.Context) {

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params UserActivateParams

	// ------------- Required query parameter "user_id" -------------

	if paramValue := c.Query("user_id"); paramValue != "" {

	} else {
		siw.ErrorHandler(c, fmt.Errorf("Query argument user_id is required, but not found"), http.StatusBadRequest)
		return
	}

	err = runtime.BindQueryParameter("form", true, true, "user_id", c.Request.URL.Query(), &params.UserId)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter user_id: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Required query parameter "key" -------------

	if paramValue := c.Query("key"); paramValue != "" {

	} else {
		siw.ErrorHandler(c, fmt.Errorf("Query argument key is required, but not found"), http.StatusBadRequest)
		return
	}

	err = runtime.BindQueryParameter("form", true, true, "key", c.Request.URL.Query(), &params.Key)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter key: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.UserActivate(c, params)
}

// UpdateUserAvatar operation middleware
func (siw *ServerInterfaceWrapper) UpdateUserAvatar(c *gin.Context) {

	c.Set(BearerAuthScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.UpdateUserAvatar(c)
}

// UpdateUserBundle operation middleware
func (siw *ServerInterfaceWrapper) UpdateUserBundle(c *gin.Context) {

	c.Set(BearerAuthScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.UpdateUserBundle(c)
}

// GetUserLoginClients operation middleware
func (siw *ServerInterfaceWrapper) GetUserLoginClients(c *gin.Context) {

	c.Set(BearerAuthScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetUserLoginClients(c)
}

// UserEmailVerification operation middleware
func (siw *ServerInterfaceWrapper) UserEmailVerification(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.UserEmailVerification(c)
}

// UserLogin operation middleware
func (siw *ServerInterfaceWrapper) UserLogin(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.UserLogin(c)
}

// UserLogout operation middleware
func (siw *ServerInterfaceWrapper) UserLogout(c *gin.Context) {

	c.Set(BearerAuthScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.UserLogout(c)
}

// UpdateUserPassword operation middleware
func (siw *ServerInterfaceWrapper) UpdateUserPassword(c *gin.Context) {

	c.Set(BearerAuthScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.UpdateUserPassword(c)
}

// SetUserPublicKey operation middleware
func (siw *ServerInterfaceWrapper) SetUserPublicKey(c *gin.Context) {

	c.Set(BearerAuthScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.SetUserPublicKey(c)
}

// ResetUserPublicKey operation middleware
func (siw *ServerInterfaceWrapper) ResetUserPublicKey(c *gin.Context) {

	c.Set(BearerAuthScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.ResetUserPublicKey(c)
}

// UserRegister operation middleware
func (siw *ServerInterfaceWrapper) UserRegister(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.UserRegister(c)
}

// SearchUser operation middleware
func (siw *ServerInterfaceWrapper) SearchUser(c *gin.Context) {

	var err error

	c.Set(BearerAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params SearchUserParams

	// ------------- Required query parameter "email" -------------

	if paramValue := c.Query("email"); paramValue != "" {

	} else {
		siw.ErrorHandler(c, fmt.Errorf("Query argument email is required, but not found"), http.StatusBadRequest)
		return
	}

	err = runtime.BindQueryParameter("form", true, true, "email", c.Request.URL.Query(), &params.Email)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter email: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.SearchUser(c, params)
}

// GetPGPPublicKey operation middleware
func (siw *ServerInterfaceWrapper) GetPGPPublicKey(c *gin.Context) {

	c.Set(BearerAuthScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetPGPPublicKey(c)
}

// GetUser operation middleware
func (siw *ServerInterfaceWrapper) GetUser(c *gin.Context) {

	var err error

	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithOptions("simple", "id", c.Param("id"), &id, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter id: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(BearerAuthScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetUser(c, id)
}

// GetUserBundle operation middleware
func (siw *ServerInterfaceWrapper) GetUserBundle(c *gin.Context) {

	var err error

	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithOptions("simple", "id", c.Param("id"), &id, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter id: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(BearerAuthScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetUserBundle(c, id)
}

// GinServerOptions provides options for the Gin server.
type GinServerOptions struct {
	BaseURL      string
	Middlewares  []MiddlewareFunc
	ErrorHandler func(*gin.Context, error, int)
}

// RegisterHandlers creates http.Handler with routing matching OpenAPI spec.
func RegisterHandlers(router gin.IRouter, si ServerInterface) {
	RegisterHandlersWithOptions(router, si, GinServerOptions{})
}

// RegisterHandlersWithOptions creates http.Handler with additional options
func RegisterHandlersWithOptions(router gin.IRouter, si ServerInterface, options GinServerOptions) {
	errorHandler := options.ErrorHandler
	if errorHandler == nil {
		errorHandler = func(c *gin.Context, err error, statusCode int) {
			c.JSON(statusCode, gin.H{"msg": err.Error()})
		}
	}

	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
		ErrorHandler:       errorHandler,
	}

	router.PUT(options.BaseURL+"/api/v1/user", wrapper.UpdateUser)
	router.GET(options.BaseURL+"/api/v1/user/activate", wrapper.UserActivate)
	router.PUT(options.BaseURL+"/api/v1/user/avatar", wrapper.UpdateUserAvatar)
	router.PUT(options.BaseURL+"/api/v1/user/bundle", wrapper.UpdateUserBundle)
	router.GET(options.BaseURL+"/api/v1/user/clients", wrapper.GetUserLoginClients)
	router.POST(options.BaseURL+"/api/v1/user/email/verification", wrapper.UserEmailVerification)
	router.POST(options.BaseURL+"/api/v1/user/login", wrapper.UserLogin)
	router.POST(options.BaseURL+"/api/v1/user/logout", wrapper.UserLogout)
	router.PUT(options.BaseURL+"/api/v1/user/password", wrapper.UpdateUserPassword)
	router.POST(options.BaseURL+"/api/v1/user/public_key", wrapper.SetUserPublicKey)
	router.PUT(options.BaseURL+"/api/v1/user/public_key", wrapper.ResetUserPublicKey)
	router.POST(options.BaseURL+"/api/v1/user/register", wrapper.UserRegister)
	router.GET(options.BaseURL+"/api/v1/user/search", wrapper.SearchUser)
	router.GET(options.BaseURL+"/api/v1/user/system/public_key", wrapper.GetPGPPublicKey)
	router.GET(options.BaseURL+"/api/v1/user/:id", wrapper.GetUser)
	router.GET(options.BaseURL+"/api/v1/user/:id/bundle", wrapper.GetUserBundle)
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"/8vxdZYXMAAA",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
