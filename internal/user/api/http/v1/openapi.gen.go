// Package v1 provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.16.2 DO NOT EDIT.
package v1

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/gin-gonic/gin"
	"github.com/oapi-codegen/runtime"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// 修改用户信息
	// (PUT /api/v1/user)
	UpdateUser(c *gin.Context)
	// 用户激活
	// (GET /api/v1/user/activate)
	UserActivate(c *gin.Context, params UserActivateParams)
	// 修改用户头像
	// (PUT /api/v1/user/avatar)
	UpdateUserAvatar(c *gin.Context)
	// 修改用户密钥包
	// (PUT /api/v1/user/bundle)
	UpdateUserBundle(c *gin.Context)
	// 获取该用户当前登录的所有客户端
	// (GET /api/v1/user/clients)
	GetUserLoginClients(c *gin.Context)
	// 发送激活邮件
	// (POST /api/v1/user/email/verification)
	UserEmailVerification(c *gin.Context)
	// 用户登录
	// (POST /api/v1/user/login)
	UserLogin(c *gin.Context)
	// 退出登录
	// (POST /api/v1/user/logout)
	UserLogout(c *gin.Context)
	// 修改密码
	// (PUT /api/v1/user/password)
	UpdateUserPassword(c *gin.Context)
	// 设置用户pgp公钥
	// (POST /api/v1/user/public_key)
	SetUserPublicKey(c *gin.Context)
	// 重置用户公钥
	// (PUT /api/v1/user/public_key)
	ResetUserPublicKey(c *gin.Context)
	// 用户注册
	// (POST /api/v1/user/register)
	UserRegister(c *gin.Context)
	// 搜索用户
	// (GET /api/v1/user/search)
	SearchUser(c *gin.Context, params SearchUserParams)
	// 确认登录
	// (POST /api/v1/user/sso/confirm_login/{token})
	ConfirmLogin(c *gin.Context, token string)
	// 生成二维码
	// (GET /api/v1/user/sso/generate_qr)
	GenerateQRCode(c *gin.Context)
	// sso登录
	// (POST /api/v1/user/sso/login/{token})
	SsoLogin(c *gin.Context, token string)
	// 验证二维码状态
	// (GET /api/v1/user/sso/qr_status/{token})
	VerifyQRCodeStatus(c *gin.Context, token string)
	// 扫描二维码
	// (POST /api/v1/user/sso/scan_qr/{token})
	ScanQRCode(c *gin.Context, token string)
	// 获取服务端pgp公钥
	// (GET /api/v1/user/system/public_key)
	GetPGPPublicKey(c *gin.Context)
	// 获取用户信息
	// (GET /api/v1/user/{id})
	GetUser(c *gin.Context, id string)
	// 获取用户密钥包
	// (GET /api/v1/user/{id}/bundle)
	GetUserBundle(c *gin.Context, id string)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
	ErrorHandler       func(*gin.Context, error, int)
}

type MiddlewareFunc func(c *gin.Context)

// UpdateUser operation middleware
func (siw *ServerInterfaceWrapper) UpdateUser(c *gin.Context) {

	c.Set(BearerAuthScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.UpdateUser(c)
}

// UserActivate operation middleware
func (siw *ServerInterfaceWrapper) UserActivate(c *gin.Context) {

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params UserActivateParams

	// ------------- Required query parameter "user_id" -------------

	if paramValue := c.Query("user_id"); paramValue != "" {

	} else {
		siw.ErrorHandler(c, fmt.Errorf("Query argument user_id is required, but not found"), http.StatusBadRequest)
		return
	}

	err = runtime.BindQueryParameter("form", true, true, "user_id", c.Request.URL.Query(), &params.UserId)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter user_id: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Required query parameter "key" -------------

	if paramValue := c.Query("key"); paramValue != "" {

	} else {
		siw.ErrorHandler(c, fmt.Errorf("Query argument key is required, but not found"), http.StatusBadRequest)
		return
	}

	err = runtime.BindQueryParameter("form", true, true, "key", c.Request.URL.Query(), &params.Key)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter key: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.UserActivate(c, params)
}

// UpdateUserAvatar operation middleware
func (siw *ServerInterfaceWrapper) UpdateUserAvatar(c *gin.Context) {

	c.Set(BearerAuthScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.UpdateUserAvatar(c)
}

// UpdateUserBundle operation middleware
func (siw *ServerInterfaceWrapper) UpdateUserBundle(c *gin.Context) {

	c.Set(BearerAuthScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.UpdateUserBundle(c)
}

// GetUserLoginClients operation middleware
func (siw *ServerInterfaceWrapper) GetUserLoginClients(c *gin.Context) {

	c.Set(BearerAuthScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetUserLoginClients(c)
}

// UserEmailVerification operation middleware
func (siw *ServerInterfaceWrapper) UserEmailVerification(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.UserEmailVerification(c)
}

// UserLogin operation middleware
func (siw *ServerInterfaceWrapper) UserLogin(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.UserLogin(c)
}

// UserLogout operation middleware
func (siw *ServerInterfaceWrapper) UserLogout(c *gin.Context) {

	c.Set(BearerAuthScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.UserLogout(c)
}

// UpdateUserPassword operation middleware
func (siw *ServerInterfaceWrapper) UpdateUserPassword(c *gin.Context) {

	c.Set(BearerAuthScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.UpdateUserPassword(c)
}

// SetUserPublicKey operation middleware
func (siw *ServerInterfaceWrapper) SetUserPublicKey(c *gin.Context) {

	c.Set(BearerAuthScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.SetUserPublicKey(c)
}

// ResetUserPublicKey operation middleware
func (siw *ServerInterfaceWrapper) ResetUserPublicKey(c *gin.Context) {

	c.Set(BearerAuthScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.ResetUserPublicKey(c)
}

// UserRegister operation middleware
func (siw *ServerInterfaceWrapper) UserRegister(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.UserRegister(c)
}

// SearchUser operation middleware
func (siw *ServerInterfaceWrapper) SearchUser(c *gin.Context) {

	var err error

	c.Set(BearerAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params SearchUserParams

	// ------------- Required query parameter "email" -------------

	if paramValue := c.Query("email"); paramValue != "" {

	} else {
		siw.ErrorHandler(c, fmt.Errorf("Query argument email is required, but not found"), http.StatusBadRequest)
		return
	}

	err = runtime.BindQueryParameter("form", true, true, "email", c.Request.URL.Query(), &params.Email)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter email: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.SearchUser(c, params)
}

// ConfirmLogin operation middleware
func (siw *ServerInterfaceWrapper) ConfirmLogin(c *gin.Context) {

	var err error

	// ------------- Path parameter "token" -------------
	var token string

	err = runtime.BindStyledParameter("simple", false, "token", c.Param("token"), &token)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter token: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(BearerAuthScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.ConfirmLogin(c, token)
}

// GenerateQRCode operation middleware
func (siw *ServerInterfaceWrapper) GenerateQRCode(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GenerateQRCode(c)
}

// SsoLogin operation middleware
func (siw *ServerInterfaceWrapper) SsoLogin(c *gin.Context) {

	var err error

	// ------------- Path parameter "token" -------------
	var token string

	err = runtime.BindStyledParameter("simple", false, "token", c.Param("token"), &token)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter token: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(BearerAuthScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.SsoLogin(c, token)
}

// VerifyQRCodeStatus operation middleware
func (siw *ServerInterfaceWrapper) VerifyQRCodeStatus(c *gin.Context) {

	var err error

	// ------------- Path parameter "token" -------------
	var token string

	err = runtime.BindStyledParameter("simple", false, "token", c.Param("token"), &token)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter token: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.VerifyQRCodeStatus(c, token)
}

// ScanQRCode operation middleware
func (siw *ServerInterfaceWrapper) ScanQRCode(c *gin.Context) {

	var err error

	// ------------- Path parameter "token" -------------
	var token string

	err = runtime.BindStyledParameter("simple", false, "token", c.Param("token"), &token)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter token: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(BearerAuthScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.ScanQRCode(c, token)
}

// GetPGPPublicKey operation middleware
func (siw *ServerInterfaceWrapper) GetPGPPublicKey(c *gin.Context) {

	c.Set(BearerAuthScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetPGPPublicKey(c)
}

// GetUser operation middleware
func (siw *ServerInterfaceWrapper) GetUser(c *gin.Context) {

	var err error

	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameter("simple", false, "id", c.Param("id"), &id)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter id: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(BearerAuthScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetUser(c, id)
}

// GetUserBundle operation middleware
func (siw *ServerInterfaceWrapper) GetUserBundle(c *gin.Context) {

	var err error

	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameter("simple", false, "id", c.Param("id"), &id)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter id: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(BearerAuthScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetUserBundle(c, id)
}

// GinServerOptions provides options for the Gin server.
type GinServerOptions struct {
	BaseURL      string
	Middlewares  []MiddlewareFunc
	ErrorHandler func(*gin.Context, error, int)
}

// RegisterHandlers creates http.Handler with routing matching OpenAPI spec.
func RegisterHandlers(router gin.IRouter, si ServerInterface) {
	RegisterHandlersWithOptions(router, si, GinServerOptions{})
}

// RegisterHandlersWithOptions creates http.Handler with additional options
func RegisterHandlersWithOptions(router gin.IRouter, si ServerInterface, options GinServerOptions) {
	errorHandler := options.ErrorHandler
	if errorHandler == nil {
		errorHandler = func(c *gin.Context, err error, statusCode int) {
			c.JSON(statusCode, gin.H{"msg": err.Error()})
		}
	}

	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
		ErrorHandler:       errorHandler,
	}

	router.PUT(options.BaseURL+"/api/v1/user", wrapper.UpdateUser)
	router.GET(options.BaseURL+"/api/v1/user/activate", wrapper.UserActivate)
	router.PUT(options.BaseURL+"/api/v1/user/avatar", wrapper.UpdateUserAvatar)
	router.PUT(options.BaseURL+"/api/v1/user/bundle", wrapper.UpdateUserBundle)
	router.GET(options.BaseURL+"/api/v1/user/clients", wrapper.GetUserLoginClients)
	router.POST(options.BaseURL+"/api/v1/user/email/verification", wrapper.UserEmailVerification)
	router.POST(options.BaseURL+"/api/v1/user/login", wrapper.UserLogin)
	router.POST(options.BaseURL+"/api/v1/user/logout", wrapper.UserLogout)
	router.PUT(options.BaseURL+"/api/v1/user/password", wrapper.UpdateUserPassword)
	router.POST(options.BaseURL+"/api/v1/user/public_key", wrapper.SetUserPublicKey)
	router.PUT(options.BaseURL+"/api/v1/user/public_key", wrapper.ResetUserPublicKey)
	router.POST(options.BaseURL+"/api/v1/user/register", wrapper.UserRegister)
	router.GET(options.BaseURL+"/api/v1/user/search", wrapper.SearchUser)
	router.POST(options.BaseURL+"/api/v1/user/sso/confirm_login/:token", wrapper.ConfirmLogin)
	router.GET(options.BaseURL+"/api/v1/user/sso/generate_qr", wrapper.GenerateQRCode)
	router.POST(options.BaseURL+"/api/v1/user/sso/login/:token", wrapper.SsoLogin)
	router.GET(options.BaseURL+"/api/v1/user/sso/qr_status/:token", wrapper.VerifyQRCodeStatus)
	router.POST(options.BaseURL+"/api/v1/user/sso/scan_qr/:token", wrapper.ScanQRCode)
	router.GET(options.BaseURL+"/api/v1/user/system/public_key", wrapper.GetPGPPublicKey)
	router.GET(options.BaseURL+"/api/v1/user/:id", wrapper.GetUser)
	router.GET(options.BaseURL+"/api/v1/user/:id/bundle", wrapper.GetUserBundle)
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"DQAA//8YbCf7VD8AAA==",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
