// Package v1 provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.16.2 DO NOT EDIT.
package v1

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/gin-gonic/gin"
	"github.com/oapi-codegen/runtime"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// 获取所有群聊信息
	// (GET /api/v1/group)
	GetAllGroup(c *gin.Context)
	// 创建群聊
	// (POST /api/v1/group)
	CreateGroup(c *gin.Context)
	// 搜索群聊
	// (GET /api/v1/group/search)
	SearchGroup(c *gin.Context, params SearchGroupParams)
	// 删除群聊
	// (DELETE /api/v1/group/{id})
	DeleteGroup(c *gin.Context, id uint32)
	// 获取群聊信息
	// (GET /api/v1/group/{id})
	GetGroup(c *gin.Context, id uint32)
	// 更新群聊信息
	// (PUT /api/v1/group/{id})
	UpdateGroup(c *gin.Context, id uint32)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
	ErrorHandler       func(*gin.Context, error, int)
}

type MiddlewareFunc func(c *gin.Context)

// GetAllGroup operation middleware
func (siw *ServerInterfaceWrapper) GetAllGroup(c *gin.Context) {

	c.Set(BearerAuthScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetAllGroup(c)
}

// CreateGroup operation middleware
func (siw *ServerInterfaceWrapper) CreateGroup(c *gin.Context) {

	c.Set(BearerAuthScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.CreateGroup(c)
}

// SearchGroup operation middleware
func (siw *ServerInterfaceWrapper) SearchGroup(c *gin.Context) {

	var err error

	c.Set(BearerAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params SearchGroupParams

	// ------------- Required query parameter "keyword" -------------

	if paramValue := c.Query("keyword"); paramValue != "" {

	} else {
		siw.ErrorHandler(c, fmt.Errorf("Query argument keyword is required, but not found"), http.StatusBadRequest)
		return
	}

	err = runtime.BindQueryParameter("form", true, true, "keyword", c.Request.URL.Query(), &params.Keyword)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter keyword: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "page" -------------

	err = runtime.BindQueryParameter("form", true, false, "page", c.Request.URL.Query(), &params.Page)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter page: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "page_size" -------------

	err = runtime.BindQueryParameter("form", true, false, "page_size", c.Request.URL.Query(), &params.PageSize)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter page_size: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.SearchGroup(c, params)
}

// DeleteGroup operation middleware
func (siw *ServerInterfaceWrapper) DeleteGroup(c *gin.Context) {

	var err error

	// ------------- Path parameter "id" -------------
	var id uint32

	err = runtime.BindStyledParameter("simple", false, "id", c.Param("id"), &id)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter id: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(BearerAuthScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.DeleteGroup(c, id)
}

// GetGroup operation middleware
func (siw *ServerInterfaceWrapper) GetGroup(c *gin.Context) {

	var err error

	// ------------- Path parameter "id" -------------
	var id uint32

	err = runtime.BindStyledParameter("simple", false, "id", c.Param("id"), &id)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter id: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(BearerAuthScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetGroup(c, id)
}

// UpdateGroup operation middleware
func (siw *ServerInterfaceWrapper) UpdateGroup(c *gin.Context) {

	var err error

	// ------------- Path parameter "id" -------------
	var id uint32

	err = runtime.BindStyledParameter("simple", false, "id", c.Param("id"), &id)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter id: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(BearerAuthScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.UpdateGroup(c, id)
}

// GinServerOptions provides options for the Gin server.
type GinServerOptions struct {
	BaseURL      string
	Middlewares  []MiddlewareFunc
	ErrorHandler func(*gin.Context, error, int)
}

// RegisterHandlers creates http.Handler with routing matching OpenAPI spec.
func RegisterHandlers(router gin.IRouter, si ServerInterface) {
	RegisterHandlersWithOptions(router, si, GinServerOptions{})
}

// RegisterHandlersWithOptions creates http.Handler with additional options
func RegisterHandlersWithOptions(router gin.IRouter, si ServerInterface, options GinServerOptions) {
	errorHandler := options.ErrorHandler
	if errorHandler == nil {
		errorHandler = func(c *gin.Context, err error, statusCode int) {
			c.JSON(statusCode, gin.H{"msg": err.Error()})
		}
	}

	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
		ErrorHandler:       errorHandler,
	}

	router.GET(options.BaseURL+"/api/v1/group", wrapper.GetAllGroup)
	router.POST(options.BaseURL+"/api/v1/group", wrapper.CreateGroup)
	router.GET(options.BaseURL+"/api/v1/group/search", wrapper.SearchGroup)
	router.DELETE(options.BaseURL+"/api/v1/group/:id", wrapper.DeleteGroup)
	router.GET(options.BaseURL+"/api/v1/group/:id", wrapper.GetGroup)
	router.PUT(options.BaseURL+"/api/v1/group/:id", wrapper.UpdateGroup)
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
