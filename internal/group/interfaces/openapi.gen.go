// Package interfaces provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen/v2 version v2.1.0 DO NOT EDIT.
package interfaces

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/gin-gonic/gin"
	"github.com/oapi-codegen/runtime"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// 获取所有群聊信息
	// (GET /api/v1/group)
	GetAllGroup(c *gin.Context)
	// 创建群聊
	// (POST /api/v1/group)
	CreateGroup(c *gin.Context)
	// 搜索群聊
	// (GET /api/v1/group/search)
	SearchGroup(c *gin.Context, params SearchGroupParams)
	// 删除群聊
	// (DELETE /api/v1/group/{id})
	DeleteGroup(c *gin.Context, id uint32)
	// 获取群聊信息
	// (GET /api/v1/group/{id})
	GetGroup(c *gin.Context, id uint32)
	// 更新群聊信息
	// (PUT /api/v1/group/{id})
	UpdateGroup(c *gin.Context, id uint32)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
	ErrorHandler       func(*gin.Context, error, int)
}

type MiddlewareFunc func(c *gin.Context)

// GetAllGroup operation middleware
func (siw *ServerInterfaceWrapper) GetAllGroup(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetAllGroup(c)
}

// CreateGroup operation middleware
func (siw *ServerInterfaceWrapper) CreateGroup(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.CreateGroup(c)
}

// SearchGroup operation middleware
func (siw *ServerInterfaceWrapper) SearchGroup(c *gin.Context) {

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params SearchGroupParams

	// ------------- Required query parameter "keyword" -------------

	if paramValue := c.Query("keyword"); paramValue != "" {

	} else {
		siw.ErrorHandler(c, fmt.Errorf("Query argument keyword is required, but not found"), http.StatusBadRequest)
		return
	}

	err = runtime.BindQueryParameter("form", true, true, "keyword", c.Request.URL.Query(), &params.Keyword)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter keyword: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "page" -------------

	err = runtime.BindQueryParameter("form", true, false, "page", c.Request.URL.Query(), &params.Page)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter page: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "page_size" -------------

	err = runtime.BindQueryParameter("form", true, false, "page_size", c.Request.URL.Query(), &params.PageSize)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter page_size: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.SearchGroup(c, params)
}

// DeleteGroup operation middleware
func (siw *ServerInterfaceWrapper) DeleteGroup(c *gin.Context) {

	var err error

	// ------------- Path parameter "id" -------------
	var id uint32

	err = runtime.BindStyledParameterWithOptions("simple", "id", c.Param("id"), &id, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter id: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.DeleteGroup(c, id)
}

// GetGroup operation middleware
func (siw *ServerInterfaceWrapper) GetGroup(c *gin.Context) {

	var err error

	// ------------- Path parameter "id" -------------
	var id uint32

	err = runtime.BindStyledParameterWithOptions("simple", "id", c.Param("id"), &id, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter id: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetGroup(c, id)
}

// UpdateGroup operation middleware
func (siw *ServerInterfaceWrapper) UpdateGroup(c *gin.Context) {

	var err error

	// ------------- Path parameter "id" -------------
	var id uint32

	err = runtime.BindStyledParameterWithOptions("simple", "id", c.Param("id"), &id, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter id: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.UpdateGroup(c, id)
}

// GinServerOptions provides options for the Gin server.
type GinServerOptions struct {
	BaseURL      string
	Middlewares  []MiddlewareFunc
	ErrorHandler func(*gin.Context, error, int)
}

// RegisterHandlers creates http.Handler with routing matching OpenAPI spec.
func RegisterHandlers(router gin.IRouter, si ServerInterface) {
	RegisterHandlersWithOptions(router, si, GinServerOptions{})
}

// RegisterHandlersWithOptions creates http.Handler with additional options
func RegisterHandlersWithOptions(router gin.IRouter, si ServerInterface, options GinServerOptions) {
	errorHandler := options.ErrorHandler
	if errorHandler == nil {
		errorHandler = func(c *gin.Context, err error, statusCode int) {
			c.JSON(statusCode, gin.H{"msg": err.Error()})
		}
	}

	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
		ErrorHandler:       errorHandler,
	}

	router.GET(options.BaseURL+"/api/v1/group", wrapper.GetAllGroup)
	router.POST(options.BaseURL+"/api/v1/group", wrapper.CreateGroup)
	router.GET(options.BaseURL+"/api/v1/group/search", wrapper.SearchGroup)
	router.DELETE(options.BaseURL+"/api/v1/group/:id", wrapper.DeleteGroup)
	router.GET(options.BaseURL+"/api/v1/group/:id", wrapper.GetGroup)
	router.PUT(options.BaseURL+"/api/v1/group/:id", wrapper.UpdateGroup)
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
